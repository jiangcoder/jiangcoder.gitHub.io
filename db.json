{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/logo/java.jpg","path":"logo/java.jpg","modified":1,"renderable":0},{"_id":"source/logo/elasticsearch.jpg","path":"logo/elasticsearch.jpg","modified":1,"renderable":0},{"_id":"source/logo/github.jpg","path":"logo/github.jpg","modified":1,"renderable":0},{"_id":"themes/hexo-theme-icarus/source/css/insight.css","path":"css/insight.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/css/back-to-top.css","path":"css/back-to-top.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/css/search.css","path":"css/search.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/css/progressbar.css","path":"css/progressbar.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/images/alipay.jpg","path":"images/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/images/avatar2.png","path":"images/avatar2.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/images/email.svg","path":"images/email.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/images/favicon.svg","path":"images/favicon.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/images/gitee.svg","path":"images/gitee.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/images/github.png","path":"images/github.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/images/github.svg","path":"images/github.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/images/links.svg","path":"images/links.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/images/maotouying.svg","path":"images/maotouying.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/images/search.png","path":"images/search.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/images/search.svg","path":"images/search.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/images/no2.jpg","path":"images/no2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/images/search2.svg","path":"images/search2.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/images/thumbnail.svg","path":"images/thumbnail.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/images/weibo.svg","path":"images/weibo.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/js/animation.js","path":"js/animation.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/js/back-to-top.js","path":"js/back-to-top.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/js/clipboard.js","path":"js/clipboard.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/js/gallery.js","path":"js/gallery.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/js/insight.js","path":"js/insight.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/images/no.gif","path":"images/no.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/js/Valine.min.js","path":"js/Valine.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/images/wechatpay.png","path":"images/wechatpay.png","modified":1,"renderable":1}],"Cache":[{"_id":"themes/hexo-theme-icarus/README.md","hash":"4409383fbd7422800049d6597e9b26aa8db66b66","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/_config.yml","hash":"fbff454813ce5e76831db591fdcaab81e56a6a70","modified":1584865343708},{"_id":"themes/hexo-theme-icarus/LICENSE","hash":"41f72cd544612bc4589c924c776422b800a4eff7","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/package.json","hash":"4167e65682af257bdf8531a05730e6c42339996d","modified":1558555348000},{"_id":"source/_posts/ElasticSearch之索引模板.md","hash":"cecb74259c5879feec4baecfafa69fbc6dd54336","modified":1584862821682},{"_id":"source/_posts/Elasticsearch负载高问题排查.md","hash":"48e2d1c239f68852a5cfa56b599dc08c86f96d2a","modified":1584862821651},{"_id":"source/_posts/Elasticsearch 搜索模块之preference参数.md","hash":"c6473850be1b38cbe5d5401c06d89ab9a18fc921","modified":1584862821658},{"_id":"source/_posts/Elasticsearch源码编译by Intellij Idea.md","hash":"0b8d090ee3012c208b45109f6001aa0b9e7bec61","modified":1584862821679},{"_id":"source/_posts/Git如何回退版本.md","hash":"1adba00fb6b5ac46dba01c2f5e7b1806500c71f3","modified":1584862821670},{"_id":"source/_posts/lambda表达式.md","hash":"52895660ff3e8cfebd1e37956f96f0de03656f04","modified":1584862821675},{"_id":"source/logo/java.jpg","hash":"fd22fb8999ddb6d6e80777722f7e0b010f7a62ba","modified":1584859260586},{"_id":"source/logo/elasticsearch.jpg","hash":"894aa6d40b4ba94877bb654418ee21a5ea677a7e","modified":1584858852481},{"_id":"source/logo/github.jpg","hash":"a7723397bf04bdb300ed861bbc4e9aeab1551f84","modified":1584859560620},{"_id":"source/_posts/jvm-GC-and-GC-Tuning.md","hash":"10476090e5141a1e87e12b17a122a9c0b64eb723","modified":1584862821667},{"_id":"themes/hexo-theme-icarus/languages/es.yml","hash":"8827823e5b2ce967566854c9bfebc7c69098b4ac","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/languages/en.yml","hash":"b69c91878f30937f50438ff64dffd3f6bf91bcf5","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/languages/fr.yml","hash":"0017f93a5d491a9c0e55911cdc35316762c5a94e","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/languages/id.yml","hash":"92d2d19a62a17b6e99f82a014309bbf6c13c9ae8","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/languages/ko.yml","hash":"06d2bb8b66f68f780218e0ba7edffe1e57fac268","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/languages/ja.yml","hash":"6eed7771de2353d71b720c6e605cceb3f230b12e","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/languages/pt-BR.yml","hash":"bcf5bc81ca855d26bbc3b3bfabc7d84429e74b85","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/languages/tr.yml","hash":"eff1c0b3d5c4b328f6dd74a195ff378c898f4d29","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/languages/ru.yml","hash":"ba8b4f7d77eb1d1e28aa1f9107bd0bbbdc4cba99","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/languages/vn.yml","hash":"6d9f4fabca711a6cb0a0efd72aa75c3641beb4a6","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/languages/zh-CN.yml","hash":"c6bf0ca9b1367be37dc7e8adeb11e60026d07144","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/archive.ejs","hash":"64a81f4c6ca9517169413408d076371e8e09c63a","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/languages/zh-TW.yml","hash":"79fab0bff625634fb6bb6cadf9c547bd36226dcf","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/categories.ejs","hash":"29d304f2b95a04fbc5e7529f9bdce9648e3545ef","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/category.ejs","hash":"bda344da0e6c03899f53abc20ae2a2efab5ab243","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/page.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/index.ejs","hash":"71120f41d019bf2866a5556747e5e671c8147f85","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/layout.ejs","hash":"a7ae7cc5a76413dc556c7b2714413c7911a107c3","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/post.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/tag.ejs","hash":"1feac7aa842882757a479b8ad427f6a72fce70c4","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/tags.ejs","hash":"0c527c6b72386f11c18e8aa5249be8c601e69906","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/scripts/index.js","hash":"9203e2ba1f821d945edf20fc277f3c58d22bfd00","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/includes/common/ConfigValidator.js","hash":"cd3cd12bc042b401825fd7bfd9a6434c8b14e092","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/includes/common/ConfigGenerator.js","hash":"451397efc7808787419fa3eb6b043c0bd8bbdf30","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/includes/common/utils.js","hash":"c0aeaeb57a42bcc71a92da2249762f91abd83ffe","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/includes/filters/highlight.js","hash":"19a4dcd2dee7388544b57e473cfb0fc9eea9623e","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/includes/generators/categories.js","hash":"7cb370ac53a05d6b1b9203579716c0ca83d35c36","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/includes/generators/category.js","hash":"313e170e55d74526c4e1be7181ef7a21439147c9","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/includes/generators/insight.js","hash":"c4b981443927b87cc14a3a583029e13f819d6d71","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/includes/generators/tags.js","hash":"8195322c208706427a1cf56361669dca4d86f6f1","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/includes/helpers/cdn.js","hash":"7d34ea6400cb3611c374c135304abcb65ef291b7","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/includes/helpers/config.js","hash":"1956e2be88250b4da6a8a9b8d16e125145f66f5f","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/includes/helpers/layout.js","hash":"81551fcc8aeeb84cc5e2cec4f2d540e707124597","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/includes/helpers/override.js","hash":"726cf99612fd060753d9da08db2776aec1802e20","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/includes/helpers/page.js","hash":"25aeed6449ca381661cec528fe96bbb993026ca9","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/includes/helpers/site.js","hash":"f154ddb0dac79fd28ced2b518f8052b42555d0c9","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/includes/specs/article.spec.js","hash":"a805c1a6f03ccb07d73512aef40d38541ddbb0eb","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/includes/specs/comment.spec.js","hash":"02af67eb87482028b223299b20a129756b1c122b","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/includes/specs/config.spec.js","hash":"7a9bac384a73cf9f39173fdb2dfc2813784d8891","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/includes/specs/donate.spec.js","hash":"639b405c9e5dac04c2dc168c2754e50a5c13d197","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/includes/specs/footer.spec.js","hash":"49fabe9c03f3124f0253fa1ee3e69328373ad117","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/includes/specs/icon_link.spec.js","hash":"f2a83ac5ccb74fc6f3dfbd25430e142297d8491c","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/includes/specs/meta.spec.js","hash":"70abe77d3664176ec977316522014ce7e0aa439d","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/includes/specs/navbar.spec.js","hash":"67ebd05fb378439a094a7906f4ea04fbedd8c1b5","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/includes/specs/plugins.spec.js","hash":"3db2046311dd0392aed0ba2d81b51a081131f1de","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/includes/specs/providers.spec.js","hash":"e29473155a35f391fbc53349bdc256cb7600855e","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/includes/specs/search.spec.js","hash":"d981ad203a2002c35d710d33e304f9e99f31cab0","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/includes/specs/share.spec.js","hash":"6c04cccec13a656189ab2d917d69d059027d0343","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/includes/specs/sidebar.spec.js","hash":"bd500be763486918894e731ce14bc9c4047fb76d","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/includes/specs/widgets.spec.js","hash":"eeeaae3ed079033788b19e172cd1f83c5ca8bc4f","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/includes/tasks/check_config.js","hash":"ce7626d643737c90dee6b75435ccdec26b89dacf","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/includes/tasks/check_deps.js","hash":"cfc357f27116d1b9285a3b0bec35c3e89ae73711","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/includes/tasks/welcome.js","hash":"00d1ef8c9609552b82e9a5140b838a9057c59508","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/comment/changyan.ejs","hash":"9ccc7ec354b968e60bdcfcd1dba451d38de61f12","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/comment/disqus.ejs","hash":"b5fff46e453d58baa20028a47fd85923494bb85c","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/comment/gitalk.ejs","hash":"ef01396e64ab4f6e62155f0b357bcd903138d611","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/comment/facebook.ejs","hash":"b38ea86a1cae48f671501af74d7f109f63fb3d72","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/comment/gitment.ejs","hash":"430416210933b7edcbfcc67ede4aa55539da2750","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/comment/livere.ejs","hash":"12ff9a345f6bba2f732f592e39508c2afde89b00","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/comment/valine.ejs","hash":"f71b918151812475da9ce94def0f8fd006720ba3","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/comment/isso.ejs","hash":"cc6a43bd24be764086f88ad7c5c97ff04df87e0b","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/donate/paypal.ejs","hash":"3975dee39f9378975b9c10f37d118ad7cb6f5bf6","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/donate/patreon.ejs","hash":"8e52a9c28ffaf4b0b786a20977b848c5f60f2274","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/donate/alipay.ejs","hash":"3290058879973e403a05472a0fe2ac0219d5b961","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/donate/wechat.ejs","hash":"051b873e1fc28c1d7c2d6443991b6a2f43813e6b","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/common/article.ejs","hash":"067a7f7c952dac1e3aba6b62211fe949fa64a99d","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/common/footer.ejs","hash":"9c7fe732e282ee2974d06ddb97d443f98b399e9c","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/common/navbar.ejs","hash":"68eb56d8adc5ca7db2be38375895ffd52478e5d8","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/common/head.ejs","hash":"ff785f658ec4fa663a55a144eeb2c04d7d9816d5","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/common/paginator.ejs","hash":"7837d80b27f166161b3deeffb571680025c7d723","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/common/scripts.ejs","hash":"5414d6bfbf88efa7e72ccf7e44a79d0378ddeb77","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/plugin/animejs.ejs","hash":"198062ef863c96aa4d6a8225d575afcb60dfb1d1","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/common/widget.ejs","hash":"31167dca8c0ba6bbff7d4e347dee12196b500a92","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/plugin/back-to-top.ejs","hash":"79d1118a3d3ebc521ffce452b986b504f0e7d6b7","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/plugin/busuanzi.ejs","hash":"205dedf8f97e328bb3182dc8daebd2e2b2204aca","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/plugin/clipboard.ejs","hash":"8662ed9c211f3993b93eedcf5e41c2a1ddbede57","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/plugin/baidu-analytics.ejs","hash":"eb66e313ad43ec4424b2d75bae94e5c8a7568428","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/plugin/gallery.ejs","hash":"ad68fafd923747d6b7c1b5873d00989d1639678c","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/plugin/google-analytics.ejs","hash":"282cecb28ac458b71b56cf429c72ffac0f820199","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/plugin/hotjar.ejs","hash":"2b97737d802984750a7b4461fcf68818a57a2439","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/plugin/mathjax.ejs","hash":"667aabb6b9cb4d707b37975af794d4a3c66b5264","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/plugin/progressbar.ejs","hash":"e594ed6705bccbef27f49d84b6153f6443efbecd","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/plugin/outdated-browser.ejs","hash":"fe051093893c64c8575bcc67dc1c146d409e8e80","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/search/baidu.ejs","hash":"850aa91778100d693a52b10eaa8586c8e3215ee6","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/search/google-cse.ejs","hash":"4b881a99325a6a0cebf97ac53e09d8fc67f87d29","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/search/insight.ejs","hash":"9a27db2a007582ceee7ca4b1eebddbd456893568","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/share/addthis.ejs","hash":"f1c5f337333009d5f00dfbac4864a16ef8f9cb8d","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/share/addtoany.ejs","hash":"04cb247d8c83ca7c5b52f3b11bb3ac155b1bc3ab","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/share/bdshare.ejs","hash":"f14c8084b7ee16a091f0bd2ae9039e3bfff7e7b7","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/share/sharejs.ejs","hash":"65d08316cc479910ea4f526cd1c299d0104daf7f","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/share/sharethis.ejs","hash":"4f2c40f790f3be0a4e79db04f02ea41ba2f4d4c0","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/widget/archive.ejs","hash":"eb738a2ac2935ce7a542964d90088613b281dd15","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/widget/category.ejs","hash":"c2a9f2211a21a168c54b0563cdfd58bd25fa39fe","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/widget/links.ejs","hash":"16b2fb9d2229abc2c322bb665a2079acc20c6572","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/widget/profile.ejs","hash":"921076699bbb328b771ed4549b13c84a33493a80","modified":1584864076809},{"_id":"themes/hexo-theme-icarus/layout/widget/recent_posts.ejs","hash":"2166f3190e47bf4746775b5d16654564a88c2041","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/widget/tag.ejs","hash":"8c5b8020ca776cc3ebbc7b723915f3173efc28d4","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/widget/tagcloud.ejs","hash":"d32e7c56e8e2074da16d9141f9a597841d28d07d","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/layout/widget/toc.ejs","hash":"a91f9cb2b294efa61acb5de73d47ba461e5a7523","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/source/css/insight.css","hash":"22943a610d5cfffedfb823c692f4db2b1f37a4c9","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/source/css/back-to-top.css","hash":"5805bee2445e997d64dfe526b08b5fe0bce357eb","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/source/css/search.css","hash":"c1cb306e075386517ac15bf4ef37c647d37ec6b5","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/source/css/progressbar.css","hash":"bbc737b7a8feb19901e792c447a846273779d5c3","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/source/css/style.styl","hash":"6a7e421a393c5d8cbd2174639e6ac6e84ee91dec","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/source/images/alipay.jpg","hash":"107d693efe92e2547e1104d0e2c80bdbacd74aae","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/source/images/avatar2.png","hash":"276602cb0eaa45e0a775faa7e845cc5dc4411a9d","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/source/images/avatar.png","hash":"68eb5a21030fb04e8c9843927b2d0adafe89aaaf","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/source/images/email.svg","hash":"f0f48e4846f2059185f6d4cd0673aadcd4e08fc0","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/source/images/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/source/images/gitee.svg","hash":"a8ca124314807d0acda6e155ba7983403c240598","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/source/images/github.png","hash":"bf450c4e45a31f8a4dd6fbf8f9c443e819cc2142","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/source/images/github.svg","hash":"c9dcc71440c086ed5b16878efb0d7cce276279f8","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/source/images/links.svg","hash":"e31b7e429abb80e5b050d539f253a6620c4d3437","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/source/images/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/source/images/maotouying.svg","hash":"b0b45a366522863279ff92afd247f42cf74a9749","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/source/images/search.png","hash":"3a2d7373be729b31be9f821b1aca82bea6bca7e1","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/source/images/search.svg","hash":"8e87a7b64143c40778fa031b17d6966dd3c23c5a","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/source/images/no2.jpg","hash":"05fc495d2050921392d055146bec5defc9645d68","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/source/images/search2.svg","hash":"c196024fe206ed5486a87e2b23d5f660d22b65f7","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/source/images/thumbnail.svg","hash":"fa8b54d30d0b104236428edf1133f0988193b49d","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/source/images/weibo.svg","hash":"a9f8399fb0f4275b08a9315400dbbd3810b54b5f","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/source/js/animation.js","hash":"d744581909d2d092a584be07c39f9d3f0d009ec7","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/source/js/back-to-top.js","hash":"9a16978f69d5121301358b4f8ee921a773c406e0","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/source/js/clipboard.js","hash":"1c41555846762922bfec9edcc578be30d09390d1","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/source/js/gallery.js","hash":"88b23abfc3b519413be54533ed0f39e0c68fcdd1","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/source/js/insight.js","hash":"8ba56fd5e4232a05ccef5f8b733c7ecca0814633","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/source/js/main.js","hash":"8562d44956e3b65ba5ae8cf1f84dff5ce85477cd","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/source/images/no.gif","hash":"0371be95c950484c6880365c8513ad5bc846efb5","modified":1558555348000},{"_id":"themes/hexo-theme-icarus/source/js/Valine.min.js","hash":"82f0e6dff2565e0f8ebe88e67257ceccf6d1148d","modified":1558555348000},{"_id":"source/_posts/思维导图系列/java8新特性.png","hash":"667d69b25bc3f14a0fbea72ababa8d28b9f32f03","modified":1584194073427},{"_id":"themes/hexo-theme-icarus/source/images/wechatpay.png","hash":"1ff14c901366f499cfc245ff6c533dd1679ef44d","modified":1558555348000},{"_id":"source/_posts/思维导图系列/lucene-思维导图.png","hash":"8c40f3159219020f264e2c9248979e646d7796d3","modified":1584193824439},{"_id":"source/_posts/思维导图系列/基于TCP协议的RPC.png","hash":"2f866c7098bf5fcdd20ed879c0b115b06f2e2ba5","modified":1584194346551},{"_id":"source/_posts/思维导图系列/1.2 基于HTTP协议的RPC.png","hash":"9fd0ed4dc3dd620d7956969c0d44c90dd7cc7d04","modified":1584194509300},{"_id":"public/content.json","hash":"cd7d1fe8ae333fb586453e2d42051c6d11d7d689","modified":1584865348231},{"_id":"public/2020/03/20/Elasticsearch负载高问题排查/index.html","hash":"10642b23b11c88d7685ade9755e76e7767f14190","modified":1584865348231},{"_id":"public/2020/03/20/Git如何回退版本/index.html","hash":"fe67430225172269a8d651a2da18e3ba419743c1","modified":1584865348231},{"_id":"public/2020/03/06/Elasticsearch 搜索模块之preference参数/index.html","hash":"99d2334908cd332c9d8863c369953f0beb0aaca1","modified":1584865348231},{"_id":"public/2020/03/06/Elasticsearch源码编译by Intellij Idea/index.html","hash":"6c01ecfab72c9ca41d96874d0b2bcfc16639ea83","modified":1584865348231},{"_id":"public/2020/03/06/ElasticSearch之索引模板/index.html","hash":"30dd44585ace0509afe9724ac3bc0bf413636bc7","modified":1584865348231},{"_id":"public/2020/03/06/lambda表达式/index.html","hash":"81f8cc21a88a9cc4ed02d626edd88eedebdca1b7","modified":1584865348231},{"_id":"public/2020/02/26/jvm-GC-and-GC-Tuning/index.html","hash":"bd7f70d842e95d0c5635b9217b49ce14c96bf8e8","modified":1584865348231},{"_id":"public/archives/index.html","hash":"59a9c58ad6c07b11100c16983ff113ccd24b64b7","modified":1584865348231},{"_id":"public/archives/2020/index.html","hash":"e70686a6dace49bd75bbc6282744866f4de9e6ed","modified":1584865348231},{"_id":"public/archives/2020/02/index.html","hash":"ac16df74774b9f6246e670cf138b01df24c43f39","modified":1584865348231},{"_id":"public/archives/2020/03/index.html","hash":"3055bbc8d0601cdeaf3bac1aadf958a3f8bfaa69","modified":1584865348231},{"_id":"public/categories/elasticsearch/index.html","hash":"30e5fdaf65626277300ddec52770c8cd902a8db2","modified":1584865348231},{"_id":"public/categories/git/index.html","hash":"a501535c5e3687c65cda5e5069103f0db3d17eba","modified":1584865348231},{"_id":"public/categories/java/index.html","hash":"6f847448f2b2af5c342be38c80bfe71053a923da","modified":1584865348231},{"_id":"public/index.html","hash":"1040f00c1451e984a2e4707ac6f96bfe27a5dd9a","modified":1584865348231},{"_id":"public/tags/elasticsearch/index.html","hash":"86703a1a9ee99d2e1e5ebac9e085cb54a207fe5c","modified":1584865348231},{"_id":"public/tags/git/index.html","hash":"ed9c6d900e52c802553fd5f1e9f2c3d6d7ab53be","modified":1584865348231},{"_id":"public/tags/java/index.html","hash":"b2a04c720247f22a16869aca2cb99cf5f4c9da82","modified":1584865348231},{"_id":"public/categories/index.html","hash":"31377b9ee8a7966c907aa8e504446958a1f12f3f","modified":1584865348231},{"_id":"public/tags/index.html","hash":"aedff2d6e3aeed2ef2635bd88608d72fb98980d1","modified":1584865348231},{"_id":"public/logo/elasticsearch.jpg","hash":"894aa6d40b4ba94877bb654418ee21a5ea677a7e","modified":1584865348231},{"_id":"public/logo/github.jpg","hash":"a7723397bf04bdb300ed861bbc4e9aeab1551f84","modified":1584865348231},{"_id":"public/logo/java.jpg","hash":"fd22fb8999ddb6d6e80777722f7e0b010f7a62ba","modified":1584865348231},{"_id":"public/images/alipay.jpg","hash":"107d693efe92e2547e1104d0e2c80bdbacd74aae","modified":1584865348231},{"_id":"public/images/avatar2.png","hash":"276602cb0eaa45e0a775faa7e845cc5dc4411a9d","modified":1584865348231},{"_id":"public/images/avatar.png","hash":"68eb5a21030fb04e8c9843927b2d0adafe89aaaf","modified":1584865348231},{"_id":"public/images/email.svg","hash":"f0f48e4846f2059185f6d4cd0673aadcd4e08fc0","modified":1584865348231},{"_id":"public/images/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1584865348231},{"_id":"public/images/gitee.svg","hash":"a8ca124314807d0acda6e155ba7983403c240598","modified":1584865348231},{"_id":"public/images/github.png","hash":"bf450c4e45a31f8a4dd6fbf8f9c443e819cc2142","modified":1584865348231},{"_id":"public/images/github.svg","hash":"c9dcc71440c086ed5b16878efb0d7cce276279f8","modified":1584865348231},{"_id":"public/images/links.svg","hash":"e31b7e429abb80e5b050d539f253a6620c4d3437","modified":1584865348231},{"_id":"public/images/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1584865348231},{"_id":"public/images/maotouying.svg","hash":"b0b45a366522863279ff92afd247f42cf74a9749","modified":1584865348231},{"_id":"public/images/search.png","hash":"3a2d7373be729b31be9f821b1aca82bea6bca7e1","modified":1584865348231},{"_id":"public/images/search.svg","hash":"8e87a7b64143c40778fa031b17d6966dd3c23c5a","modified":1584865348231},{"_id":"public/images/no2.jpg","hash":"05fc495d2050921392d055146bec5defc9645d68","modified":1584865348231},{"_id":"public/images/thumbnail.svg","hash":"fa8b54d30d0b104236428edf1133f0988193b49d","modified":1584865348231},{"_id":"public/images/search2.svg","hash":"c196024fe206ed5486a87e2b23d5f660d22b65f7","modified":1584865348231},{"_id":"public/images/weibo.svg","hash":"a9f8399fb0f4275b08a9315400dbbd3810b54b5f","modified":1584865348231},{"_id":"public/images/no.gif","hash":"0371be95c950484c6880365c8513ad5bc846efb5","modified":1584865348231},{"_id":"public/css/back-to-top.css","hash":"5805bee2445e997d64dfe526b08b5fe0bce357eb","modified":1584865348231},{"_id":"public/css/insight.css","hash":"22943a610d5cfffedfb823c692f4db2b1f37a4c9","modified":1584865348231},{"_id":"public/css/search.css","hash":"c1cb306e075386517ac15bf4ef37c647d37ec6b5","modified":1584865348231},{"_id":"public/css/progressbar.css","hash":"bbc737b7a8feb19901e792c447a846273779d5c3","modified":1584865348231},{"_id":"public/css/style.css","hash":"699d3a89da91c4811c1c78326a06fe9d49635dd8","modified":1584865348231},{"_id":"public/js/animation.js","hash":"d744581909d2d092a584be07c39f9d3f0d009ec7","modified":1584865348231},{"_id":"public/js/back-to-top.js","hash":"9a16978f69d5121301358b4f8ee921a773c406e0","modified":1584865348231},{"_id":"public/js/gallery.js","hash":"88b23abfc3b519413be54533ed0f39e0c68fcdd1","modified":1584865348231},{"_id":"public/js/clipboard.js","hash":"1c41555846762922bfec9edcc578be30d09390d1","modified":1584865348231},{"_id":"public/js/main.js","hash":"8562d44956e3b65ba5ae8cf1f84dff5ce85477cd","modified":1584865348231},{"_id":"public/js/insight.js","hash":"8ba56fd5e4232a05ccef5f8b733c7ecca0814633","modified":1584865348231},{"_id":"public/js/Valine.min.js","hash":"82f0e6dff2565e0f8ebe88e67257ceccf6d1148d","modified":1584865348231},{"_id":"public/images/wechatpay.png","hash":"1ff14c901366f499cfc245ff6c533dd1679ef44d","modified":1584865348231}],"Category":[{"name":"elasticsearch","_id":"ck82rwpln0001g52w1db55h88"},{"name":"git","_id":"ck82rwpmi000fg52w1d08glmc"},{"name":"java","_id":"ck82rwpmk000jg52w3tmn2rxk"}],"Data":[],"Page":[],"Post":[{"title":"ElasticSearch之索引模板","toc":true,"thumbnail":"/logo/elasticsearch.jpg","_content":"## 一，模板简述\ntemplate大致分成setting和mappings两部分：\n索引可使用预定义的模板进行创建,这个模板称作Index templates。模板设置包括settings和mappings，通过模式匹配的方式使得多个索引重用一个模板。 \n1. settings主要作用于index的一些相关配置信息，如分片数、副本数，tranlog同步条件、refresh等。\n \n2. mappings主要是一些说明信息，大致又分为_all、_source、prpperties这三部分：\n \n     (1) _all：主要指的是AllField字段，我们可以将一个或多个都包含进来，在进行检索时无需指定字段的情况下检索多个字段。设置“_all\" : {\"enabled\" : true}\n \n     (2) _source：主要指的是SourceField字段，Source可以理解为ES除了将数据保存在索引文件中，另外还有一份源数据。_source字段在我们进行检索时相当重要，如果在{\"enabled\" : false}情况下默认检索只会返回ID， 你需要通过Fields字段去到索引中去取数据，效率不是很高。但是enabled设置为true时，索引会比较大，这时可以通过Compress进行压缩和inclueds、excludes来在字段级别上进行一些限制，自定义哪些字段允许存储。\n \n     (3) properties：这是最重要的步骤，主要针对索引结构和字段级别上的一些设置。\n3.咱们通常在elasticsearch中 post mapping信息，每重新创建索引便到设置mapping，分片，副本信息。非常繁琐。强烈建议大家通过设置template方式设置索引信息。设置索引名，通过正则匹配的方式匹配到相应的模板。ps:直接修改mapping的优先级>索引template。索引匹配了多个template，当属性等配置出现不一致的，以order的最大值为准，order默认值为0\n## 二，创建模板\n例如：\n \n```java\n{\n  \"template\": \"pmall*\",\n  \"settings\": {\n    \"index.number_of_shards\": 1,\n    \"number_of_replicas\": 4,\n    \"similarity\": {\n      \"IgnoreTFSimilarity\": {\n        \"type\": \"IgoreTFSimilarity\"\n      }\n    }\n  },\n  \"mappings\": {\n    \"_default_\": {\n      \"_source\": {\n        \"enabled\": false\n      }\n    },\n    \"commodity\": {\n      \"properties\": {\n        \"sold\": {\n          \"type\": \"long\"\n        },\n        \"online_time\": {\n          \"type\": \"long\"\n        },\n        \"price\": {\n          \"type\": \"long\"\n        },\n        \"publish_time\": {\n          \"type\": \"long\"\n        },\n        \"id\": {\n          \"type\": \"long\"\n        },\n        \"catecode\": {\n          \"type\": \"integer\"\n        },\n        \"title\": {\n          \"search_analyzer\": \"ikSmart\",\n          \"similarity\": \"IgnoreTFSimilarity\",\n          \"analyzer\": \"ik\",\n          \"type\": \"text\"\n        },\n        \"content\": {\n          \"index\": false,\n          \"store\": true,\n          \"type\": \"keyword\"\n        },\n        \"status\": {\n          \"type\": \"integer\"\n        }\n      }\n    }\n  }\n}\n```\n\n \n\n## 三，删除模板\n\n```java\n\nDELETE /_template/template_1\n```\n\n\n\n\n## 四，查看模板：\n \n```java\nGET /_template/template_1\n```\n\n\n也可以通过模糊匹配得到多个模板信息\n```java\nGET /_template/temp* \n```\n\n\n可以批量查看模板\n```java\nGET /_template/template_1,template_2\n```\n\n\n验证模板是否存在：\n \n```java\nHEAD _template/template_1\n```\n\n\n## 五：多个模板同时匹配，以order顺序倒排，order越大，优先级越高\n \n```java\n\n \nPUT /_template/template_1\n{\n    \"template\" : \"*\",\n    \"order\" : 0,\n    \"settings\" : {\n        \"number_of_shards\" : 1\n    },\n    \"mappings\" : {\n        \"type1\" : {\n            \"_source\" : { \"enabled\" : false }\n        }\n    }\n}\n\nPUT /_template/template_2\n{\n    \"template\" : \"te*\",\n    \"order\" : 1,\n    \"settings\" : {\n        \"number_of_shards\" : 1\n    },\n    \"mappings\" : {\n        \"type1\" : {\n            \"_source\" : { \"enabled\" : true }\n        }\n    }\n}\n```\n\n\n \n## 六，模板版本号\n \n模板可以选择添加版本号，这可以是任何整数值，以便简化外部系统的模板管理。版本字段是完全可选的，它仅用于模板的外部管理。要取消设置版本，只需替换模板即可\n\n \n创建模板：\n\n```java\nPUT /_template/template_1\n{\n    \"template\" : \"*\",\n    \"order\" : 0,\n    \"settings\" : {\n        \"number_of_shards\" : 1\n    },\n    \"version\": 123\n}\n```\n\n\n查看模板版本号：\n\n```java\nGET /_template/template_1?filter_path=*.version\n```\n\n\n\n响应如下：\n\n```java\n{\n  \"template_1\" : {\n    \"version\" : 123\n  }\n}\n```\n\n\n## 七，参考：\n[url=https://www.elastic.co/guide/en/elasticsearch/reference/5.4/indices-templates.html]indices-templates[/url]","source":"_posts/ElasticSearch之索引模板.md","raw":"title: ElasticSearch之索引模板\ntoc: true\ncategories: elasticsearch\ntags:\n  - elasticsearch\nthumbnail: /logo/elasticsearch.jpg\n---\n## 一，模板简述\ntemplate大致分成setting和mappings两部分：\n索引可使用预定义的模板进行创建,这个模板称作Index templates。模板设置包括settings和mappings，通过模式匹配的方式使得多个索引重用一个模板。 \n1. settings主要作用于index的一些相关配置信息，如分片数、副本数，tranlog同步条件、refresh等。\n \n2. mappings主要是一些说明信息，大致又分为_all、_source、prpperties这三部分：\n \n     (1) _all：主要指的是AllField字段，我们可以将一个或多个都包含进来，在进行检索时无需指定字段的情况下检索多个字段。设置“_all\" : {\"enabled\" : true}\n \n     (2) _source：主要指的是SourceField字段，Source可以理解为ES除了将数据保存在索引文件中，另外还有一份源数据。_source字段在我们进行检索时相当重要，如果在{\"enabled\" : false}情况下默认检索只会返回ID， 你需要通过Fields字段去到索引中去取数据，效率不是很高。但是enabled设置为true时，索引会比较大，这时可以通过Compress进行压缩和inclueds、excludes来在字段级别上进行一些限制，自定义哪些字段允许存储。\n \n     (3) properties：这是最重要的步骤，主要针对索引结构和字段级别上的一些设置。\n3.咱们通常在elasticsearch中 post mapping信息，每重新创建索引便到设置mapping，分片，副本信息。非常繁琐。强烈建议大家通过设置template方式设置索引信息。设置索引名，通过正则匹配的方式匹配到相应的模板。ps:直接修改mapping的优先级>索引template。索引匹配了多个template，当属性等配置出现不一致的，以order的最大值为准，order默认值为0\n## 二，创建模板\n例如：\n \n```java\n{\n  \"template\": \"pmall*\",\n  \"settings\": {\n    \"index.number_of_shards\": 1,\n    \"number_of_replicas\": 4,\n    \"similarity\": {\n      \"IgnoreTFSimilarity\": {\n        \"type\": \"IgoreTFSimilarity\"\n      }\n    }\n  },\n  \"mappings\": {\n    \"_default_\": {\n      \"_source\": {\n        \"enabled\": false\n      }\n    },\n    \"commodity\": {\n      \"properties\": {\n        \"sold\": {\n          \"type\": \"long\"\n        },\n        \"online_time\": {\n          \"type\": \"long\"\n        },\n        \"price\": {\n          \"type\": \"long\"\n        },\n        \"publish_time\": {\n          \"type\": \"long\"\n        },\n        \"id\": {\n          \"type\": \"long\"\n        },\n        \"catecode\": {\n          \"type\": \"integer\"\n        },\n        \"title\": {\n          \"search_analyzer\": \"ikSmart\",\n          \"similarity\": \"IgnoreTFSimilarity\",\n          \"analyzer\": \"ik\",\n          \"type\": \"text\"\n        },\n        \"content\": {\n          \"index\": false,\n          \"store\": true,\n          \"type\": \"keyword\"\n        },\n        \"status\": {\n          \"type\": \"integer\"\n        }\n      }\n    }\n  }\n}\n```\n\n \n\n## 三，删除模板\n\n```java\n\nDELETE /_template/template_1\n```\n\n\n\n\n## 四，查看模板：\n \n```java\nGET /_template/template_1\n```\n\n\n也可以通过模糊匹配得到多个模板信息\n```java\nGET /_template/temp* \n```\n\n\n可以批量查看模板\n```java\nGET /_template/template_1,template_2\n```\n\n\n验证模板是否存在：\n \n```java\nHEAD _template/template_1\n```\n\n\n## 五：多个模板同时匹配，以order顺序倒排，order越大，优先级越高\n \n```java\n\n \nPUT /_template/template_1\n{\n    \"template\" : \"*\",\n    \"order\" : 0,\n    \"settings\" : {\n        \"number_of_shards\" : 1\n    },\n    \"mappings\" : {\n        \"type1\" : {\n            \"_source\" : { \"enabled\" : false }\n        }\n    }\n}\n\nPUT /_template/template_2\n{\n    \"template\" : \"te*\",\n    \"order\" : 1,\n    \"settings\" : {\n        \"number_of_shards\" : 1\n    },\n    \"mappings\" : {\n        \"type1\" : {\n            \"_source\" : { \"enabled\" : true }\n        }\n    }\n}\n```\n\n\n \n## 六，模板版本号\n \n模板可以选择添加版本号，这可以是任何整数值，以便简化外部系统的模板管理。版本字段是完全可选的，它仅用于模板的外部管理。要取消设置版本，只需替换模板即可\n\n \n创建模板：\n\n```java\nPUT /_template/template_1\n{\n    \"template\" : \"*\",\n    \"order\" : 0,\n    \"settings\" : {\n        \"number_of_shards\" : 1\n    },\n    \"version\": 123\n}\n```\n\n\n查看模板版本号：\n\n```java\nGET /_template/template_1?filter_path=*.version\n```\n\n\n\n响应如下：\n\n```java\n{\n  \"template_1\" : {\n    \"version\" : 123\n  }\n}\n```\n\n\n## 七，参考：\n[url=https://www.elastic.co/guide/en/elasticsearch/reference/5.4/indices-templates.html]indices-templates[/url]","slug":"ElasticSearch之索引模板","published":1,"date":"2020-03-06T09:26:22.429Z","updated":"2020-03-22T07:40:21.682Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck82rwplc0000g52wfv8ravyj","content":"<html><head></head><body><h2 id=\"一，模板简述\"><a href=\"#一，模板简述\" class=\"headerlink\" title=\"一，模板简述\"></a>一，模板简述</h2><p>template大致分成setting和mappings两部分：<br>索引可使用预定义的模板进行创建,这个模板称作Index templates。模板设置包括settings和mappings，通过模式匹配的方式使得多个索引重用一个模板。 </p>\n<ol>\n<li><p>settings主要作用于index的一些相关配置信息，如分片数、副本数，tranlog同步条件、refresh等。</p>\n</li>\n<li><p>mappings主要是一些说明信息，大致又分为_all、_source、prpperties这三部分：</p>\n<p>  (1) _all：主要指的是AllField字段，我们可以将一个或多个都包含进来，在进行检索时无需指定字段的情况下检索多个字段。设置“_all” : {“enabled” : true}</p>\n<p>  (2) _source：主要指的是SourceField字段，Source可以理解为ES除了将数据保存在索引文件中，另外还有一份源数据。_source字段在我们进行检索时相当重要，如果在{“enabled” : false}情况下默认检索只会返回ID， 你需要通过Fields字段去到索引中去取数据，效率不是很高。但是enabled设置为true时，索引会比较大，这时可以通过Compress进行压缩和inclueds、excludes来在字段级别上进行一些限制，自定义哪些字段允许存储。</p>\n<p>  (3) properties：这是最重要的步骤，主要针对索引结构和字段级别上的一些设置。</p>\n</li>\n<li><p>咱们通常在elasticsearch中 post mapping信息，每重新创建索引便到设置mapping，分片，副本信息。非常繁琐。强烈建议大家通过设置template方式设置索引信息。设置索引名，通过正则匹配的方式匹配到相应的模板。ps:直接修改mapping的优先级>索引template。索引匹配了多个template，当属性等配置出现不一致的，以order的最大值为准，order默认值为0</p>\n<h2 id=\"二，创建模板\"><a href=\"#二，创建模板\" class=\"headerlink\" title=\"二，创建模板\"></a>二，创建模板</h2><p>例如：</p>\n</li>\n</ol>\n<figure class=\"highlight java hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"hljs-string\">\"template\"</span>: <span class=\"hljs-string\">\"pmall*\"</span>,</span><br><span class=\"line\">  <span class=\"hljs-string\">\"settings\"</span>: {</span><br><span class=\"line\">    <span class=\"hljs-string\">\"index.number_of_shards\"</span>: <span class=\"hljs-number\">1</span>,</span><br><span class=\"line\">    <span class=\"hljs-string\">\"number_of_replicas\"</span>: <span class=\"hljs-number\">4</span>,</span><br><span class=\"line\">    <span class=\"hljs-string\">\"similarity\"</span>: {</span><br><span class=\"line\">      <span class=\"hljs-string\">\"IgnoreTFSimilarity\"</span>: {</span><br><span class=\"line\">        <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"IgoreTFSimilarity\"</span></span><br><span class=\"line\">      }</span><br><span class=\"line\">    }</span><br><span class=\"line\">  },</span><br><span class=\"line\">  <span class=\"hljs-string\">\"mappings\"</span>: {</span><br><span class=\"line\">    <span class=\"hljs-string\">\"_default_\"</span>: {</span><br><span class=\"line\">      <span class=\"hljs-string\">\"_source\"</span>: {</span><br><span class=\"line\">        <span class=\"hljs-string\">\"enabled\"</span>: <span class=\"hljs-keyword\">false</span></span><br><span class=\"line\">      }</span><br><span class=\"line\">    },</span><br><span class=\"line\">    <span class=\"hljs-string\">\"commodity\"</span>: {</span><br><span class=\"line\">      <span class=\"hljs-string\">\"properties\"</span>: {</span><br><span class=\"line\">        <span class=\"hljs-string\">\"sold\"</span>: {</span><br><span class=\"line\">          <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"long\"</span></span><br><span class=\"line\">        },</span><br><span class=\"line\">        <span class=\"hljs-string\">\"online_time\"</span>: {</span><br><span class=\"line\">          <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"long\"</span></span><br><span class=\"line\">        },</span><br><span class=\"line\">        <span class=\"hljs-string\">\"price\"</span>: {</span><br><span class=\"line\">          <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"long\"</span></span><br><span class=\"line\">        },</span><br><span class=\"line\">        <span class=\"hljs-string\">\"publish_time\"</span>: {</span><br><span class=\"line\">          <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"long\"</span></span><br><span class=\"line\">        },</span><br><span class=\"line\">        <span class=\"hljs-string\">\"id\"</span>: {</span><br><span class=\"line\">          <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"long\"</span></span><br><span class=\"line\">        },</span><br><span class=\"line\">        <span class=\"hljs-string\">\"catecode\"</span>: {</span><br><span class=\"line\">          <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"integer\"</span></span><br><span class=\"line\">        },</span><br><span class=\"line\">        <span class=\"hljs-string\">\"title\"</span>: {</span><br><span class=\"line\">          <span class=\"hljs-string\">\"search_analyzer\"</span>: <span class=\"hljs-string\">\"ikSmart\"</span>,</span><br><span class=\"line\">          <span class=\"hljs-string\">\"similarity\"</span>: <span class=\"hljs-string\">\"IgnoreTFSimilarity\"</span>,</span><br><span class=\"line\">          <span class=\"hljs-string\">\"analyzer\"</span>: <span class=\"hljs-string\">\"ik\"</span>,</span><br><span class=\"line\">          <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"text\"</span></span><br><span class=\"line\">        },</span><br><span class=\"line\">        <span class=\"hljs-string\">\"content\"</span>: {</span><br><span class=\"line\">          <span class=\"hljs-string\">\"index\"</span>: <span class=\"hljs-keyword\">false</span>,</span><br><span class=\"line\">          <span class=\"hljs-string\">\"store\"</span>: <span class=\"hljs-keyword\">true</span>,</span><br><span class=\"line\">          <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"keyword\"</span></span><br><span class=\"line\">        },</span><br><span class=\"line\">        <span class=\"hljs-string\">\"status\"</span>: {</span><br><span class=\"line\">          <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"integer\"</span></span><br><span class=\"line\">        }</span><br><span class=\"line\">      }</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n\n\n<h2 id=\"三，删除模板\"><a href=\"#三，删除模板\" class=\"headerlink\" title=\"三，删除模板\"></a>三，删除模板</h2><figure class=\"highlight java hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">DELETE /_template/template_1</span><br></pre></td></tr></tbody></table></figure>\n\n\n\n\n<h2 id=\"四，查看模板：\"><a href=\"#四，查看模板：\" class=\"headerlink\" title=\"四，查看模板：\"></a>四，查看模板：</h2><figure class=\"highlight java hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /_template/template_1</span><br></pre></td></tr></tbody></table></figure>\n\n\n<p>也可以通过模糊匹配得到多个模板信息</p>\n<figure class=\"highlight java hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /_template/temp*</span><br></pre></td></tr></tbody></table></figure>\n\n\n<p>可以批量查看模板</p>\n<figure class=\"highlight java hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /_template/template_1,template_2</span><br></pre></td></tr></tbody></table></figure>\n\n\n<p>验证模板是否存在：</p>\n<figure class=\"highlight java hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HEAD _template/template_1</span><br></pre></td></tr></tbody></table></figure>\n\n\n<h2 id=\"五：多个模板同时匹配，以order顺序倒排，order越大，优先级越高\"><a href=\"#五：多个模板同时匹配，以order顺序倒排，order越大，优先级越高\" class=\"headerlink\" title=\"五：多个模板同时匹配，以order顺序倒排，order越大，优先级越高\"></a>五：多个模板同时匹配，以order顺序倒排，order越大，优先级越高</h2><figure class=\"highlight java hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\">PUT /_template/template_1</span><br><span class=\"line\">{</span><br><span class=\"line\">    <span class=\"hljs-string\">\"template\"</span> : <span class=\"hljs-string\">\"*\"</span>,</span><br><span class=\"line\">    <span class=\"hljs-string\">\"order\"</span> : <span class=\"hljs-number\">0</span>,</span><br><span class=\"line\">    <span class=\"hljs-string\">\"settings\"</span> : {</span><br><span class=\"line\">        <span class=\"hljs-string\">\"number_of_shards\"</span> : <span class=\"hljs-number\">1</span></span><br><span class=\"line\">    },</span><br><span class=\"line\">    <span class=\"hljs-string\">\"mappings\"</span> : {</span><br><span class=\"line\">        <span class=\"hljs-string\">\"type1\"</span> : {</span><br><span class=\"line\">            <span class=\"hljs-string\">\"_source\"</span> : { <span class=\"hljs-string\">\"enabled\"</span> : <span class=\"hljs-keyword\">false</span> }</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">PUT /_template/template_2</span><br><span class=\"line\">{</span><br><span class=\"line\">    <span class=\"hljs-string\">\"template\"</span> : <span class=\"hljs-string\">\"te*\"</span>,</span><br><span class=\"line\">    <span class=\"hljs-string\">\"order\"</span> : <span class=\"hljs-number\">1</span>,</span><br><span class=\"line\">    <span class=\"hljs-string\">\"settings\"</span> : {</span><br><span class=\"line\">        <span class=\"hljs-string\">\"number_of_shards\"</span> : <span class=\"hljs-number\">1</span></span><br><span class=\"line\">    },</span><br><span class=\"line\">    <span class=\"hljs-string\">\"mappings\"</span> : {</span><br><span class=\"line\">        <span class=\"hljs-string\">\"type1\"</span> : {</span><br><span class=\"line\">            <span class=\"hljs-string\">\"_source\"</span> : { <span class=\"hljs-string\">\"enabled\"</span> : <span class=\"hljs-keyword\">true</span> }</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n\n\n<h2 id=\"六，模板版本号\"><a href=\"#六，模板版本号\" class=\"headerlink\" title=\"六，模板版本号\"></a>六，模板版本号</h2><p>模板可以选择添加版本号，这可以是任何整数值，以便简化外部系统的模板管理。版本字段是完全可选的，它仅用于模板的外部管理。要取消设置版本，只需替换模板即可</p>\n<p>创建模板：</p>\n<figure class=\"highlight java hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT /_template/template_1</span><br><span class=\"line\">{</span><br><span class=\"line\">    <span class=\"hljs-string\">\"template\"</span> : <span class=\"hljs-string\">\"*\"</span>,</span><br><span class=\"line\">    <span class=\"hljs-string\">\"order\"</span> : <span class=\"hljs-number\">0</span>,</span><br><span class=\"line\">    <span class=\"hljs-string\">\"settings\"</span> : {</span><br><span class=\"line\">        <span class=\"hljs-string\">\"number_of_shards\"</span> : <span class=\"hljs-number\">1</span></span><br><span class=\"line\">    },</span><br><span class=\"line\">    <span class=\"hljs-string\">\"version\"</span>: <span class=\"hljs-number\">123</span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n\n<p>查看模板版本号：</p>\n<figure class=\"highlight java hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /_template/template_1?filter_path=*.version</span><br></pre></td></tr></tbody></table></figure>\n\n\n\n<p>响应如下：</p>\n<figure class=\"highlight java hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"hljs-string\">\"template_1\"</span> : {</span><br><span class=\"line\">    <span class=\"hljs-string\">\"version\"</span> : <span class=\"hljs-number\">123</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n\n<h2 id=\"七，参考：\"><a href=\"#七，参考：\" class=\"headerlink\" title=\"七，参考：\"></a>七，参考：</h2><p>[url=<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/5.4/indices-templates.html]indices-templates[/url]\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/en/elasticsearch/reference/5.4/indices-templates.html]indices-templates[/url]</a></p>\n</body></html>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一，模板简述\"><a href=\"#一，模板简述\" class=\"headerlink\" title=\"一，模板简述\"></a>一，模板简述</h2><p>template大致分成setting和mappings两部分：<br>索引可使用预定义的模板进行创建,这个模板称作Index templates。模板设置包括settings和mappings，通过模式匹配的方式使得多个索引重用一个模板。 </p>\n<ol>\n<li><p>settings主要作用于index的一些相关配置信息，如分片数、副本数，tranlog同步条件、refresh等。</p>\n</li>\n<li><p>mappings主要是一些说明信息，大致又分为_all、_source、prpperties这三部分：</p>\n<p>  (1) _all：主要指的是AllField字段，我们可以将一个或多个都包含进来，在进行检索时无需指定字段的情况下检索多个字段。设置“_all” : {“enabled” : true}</p>\n<p>  (2) _source：主要指的是SourceField字段，Source可以理解为ES除了将数据保存在索引文件中，另外还有一份源数据。_source字段在我们进行检索时相当重要，如果在{“enabled” : false}情况下默认检索只会返回ID， 你需要通过Fields字段去到索引中去取数据，效率不是很高。但是enabled设置为true时，索引会比较大，这时可以通过Compress进行压缩和inclueds、excludes来在字段级别上进行一些限制，自定义哪些字段允许存储。</p>\n<p>  (3) properties：这是最重要的步骤，主要针对索引结构和字段级别上的一些设置。</p>\n</li>\n<li><p>咱们通常在elasticsearch中 post mapping信息，每重新创建索引便到设置mapping，分片，副本信息。非常繁琐。强烈建议大家通过设置template方式设置索引信息。设置索引名，通过正则匹配的方式匹配到相应的模板。ps:直接修改mapping的优先级&gt;索引template。索引匹配了多个template，当属性等配置出现不一致的，以order的最大值为准，order默认值为0</p>\n<h2 id=\"二，创建模板\"><a href=\"#二，创建模板\" class=\"headerlink\" title=\"二，创建模板\"></a>二，创建模板</h2><p>例如：</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"template\"</span>: <span class=\"string\">\"pmall*\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"settings\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"index.number_of_shards\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"string\">\"number_of_replicas\"</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">    <span class=\"string\">\"similarity\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"IgnoreTFSimilarity\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"type\"</span>: <span class=\"string\">\"IgoreTFSimilarity\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"mappings\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"_default_\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"_source\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"enabled\"</span>: <span class=\"keyword\">false</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"commodity\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"properties\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"sold\"</span>: &#123;</span><br><span class=\"line\">          <span class=\"string\">\"type\"</span>: <span class=\"string\">\"long\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">\"online_time\"</span>: &#123;</span><br><span class=\"line\">          <span class=\"string\">\"type\"</span>: <span class=\"string\">\"long\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">\"price\"</span>: &#123;</span><br><span class=\"line\">          <span class=\"string\">\"type\"</span>: <span class=\"string\">\"long\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">\"publish_time\"</span>: &#123;</span><br><span class=\"line\">          <span class=\"string\">\"type\"</span>: <span class=\"string\">\"long\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">\"id\"</span>: &#123;</span><br><span class=\"line\">          <span class=\"string\">\"type\"</span>: <span class=\"string\">\"long\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">\"catecode\"</span>: &#123;</span><br><span class=\"line\">          <span class=\"string\">\"type\"</span>: <span class=\"string\">\"integer\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">\"title\"</span>: &#123;</span><br><span class=\"line\">          <span class=\"string\">\"search_analyzer\"</span>: <span class=\"string\">\"ikSmart\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"similarity\"</span>: <span class=\"string\">\"IgnoreTFSimilarity\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"analyzer\"</span>: <span class=\"string\">\"ik\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"type\"</span>: <span class=\"string\">\"text\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">\"content\"</span>: &#123;</span><br><span class=\"line\">          <span class=\"string\">\"index\"</span>: <span class=\"keyword\">false</span>,</span><br><span class=\"line\">          <span class=\"string\">\"store\"</span>: <span class=\"keyword\">true</span>,</span><br><span class=\"line\">          <span class=\"string\">\"type\"</span>: <span class=\"string\">\"keyword\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">\"status\"</span>: &#123;</span><br><span class=\"line\">          <span class=\"string\">\"type\"</span>: <span class=\"string\">\"integer\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"三，删除模板\"><a href=\"#三，删除模板\" class=\"headerlink\" title=\"三，删除模板\"></a>三，删除模板</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">DELETE /_template/template_1</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h2 id=\"四，查看模板：\"><a href=\"#四，查看模板：\" class=\"headerlink\" title=\"四，查看模板：\"></a>四，查看模板：</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /_template/template_1</span><br></pre></td></tr></table></figure>\n\n\n<p>也可以通过模糊匹配得到多个模板信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /_template/temp*</span><br></pre></td></tr></table></figure>\n\n\n<p>可以批量查看模板</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /_template/template_1,template_2</span><br></pre></td></tr></table></figure>\n\n\n<p>验证模板是否存在：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HEAD _template/template_1</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"五：多个模板同时匹配，以order顺序倒排，order越大，优先级越高\"><a href=\"#五：多个模板同时匹配，以order顺序倒排，order越大，优先级越高\" class=\"headerlink\" title=\"五：多个模板同时匹配，以order顺序倒排，order越大，优先级越高\"></a>五：多个模板同时匹配，以order顺序倒排，order越大，优先级越高</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\">PUT /_template/template_1</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"template\"</span> : <span class=\"string\">\"*\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"order\"</span> : <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">\"settings\"</span> : &#123;</span><br><span class=\"line\">        <span class=\"string\">\"number_of_shards\"</span> : <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"mappings\"</span> : &#123;</span><br><span class=\"line\">        <span class=\"string\">\"type1\"</span> : &#123;</span><br><span class=\"line\">            <span class=\"string\">\"_source\"</span> : &#123; <span class=\"string\">\"enabled\"</span> : <span class=\"keyword\">false</span> &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">PUT /_template/template_2</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"template\"</span> : <span class=\"string\">\"te*\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"order\"</span> : <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"string\">\"settings\"</span> : &#123;</span><br><span class=\"line\">        <span class=\"string\">\"number_of_shards\"</span> : <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"mappings\"</span> : &#123;</span><br><span class=\"line\">        <span class=\"string\">\"type1\"</span> : &#123;</span><br><span class=\"line\">            <span class=\"string\">\"_source\"</span> : &#123; <span class=\"string\">\"enabled\"</span> : <span class=\"keyword\">true</span> &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"六，模板版本号\"><a href=\"#六，模板版本号\" class=\"headerlink\" title=\"六，模板版本号\"></a>六，模板版本号</h2><p>模板可以选择添加版本号，这可以是任何整数值，以便简化外部系统的模板管理。版本字段是完全可选的，它仅用于模板的外部管理。要取消设置版本，只需替换模板即可</p>\n<p>创建模板：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT /_template/template_1</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"template\"</span> : <span class=\"string\">\"*\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"order\"</span> : <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">\"settings\"</span> : &#123;</span><br><span class=\"line\">        <span class=\"string\">\"number_of_shards\"</span> : <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"version\"</span>: <span class=\"number\">123</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>查看模板版本号：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /_template/template_1?filter_path=*.version</span><br></pre></td></tr></table></figure>\n\n\n\n<p>响应如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"template_1\"</span> : &#123;</span><br><span class=\"line\">    <span class=\"string\">\"version\"</span> : <span class=\"number\">123</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"七，参考：\"><a href=\"#七，参考：\" class=\"headerlink\" title=\"七，参考：\"></a>七，参考：</h2><p>[url=<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/5.4/indices-templates.html]indices-templates[/url]\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/en/elasticsearch/reference/5.4/indices-templates.html]indices-templates[/url]</a></p>\n"},{"title":"Elasticsearch负载高问题排查","toc":true,"thumbnail":"/logo/elasticsearch.jpg","_content":"1. 我们Elasticsearch集群近几日负载飙高，排查思路记录如下；\n\n2. 查看日志信息，确定是否存在异常情况\n\n```java\ncd ${ES_HOME}/logs\ntail -100f ES.log\n```\n\n3. 频繁Full GC往往会引起负载飙高，故查看ES集群GC 情况，\n\n使用命令：\n```java\n jstat -gcutil <pid> <period> <times>\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200320205733385.png)\n近一个多月，服务共Full GC700余次，平均每次Full GC耗时90ms，符合预期，排除Full GC问题导致负载飙高；\n4. 找到ES中占用CPU的线程ID\n\n```java\n  top -Hp PID\n```\n如找到ES进程中2291线程较费CPU\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200320210618219.png)\n\n5. 将得到的线程id，转化为16进制\n\n```java\nprintf %x 2291\n输出结果：8f3\n```\n\n7. 使用jstack分析线程状态\njstack命令主要用于调试java程序运行过程中的线程堆栈信息\n\n```java\njstack PID  >> pid.txt\n```\n8.查看pid.txt文件，分析线程对应的堆栈信息\n由步骤6得到 16进制线程“8f3”\n\n```java\nvim pid.txt\n//查找线程“8f3”对应信息\n```\n内容如下\n\n```java\n\"elasticsearch[data-es12][write][T#3]\" #94 daemon prio=5 os_prio=0 tid=0x00007f3254017800 nid=0x8f3 waiting for monitor entry [0x00007f2d37a7a000]\n   java.lang.Thread.State: BLOCKED (on object monitor)\n        at org.elasticsearch.index.translog.TranslogWriter.syncUpTo(TranslogWriter.java:342)\n        - waiting to lock <0x000000055ff5f220> (a java.lang.Object)\n        at org.elasticsearch.index.translog.Translog.ensureSynced(Translog.java:797)\n        at org.elasticsearch.index.translog.Translog.ensureSynced(Translog.java:818)\n        at org.elasticsearch.index.engine.InternalEngine.ensureTranslogSynced(InternalEngine.java:489)\n        at org.elasticsearch.index.shard.IndexShard$5.write(IndexShard.java:2782)\n        at org.elasticsearch.common.util.concurrent.AsyncIOProcessor.processList(AsyncIOProcessor.java:107)\n        at org.elasticsearch.common.util.concurrent.AsyncIOProcessor.drainAndProcess(AsyncIOProcessor.java:99)\n        at org.elasticsearch.common.util.concurrent.AsyncIOProcessor.put(AsyncIOProcessor.java:82)\n        at org.elasticsearch.index.shard.IndexShard.sync(IndexShard.java:2804)\n        at org.elasticsearch.action.support.replication.TransportWriteAction$AsyncAfterWriteAction.run(TransportWriteAction.java:355)\n        at org.elasticsearch.action.support.replication.TransportWriteAction$WritePrimaryResult.<init>(TransportWriteAction.java:151)\n        at \n```\n\n该线程正处于堵塞状态。\n\n9，原因分析\n从ES索引数据创建机制说起\n写请求首先先写到内存一份数据，然后写translog，默认每1秒进行refresh，将索引写入到文件系统；\n该ES集群是ELK日志查询服务，特点读多写少，我们TB级数据，上千个索引，refresh_interval参数1s，在日志服务中显然不太合适，是时候调整下该参数配置了。\n\n10，参数调整\n\n```java\nhttp://ip:port/logstash*/_settings PUT\n{\n  \"settings\": {\n    \"refresh_interval\": \"5m\"\n  }\n}\n```\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200320212733184.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FjbTM2NQ==,size_16,color_FFFFFF,t_70)\n\n11，问题解决\n","source":"_posts/Elasticsearch负载高问题排查.md","raw":"title: Elasticsearch负载高问题排查\ntoc: true\ncategories: elasticsearch\ntags:\n  - elasticsearch\nthumbnail: /logo/elasticsearch.jpg\n---\n1. 我们Elasticsearch集群近几日负载飙高，排查思路记录如下；\n\n2. 查看日志信息，确定是否存在异常情况\n\n```java\ncd ${ES_HOME}/logs\ntail -100f ES.log\n```\n\n3. 频繁Full GC往往会引起负载飙高，故查看ES集群GC 情况，\n\n使用命令：\n```java\n jstat -gcutil <pid> <period> <times>\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200320205733385.png)\n近一个多月，服务共Full GC700余次，平均每次Full GC耗时90ms，符合预期，排除Full GC问题导致负载飙高；\n4. 找到ES中占用CPU的线程ID\n\n```java\n  top -Hp PID\n```\n如找到ES进程中2291线程较费CPU\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200320210618219.png)\n\n5. 将得到的线程id，转化为16进制\n\n```java\nprintf %x 2291\n输出结果：8f3\n```\n\n7. 使用jstack分析线程状态\njstack命令主要用于调试java程序运行过程中的线程堆栈信息\n\n```java\njstack PID  >> pid.txt\n```\n8.查看pid.txt文件，分析线程对应的堆栈信息\n由步骤6得到 16进制线程“8f3”\n\n```java\nvim pid.txt\n//查找线程“8f3”对应信息\n```\n内容如下\n\n```java\n\"elasticsearch[data-es12][write][T#3]\" #94 daemon prio=5 os_prio=0 tid=0x00007f3254017800 nid=0x8f3 waiting for monitor entry [0x00007f2d37a7a000]\n   java.lang.Thread.State: BLOCKED (on object monitor)\n        at org.elasticsearch.index.translog.TranslogWriter.syncUpTo(TranslogWriter.java:342)\n        - waiting to lock <0x000000055ff5f220> (a java.lang.Object)\n        at org.elasticsearch.index.translog.Translog.ensureSynced(Translog.java:797)\n        at org.elasticsearch.index.translog.Translog.ensureSynced(Translog.java:818)\n        at org.elasticsearch.index.engine.InternalEngine.ensureTranslogSynced(InternalEngine.java:489)\n        at org.elasticsearch.index.shard.IndexShard$5.write(IndexShard.java:2782)\n        at org.elasticsearch.common.util.concurrent.AsyncIOProcessor.processList(AsyncIOProcessor.java:107)\n        at org.elasticsearch.common.util.concurrent.AsyncIOProcessor.drainAndProcess(AsyncIOProcessor.java:99)\n        at org.elasticsearch.common.util.concurrent.AsyncIOProcessor.put(AsyncIOProcessor.java:82)\n        at org.elasticsearch.index.shard.IndexShard.sync(IndexShard.java:2804)\n        at org.elasticsearch.action.support.replication.TransportWriteAction$AsyncAfterWriteAction.run(TransportWriteAction.java:355)\n        at org.elasticsearch.action.support.replication.TransportWriteAction$WritePrimaryResult.<init>(TransportWriteAction.java:151)\n        at \n```\n\n该线程正处于堵塞状态。\n\n9，原因分析\n从ES索引数据创建机制说起\n写请求首先先写到内存一份数据，然后写translog，默认每1秒进行refresh，将索引写入到文件系统；\n该ES集群是ELK日志查询服务，特点读多写少，我们TB级数据，上千个索引，refresh_interval参数1s，在日志服务中显然不太合适，是时候调整下该参数配置了。\n\n10，参数调整\n\n```java\nhttp://ip:port/logstash*/_settings PUT\n{\n  \"settings\": {\n    \"refresh_interval\": \"5m\"\n  }\n}\n```\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200320212733184.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FjbTM2NQ==,size_16,color_FFFFFF,t_70)\n\n11，问题解决\n","slug":"Elasticsearch负载高问题排查","published":1,"date":"2020-03-20T13:35:30.731Z","updated":"2020-03-22T07:40:21.651Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck82rwpma0005g52w7540hqpu","content":"<html><head></head><body><ol>\n<li><p>我们Elasticsearch集群近几日负载飙高，排查思路记录如下；</p>\n</li>\n<li><p>查看日志信息，确定是否存在异常情况</p>\n</li>\n</ol>\n<figure class=\"highlight java hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ${ES_HOME}/logs</span><br><span class=\"line\">tail -<span class=\"hljs-number\">100f</span> ES.log</span><br></pre></td></tr></tbody></table></figure>\n\n<ol start=\"3\">\n<li>频繁Full GC往往会引起负载飙高，故查看ES集群GC 情况，</li>\n</ol>\n<p>使用命令：</p>\n<figure class=\"highlight java hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jstat -gcutil <pid> <period> <times></span><br></pre></td></tr></tbody></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/20200320205733385.png\" alt=\"在这里插入图片描述\"><br>近一个多月，服务共Full GC700余次，平均每次Full GC耗时90ms，符合预期，排除Full GC问题导致负载飙高；<br>4. 找到ES中占用CPU的线程ID</p>\n<figure class=\"highlight java hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top -Hp PID</span><br></pre></td></tr></tbody></table></figure>\n<p>如找到ES进程中2291线程较费CPU<br><img src=\"https://img-blog.csdnimg.cn/20200320210618219.png\" alt=\"在这里插入图片描述\"></p>\n<ol start=\"5\">\n<li>将得到的线程id，转化为16进制</li>\n</ol>\n<figure class=\"highlight java hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printf %x <span class=\"hljs-number\">2291</span></span><br><span class=\"line\">输出结果：<span class=\"hljs-number\">8f</span>3</span><br></pre></td></tr></tbody></table></figure>\n\n<ol start=\"7\">\n<li>使用jstack分析线程状态<br>jstack命令主要用于调试java程序运行过程中的线程堆栈信息</li>\n</ol>\n<figure class=\"highlight java hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jstack PID  >> pid.txt</span><br></pre></td></tr></tbody></table></figure>\n<p>8.查看pid.txt文件，分析线程对应的堆栈信息<br>由步骤6得到 16进制线程“8f3”</p>\n<figure class=\"highlight java hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim pid.txt</span><br><span class=\"line\"><span class=\"hljs-comment\">//查找线程“8f3”对应信息</span></span><br></pre></td></tr></tbody></table></figure>\n<p>内容如下</p>\n<figure class=\"highlight java hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"elasticsearch[data-es12][write][T#3]\" #94 daemon prio=5 os_prio=0 tid=0x00007f3254017800 nid=0x8f3 waiting for monitor entry [0x00007f2d37a7a000]</span><br><span class=\"line\">   java.lang.Thread.State: BLOCKED (on object monitor)</span><br><span class=\"line\">        at org.elasticsearch.index.translog.TranslogWriter.syncUpTo(TranslogWriter.java:<span class=\"hljs-number\">342</span>)</span><br><span class=\"line\">        - waiting to lock <<span class=\"hljs-number\">0x000000055ff5f220</span>> (a java.lang.Object)</span><br><span class=\"line\">        at org.elasticsearch.index.translog.Translog.ensureSynced(Translog.java:<span class=\"hljs-number\">797</span>)</span><br><span class=\"line\">        at org.elasticsearch.index.translog.Translog.ensureSynced(Translog.java:<span class=\"hljs-number\">818</span>)</span><br><span class=\"line\">        at org.elasticsearch.index.engine.InternalEngine.ensureTranslogSynced(InternalEngine.java:<span class=\"hljs-number\">489</span>)</span><br><span class=\"line\">        at org.elasticsearch.index.shard.IndexShard$<span class=\"hljs-number\">5</span>.write(IndexShard.java:<span class=\"hljs-number\">2782</span>)</span><br><span class=\"line\">        at org.elasticsearch.common.util.concurrent.AsyncIOProcessor.processList(AsyncIOProcessor.java:<span class=\"hljs-number\">107</span>)</span><br><span class=\"line\">        at org.elasticsearch.common.util.concurrent.AsyncIOProcessor.drainAndProcess(AsyncIOProcessor.java:<span class=\"hljs-number\">99</span>)</span><br><span class=\"line\">        at org.elasticsearch.common.util.concurrent.AsyncIOProcessor.put(AsyncIOProcessor.java:<span class=\"hljs-number\">82</span>)</span><br><span class=\"line\">        at org.elasticsearch.index.shard.IndexShard.sync(IndexShard.java:<span class=\"hljs-number\">2804</span>)</span><br><span class=\"line\">        at org.elasticsearch.action.support.replication.TransportWriteAction$AsyncAfterWriteAction.run(TransportWriteAction.java:<span class=\"hljs-number\">355</span>)</span><br><span class=\"line\">        at org.elasticsearch.action.support.replication.TransportWriteAction$WritePrimaryResult.<init>(TransportWriteAction.java:<span class=\"hljs-number\">151</span>)</span><br><span class=\"line\">        at</span><br></pre></td></tr></tbody></table></figure>\n\n<p>该线程正处于堵塞状态。</p>\n<p>9，原因分析<br>从ES索引数据创建机制说起<br>写请求首先先写到内存一份数据，然后写translog，默认每1秒进行refresh，将索引写入到文件系统；<br>该ES集群是ELK日志查询服务，特点读多写少，我们TB级数据，上千个索引，refresh_interval参数1s，在日志服务中显然不太合适，是时候调整下该参数配置了。</p>\n<p>10，参数调整</p>\n<figure class=\"highlight java hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"hljs-comment\">//ip:port/logstash*/_settings PUT</span></span><br><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"hljs-string\">\"settings\"</span>: {</span><br><span class=\"line\">    <span class=\"hljs-string\">\"refresh_interval\"</span>: <span class=\"hljs-string\">\"5m\"</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20200320212733184.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FjbTM2NQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>11，问题解决</p>\n</body></html>","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>我们Elasticsearch集群近几日负载飙高，排查思路记录如下；</p>\n</li>\n<li><p>查看日志信息，确定是否存在异常情况</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd $&#123;ES_HOME&#125;/logs</span><br><span class=\"line\">tail -<span class=\"number\">100f</span> ES.log</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>频繁Full GC往往会引起负载飙高，故查看ES集群GC 情况，</li>\n</ol>\n<p>使用命令：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jstat -gcutil &lt;pid&gt; &lt;period&gt; &lt;times&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/20200320205733385.png\" alt=\"在这里插入图片描述\"><br>近一个多月，服务共Full GC700余次，平均每次Full GC耗时90ms，符合预期，排除Full GC问题导致负载飙高；<br>4. 找到ES中占用CPU的线程ID</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top -Hp PID</span><br></pre></td></tr></table></figure>\n<p>如找到ES进程中2291线程较费CPU<br><img src=\"https://img-blog.csdnimg.cn/20200320210618219.png\" alt=\"在这里插入图片描述\"></p>\n<ol start=\"5\">\n<li>将得到的线程id，转化为16进制</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printf %x <span class=\"number\">2291</span></span><br><span class=\"line\">输出结果：<span class=\"number\">8f</span>3</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>使用jstack分析线程状态<br>jstack命令主要用于调试java程序运行过程中的线程堆栈信息</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jstack PID  &gt;&gt; pid.txt</span><br></pre></td></tr></table></figure>\n<p>8.查看pid.txt文件，分析线程对应的堆栈信息<br>由步骤6得到 16进制线程“8f3”</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim pid.txt</span><br><span class=\"line\"><span class=\"comment\">//查找线程“8f3”对应信息</span></span><br></pre></td></tr></table></figure>\n<p>内容如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"elasticsearch[data-es12][write][T#3]\" #94 daemon prio=5 os_prio=0 tid=0x00007f3254017800 nid=0x8f3 waiting for monitor entry [0x00007f2d37a7a000]</span><br><span class=\"line\">   java.lang.Thread.State: BLOCKED (on object monitor)</span><br><span class=\"line\">        at org.elasticsearch.index.translog.TranslogWriter.syncUpTo(TranslogWriter.java:<span class=\"number\">342</span>)</span><br><span class=\"line\">        - waiting to lock &lt;<span class=\"number\">0x000000055ff5f220</span>&gt; (a java.lang.Object)</span><br><span class=\"line\">        at org.elasticsearch.index.translog.Translog.ensureSynced(Translog.java:<span class=\"number\">797</span>)</span><br><span class=\"line\">        at org.elasticsearch.index.translog.Translog.ensureSynced(Translog.java:<span class=\"number\">818</span>)</span><br><span class=\"line\">        at org.elasticsearch.index.engine.InternalEngine.ensureTranslogSynced(InternalEngine.java:<span class=\"number\">489</span>)</span><br><span class=\"line\">        at org.elasticsearch.index.shard.IndexShard$<span class=\"number\">5</span>.write(IndexShard.java:<span class=\"number\">2782</span>)</span><br><span class=\"line\">        at org.elasticsearch.common.util.concurrent.AsyncIOProcessor.processList(AsyncIOProcessor.java:<span class=\"number\">107</span>)</span><br><span class=\"line\">        at org.elasticsearch.common.util.concurrent.AsyncIOProcessor.drainAndProcess(AsyncIOProcessor.java:<span class=\"number\">99</span>)</span><br><span class=\"line\">        at org.elasticsearch.common.util.concurrent.AsyncIOProcessor.put(AsyncIOProcessor.java:<span class=\"number\">82</span>)</span><br><span class=\"line\">        at org.elasticsearch.index.shard.IndexShard.sync(IndexShard.java:<span class=\"number\">2804</span>)</span><br><span class=\"line\">        at org.elasticsearch.action.support.replication.TransportWriteAction$AsyncAfterWriteAction.run(TransportWriteAction.java:<span class=\"number\">355</span>)</span><br><span class=\"line\">        at org.elasticsearch.action.support.replication.TransportWriteAction$WritePrimaryResult.&lt;init&gt;(TransportWriteAction.java:<span class=\"number\">151</span>)</span><br><span class=\"line\">        at</span><br></pre></td></tr></table></figure>\n\n<p>该线程正处于堵塞状态。</p>\n<p>9，原因分析<br>从ES索引数据创建机制说起<br>写请求首先先写到内存一份数据，然后写translog，默认每1秒进行refresh，将索引写入到文件系统；<br>该ES集群是ELK日志查询服务，特点读多写少，我们TB级数据，上千个索引，refresh_interval参数1s，在日志服务中显然不太合适，是时候调整下该参数配置了。</p>\n<p>10，参数调整</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//ip:port/logstash*/_settings PUT</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"settings\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"refresh_interval\"</span>: <span class=\"string\">\"5m\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20200320212733184.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FjbTM2NQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>11，问题解决</p>\n"},{"title":"Elasticsearch 搜索模块之preference参数","toc":true,"thumbnail":"/logo/elasticsearch.jpg","_content":"##一，preference简述\n\nelasticsearch可以使用preference参数来指定分片查询的优先级，即我们可以通过该参数来控制搜索时的索引数据分片。\n\n如不设置该参数：在所有有效的主分片以及副本间轮询。\n\n具体可看下：OperationRouting.java类\n```java\npublic ShardIterator activeInitializingShardsRandomIt() {\n    return activeInitializingShardsIt(shuffler.nextSeed());\n}  \n```\n\n自增，以实现shard间轮询操作\n```java\npublic int nextSeed() {\n    return seed.getAndIncrement();\n }\n``` \n\n```java\npublic ShardIterator activeInitializingShardsIt(int seed) {\n    if (allInitializingShards.isEmpty()) {\n        return new PlainShardIterator(shardId, shuffler.shuffle(activeShards, seed));\n    }\n    ArrayList<ShardRouting> ordered = new ArrayList<>(activeShards.size() + allInitializingShards.size());\n    ordered.addAll(shuffler.shuffle(activeShards, seed));\n    ordered.addAll(allInitializingShards);\n    return new PlainShardIterator(shardId, ordered);\n}\n```\n\n```java\nprivate ShardIterator preferenceActiveShardIterator(IndexShardRoutingTable indexShard, String localNodeId, DiscoveryNodes nodes, @Nullable String preference) {\n        if (preference == null || preference.isEmpty()) {\n            if (awarenessAttributes.length == 0) {\n                return indexShard.activeInitializingShardsRandomIt();\n            } else {\n                return indexShard.preferAttributesActiveInitializingShardsIt(awarenessAttributes, nodes);\n            }\n        }\n        if (preference.charAt(0) == '_') {\n            Preference preferenceType = Preference.parse(preference);\n            if (preferenceType == Preference.SHARDS) {\n                // starts with _shards, so execute on specific ones\n                int index = preference.indexOf('|');\n\n                String shards;\n                if (index == -1) {\n                    shards = preference.substring(Preference.SHARDS.type().length() + 1);\n                } else {\n                    shards = preference.substring(Preference.SHARDS.type().length() + 1, index);\n                }\n                String ids = Strings.splitStringByCommaToArray(shards);\n                boolean found = false;\n                for (String id : ids) {\n                    if (Integer.parseInt(id) == indexShard.shardId().id()) {\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    return null;\n                }\n                // no more preference\n                if (index == -1 || index == preference.length() - 1) {\n                    if (awarenessAttributes.length == 0) {\n                        return indexShard.activeInitializingShardsRandomIt();\n                    } else {\n                        return indexShard.preferAttributesActiveInitializingShardsIt(awarenessAttributes, nodes);\n                    }\n                } else {\n                    // update the preference and continue\n                    preference = preference.substring(index + 1);\n                }\n            }\n            preferenceType = Preference.parse(preference);\n            switch (preferenceType) {\n                case PREFER_NODES:\n                    final Set<String> nodesIds =\n                            Arrays.stream(\n                                    preference.substring(Preference.PREFER_NODES.type().length() + 1).split(\",\")\n                            ).collect(Collectors.toSet());\n                    return indexShard.preferNodeActiveInitializingShardsIt(nodesIds);\n                case LOCAL:\n                    return indexShard.preferNodeActiveInitializingShardsIt(Collections.singleton(localNodeId));\n                case PRIMARY:\n                    return indexShard.primaryActiveInitializingShardIt();\n                case REPLICA:\n                    return indexShard.replicaActiveInitializingShardIt();\n                case PRIMARY_FIRST:\n                    return indexShard.primaryFirstActiveInitializingShardsIt();\n                case REPLICA_FIRST:\n                    return indexShard.replicaFirstActiveInitializingShardsIt();\n                case ONLY_LOCAL:\n                    return indexShard.onlyNodeActiveInitializingShardsIt(localNodeId);\n                case ONLY_NODES:\n                    String nodeAttributes = preference.substring(Preference.ONLY_NODES.type().length() + 1);\n                    return indexShard.onlyNodeSelectorActiveInitializingShardsIt(nodeAttributes.split(\",\"), nodes);\n                default:\n                    throw new IllegalArgumentException(\"unknown preference [\" + preferenceType + \"]\");\n            }\n        }\n        // if not, then use it as the index\n        if (awarenessAttributes.length == 0) {\n            return indexShard.activeInitializingShardsIt(Murmur3HashFunction.hash(preference));\n        } else {\n            return indexShard.preferAttributesActiveInitializingShardsIt(awarenessAttributes, nodes, Murmur3HashFunction.hash(preference));\n        }\n    }\n``` \n\n二，结果震荡问题（Bouncing Results）\n \n搜索同一query，结果ES返回的顺序却不尽相同，这就是请求轮询到不同分片，而未设置排序条件，相同相关性评分情况下，是按照所在segment中​lucene id来排序的，相同数据的不同备份之间该id是不能保证一致的，故造成结果震荡问题。\n如设置该参数，则有一下9种情况\n\n`_primary`:发送到集群的相关操作请求只会在主分片上执行。\n`_primary_first`:指查询会先在主分片中查询，如果主分片找不到（挂了），就会在副本中查询。 \n`_replica`:发送到集群的相关操作请求只会在副本上执行。\n`_replica_first`：指查询会先在副本中查询，如果副本找不到（挂了），就会在主分片中查询。\n`_local`: 指查询操作会优先在本地节点有的分片中查询，没有的话再在其它节点查询。\n`_prefer_nodes:abc,xyz`:在提供的节点上优先执行（在这种情况下为'abc'或'xyz'）\n`_shards:2,3`：限制操作到指定的分片。 （`2`和“3”）。这个偏好可以与其他偏好组合，但必须首先出现：`_shards：2,3 | _primary`\n`_only_nodes:node1,node2`:指在指定id的节点里面进行查询，如果该节点只有要查询索引的部分分片，就只在这部分分片中查找，不同节点之间用“，”分隔。\n\ncustom(自定义)：注意自定义的preference参数不能以下划线\"_\"开头。\n当preference为自定义时，即该参数不为空，且开头不以“下划线”开头时，特别注意：如果以用户query作为自定义preference时，一定要处理以下划线开头的情况，这种情况下如果不属于以上8种情况，则会抛出异常。\n\n\n\n三，参考：\n\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-preference.html","source":"_posts/Elasticsearch 搜索模块之preference参数.md","raw":"title: Elasticsearch 搜索模块之preference参数\ntoc: true\ncategories: elasticsearch\ntags:\n  - elasticsearch\nthumbnail: /logo/elasticsearch.jpg\n---\n##一，preference简述\n\nelasticsearch可以使用preference参数来指定分片查询的优先级，即我们可以通过该参数来控制搜索时的索引数据分片。\n\n如不设置该参数：在所有有效的主分片以及副本间轮询。\n\n具体可看下：OperationRouting.java类\n```java\npublic ShardIterator activeInitializingShardsRandomIt() {\n    return activeInitializingShardsIt(shuffler.nextSeed());\n}  \n```\n\n自增，以实现shard间轮询操作\n```java\npublic int nextSeed() {\n    return seed.getAndIncrement();\n }\n``` \n\n```java\npublic ShardIterator activeInitializingShardsIt(int seed) {\n    if (allInitializingShards.isEmpty()) {\n        return new PlainShardIterator(shardId, shuffler.shuffle(activeShards, seed));\n    }\n    ArrayList<ShardRouting> ordered = new ArrayList<>(activeShards.size() + allInitializingShards.size());\n    ordered.addAll(shuffler.shuffle(activeShards, seed));\n    ordered.addAll(allInitializingShards);\n    return new PlainShardIterator(shardId, ordered);\n}\n```\n\n```java\nprivate ShardIterator preferenceActiveShardIterator(IndexShardRoutingTable indexShard, String localNodeId, DiscoveryNodes nodes, @Nullable String preference) {\n        if (preference == null || preference.isEmpty()) {\n            if (awarenessAttributes.length == 0) {\n                return indexShard.activeInitializingShardsRandomIt();\n            } else {\n                return indexShard.preferAttributesActiveInitializingShardsIt(awarenessAttributes, nodes);\n            }\n        }\n        if (preference.charAt(0) == '_') {\n            Preference preferenceType = Preference.parse(preference);\n            if (preferenceType == Preference.SHARDS) {\n                // starts with _shards, so execute on specific ones\n                int index = preference.indexOf('|');\n\n                String shards;\n                if (index == -1) {\n                    shards = preference.substring(Preference.SHARDS.type().length() + 1);\n                } else {\n                    shards = preference.substring(Preference.SHARDS.type().length() + 1, index);\n                }\n                String ids = Strings.splitStringByCommaToArray(shards);\n                boolean found = false;\n                for (String id : ids) {\n                    if (Integer.parseInt(id) == indexShard.shardId().id()) {\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    return null;\n                }\n                // no more preference\n                if (index == -1 || index == preference.length() - 1) {\n                    if (awarenessAttributes.length == 0) {\n                        return indexShard.activeInitializingShardsRandomIt();\n                    } else {\n                        return indexShard.preferAttributesActiveInitializingShardsIt(awarenessAttributes, nodes);\n                    }\n                } else {\n                    // update the preference and continue\n                    preference = preference.substring(index + 1);\n                }\n            }\n            preferenceType = Preference.parse(preference);\n            switch (preferenceType) {\n                case PREFER_NODES:\n                    final Set<String> nodesIds =\n                            Arrays.stream(\n                                    preference.substring(Preference.PREFER_NODES.type().length() + 1).split(\",\")\n                            ).collect(Collectors.toSet());\n                    return indexShard.preferNodeActiveInitializingShardsIt(nodesIds);\n                case LOCAL:\n                    return indexShard.preferNodeActiveInitializingShardsIt(Collections.singleton(localNodeId));\n                case PRIMARY:\n                    return indexShard.primaryActiveInitializingShardIt();\n                case REPLICA:\n                    return indexShard.replicaActiveInitializingShardIt();\n                case PRIMARY_FIRST:\n                    return indexShard.primaryFirstActiveInitializingShardsIt();\n                case REPLICA_FIRST:\n                    return indexShard.replicaFirstActiveInitializingShardsIt();\n                case ONLY_LOCAL:\n                    return indexShard.onlyNodeActiveInitializingShardsIt(localNodeId);\n                case ONLY_NODES:\n                    String nodeAttributes = preference.substring(Preference.ONLY_NODES.type().length() + 1);\n                    return indexShard.onlyNodeSelectorActiveInitializingShardsIt(nodeAttributes.split(\",\"), nodes);\n                default:\n                    throw new IllegalArgumentException(\"unknown preference [\" + preferenceType + \"]\");\n            }\n        }\n        // if not, then use it as the index\n        if (awarenessAttributes.length == 0) {\n            return indexShard.activeInitializingShardsIt(Murmur3HashFunction.hash(preference));\n        } else {\n            return indexShard.preferAttributesActiveInitializingShardsIt(awarenessAttributes, nodes, Murmur3HashFunction.hash(preference));\n        }\n    }\n``` \n\n二，结果震荡问题（Bouncing Results）\n \n搜索同一query，结果ES返回的顺序却不尽相同，这就是请求轮询到不同分片，而未设置排序条件，相同相关性评分情况下，是按照所在segment中​lucene id来排序的，相同数据的不同备份之间该id是不能保证一致的，故造成结果震荡问题。\n如设置该参数，则有一下9种情况\n\n`_primary`:发送到集群的相关操作请求只会在主分片上执行。\n`_primary_first`:指查询会先在主分片中查询，如果主分片找不到（挂了），就会在副本中查询。 \n`_replica`:发送到集群的相关操作请求只会在副本上执行。\n`_replica_first`：指查询会先在副本中查询，如果副本找不到（挂了），就会在主分片中查询。\n`_local`: 指查询操作会优先在本地节点有的分片中查询，没有的话再在其它节点查询。\n`_prefer_nodes:abc,xyz`:在提供的节点上优先执行（在这种情况下为'abc'或'xyz'）\n`_shards:2,3`：限制操作到指定的分片。 （`2`和“3”）。这个偏好可以与其他偏好组合，但必须首先出现：`_shards：2,3 | _primary`\n`_only_nodes:node1,node2`:指在指定id的节点里面进行查询，如果该节点只有要查询索引的部分分片，就只在这部分分片中查找，不同节点之间用“，”分隔。\n\ncustom(自定义)：注意自定义的preference参数不能以下划线\"_\"开头。\n当preference为自定义时，即该参数不为空，且开头不以“下划线”开头时，特别注意：如果以用户query作为自定义preference时，一定要处理以下划线开头的情况，这种情况下如果不属于以上8种情况，则会抛出异常。\n\n\n\n三，参考：\n\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-preference.html","slug":"Elasticsearch 搜索模块之preference参数","published":1,"date":"2020-03-06T11:04:25.660Z","updated":"2020-03-22T07:40:21.658Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck82rwpmc0006g52w2v10308c","content":"<html><head></head><body><p>##一，preference简述</p>\n<p>elasticsearch可以使用preference参数来指定分片查询的优先级，即我们可以通过该参数来控制搜索时的索引数据分片。</p>\n<p>如不设置该参数：在所有有效的主分片以及副本间轮询。</p>\n<p>具体可看下：OperationRouting.java类</p>\n<figure class=\"highlight java hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> ShardIterator <span class=\"hljs-title\">activeInitializingShardsRandomIt</span><span class=\"hljs-params\">()</span> </span>{</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> activeInitializingShardsIt(shuffler.nextSeed());</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>自增，以实现shard间轮询操作</p>\n<figure class=\"highlight java hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">nextSeed</span><span class=\"hljs-params\">()</span> </span>{</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> seed.getAndIncrement();</span><br><span class=\"line\"> }</span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> ShardIterator <span class=\"hljs-title\">activeInitializingShardsIt</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> seed)</span> </span>{</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (allInitializingShards.isEmpty()) {</span><br><span class=\"line\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> PlainShardIterator(shardId, shuffler.shuffle(activeShards, seed));</span><br><span class=\"line\">    }</span><br><span class=\"line\">    ArrayList<ShardRouting> ordered = <span class=\"hljs-keyword\">new</span> ArrayList<>(activeShards.size() + allInitializingShards.size());</span><br><span class=\"line\">    ordered.addAll(shuffler.shuffle(activeShards, seed));</span><br><span class=\"line\">    ordered.addAll(allInitializingShards);</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> PlainShardIterator(shardId, ordered);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<pre><code class=\"java\"><span class=\"function\"><span class=\"keyword\">private</span> ShardIterator <span class=\"title\">preferenceActiveShardIterator</span><span class=\"params\">(IndexShardRoutingTable indexShard, String localNodeId, DiscoveryNodes nodes, @Nullable String preference)</span> </span>{\n        <span class=\"keyword\">if</span> (preference == <span class=\"keyword\">null</span> || preference.isEmpty()) {\n            <span class=\"keyword\">if</span> (awarenessAttributes.length == <span class=\"number\">0</span>) {\n                <span class=\"keyword\">return</span> indexShard.activeInitializingShardsRandomIt();\n            } <span class=\"keyword\">else</span> {\n                <span class=\"keyword\">return</span> indexShard.preferAttributesActiveInitializingShardsIt(awarenessAttributes, nodes);\n            }\n        }\n        <span class=\"keyword\">if</span> (preference.charAt(<span class=\"number\">0</span>) == <span class=\"string\">'_'</span>) {\n            Preference preferenceType = Preference.parse(preference);\n            <span class=\"keyword\">if</span> (preferenceType == Preference.SHARDS) {\n                <span class=\"comment\">// starts with _shards, so execute on specific ones</span>\n                <span class=\"keyword\">int</span> index = preference.indexOf(<span class=\"string\">'|'</span>);\n\n                String shards;\n                <span class=\"keyword\">if</span> (index == -<span class=\"number\">1</span>) {\n                    shards = preference.substring(Preference.SHARDS.type().length() + <span class=\"number\">1</span>);\n                } <span class=\"keyword\">else</span> {\n                    shards = preference.substring(Preference.SHARDS.type().length() + <span class=\"number\">1</span>, index);\n                }\n                String ids = Strings.splitStringByCommaToArray(shards);\n                <span class=\"keyword\">boolean</span> found = <span class=\"keyword\">false</span>;\n                <span class=\"keyword\">for</span> (String id : ids) {\n                    <span class=\"keyword\">if</span> (Integer.parseInt(id) == indexShard.shardId().id()) {\n                        found = <span class=\"keyword\">true</span>;\n                        <span class=\"keyword\">break</span>;\n                    }\n                }\n                <span class=\"keyword\">if</span> (!found) {\n                    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;\n                }\n                <span class=\"comment\">// no more preference</span>\n                <span class=\"keyword\">if</span> (index == -<span class=\"number\">1</span> || index == preference.length() - <span class=\"number\">1</span>) {\n                    <span class=\"keyword\">if</span> (awarenessAttributes.length == <span class=\"number\">0</span>) {\n                        <span class=\"keyword\">return</span> indexShard.activeInitializingShardsRandomIt();\n                    } <span class=\"keyword\">else</span> {\n                        <span class=\"keyword\">return</span> indexShard.preferAttributesActiveInitializingShardsIt(awarenessAttributes, nodes);\n                    }\n                } <span class=\"keyword\">else</span> {\n                    <span class=\"comment\">// update the preference and continue</span>\n                    preference = preference.substring(index + <span class=\"number\">1</span>);\n                }\n            }\n            preferenceType = Preference.parse(preference);\n            <span class=\"keyword\">switch</span> (preferenceType) {\n                <span class=\"keyword\">case</span> PREFER_NODES:\n                    <span class=\"keyword\">final</span> Set<String> nodesIds =\n                            Arrays.stream(\n                                    preference.substring(Preference.PREFER_NODES.type().length() + <span class=\"number\">1</span>).split(<span class=\"string\">\",\"</span>)\n                            ).collect(Collectors.toSet());\n                    <span class=\"keyword\">return</span> indexShard.preferNodeActiveInitializingShardsIt(nodesIds);\n                <span class=\"keyword\">case</span> LOCAL:\n                    <span class=\"keyword\">return</span> indexShard.preferNodeActiveInitializingShardsIt(Collections.singleton(localNodeId));\n                <span class=\"keyword\">case</span> PRIMARY:\n                    <span class=\"keyword\">return</span> indexShard.primaryActiveInitializingShardIt();\n                <span class=\"keyword\">case</span> REPLICA:\n                    <span class=\"keyword\">return</span> indexShard.replicaActiveInitializingShardIt();\n                <span class=\"keyword\">case</span> PRIMARY_FIRST:\n                    <span class=\"keyword\">return</span> indexShard.primaryFirstActiveInitializingShardsIt();\n                <span class=\"keyword\">case</span> REPLICA_FIRST:\n                    <span class=\"keyword\">return</span> indexShard.replicaFirstActiveInitializingShardsIt();\n                <span class=\"keyword\">case</span> ONLY_LOCAL:\n                    <span class=\"keyword\">return</span> indexShard.onlyNodeActiveInitializingShardsIt(localNodeId);\n                <span class=\"keyword\">case</span> ONLY_NODES:\n                    String nodeAttributes = preference.substring(Preference.ONLY_NODES.type().length() + <span class=\"number\">1</span>);\n                    <span class=\"keyword\">return</span> indexShard.onlyNodeSelectorActiveInitializingShardsIt(nodeAttributes.split(<span class=\"string\">\",\"</span>), nodes);\n                <span class=\"keyword\">default</span>:\n                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"unknown preference [\"</span> + preferenceType + <span class=\"string\">\"]\"</span>);\n            }\n        }\n        <span class=\"comment\">// if not, then use it as the index</span>\n        <span class=\"keyword\">if</span> (awarenessAttributes.length == <span class=\"number\">0</span>) {\n            <span class=\"keyword\">return</span> indexShard.activeInitializingShardsIt(Murmur3HashFunction.hash(preference));\n        } <span class=\"keyword\">else</span> {\n            <span class=\"keyword\">return</span> indexShard.preferAttributesActiveInitializingShardsIt(awarenessAttributes, nodes, Murmur3HashFunction.hash(preference));\n        }\n    }</code></pre>\n<p>二，结果震荡问题（Bouncing Results）</p>\n<p>搜索同一query，结果ES返回的顺序却不尽相同，这就是请求轮询到不同分片，而未设置排序条件，相同相关性评分情况下，是按照所在segment中​lucene id来排序的，相同数据的不同备份之间该id是不能保证一致的，故造成结果震荡问题。<br>如设置该参数，则有一下9种情况</p>\n<p><code>_primary</code>:发送到集群的相关操作请求只会在主分片上执行。<br><code>_primary_first</code>:指查询会先在主分片中查询，如果主分片找不到（挂了），就会在副本中查询。<br><code>_replica</code>:发送到集群的相关操作请求只会在副本上执行。<br><code>_replica_first</code>：指查询会先在副本中查询，如果副本找不到（挂了），就会在主分片中查询。<br><code>_local</code>: 指查询操作会优先在本地节点有的分片中查询，没有的话再在其它节点查询。<br><code>_prefer_nodes:abc,xyz</code>:在提供的节点上优先执行（在这种情况下为’abc’或’xyz’）<br><code>_shards:2,3</code>：限制操作到指定的分片。 （<code>2</code>和“3”）。这个偏好可以与其他偏好组合，但必须首先出现：<code>_shards：2,3 | _primary</code><br><code>_only_nodes:node1,node2</code>:指在指定id的节点里面进行查询，如果该节点只有要查询索引的部分分片，就只在这部分分片中查找，不同节点之间用“，”分隔。</p>\n<p>custom(自定义)：注意自定义的preference参数不能以下划线”_”开头。<br>当preference为自定义时，即该参数不为空，且开头不以“下划线”开头时，特别注意：如果以用户query作为自定义preference时，一定要处理以下划线开头的情况，这种情况下如果不属于以上8种情况，则会抛出异常。</p>\n<p>三，参考：</p>\n<p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-preference.html\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-preference.html</a></p>\n</body></html>","site":{"data":{}},"excerpt":"","more":"<p>##一，preference简述</p>\n<p>elasticsearch可以使用preference参数来指定分片查询的优先级，即我们可以通过该参数来控制搜索时的索引数据分片。</p>\n<p>如不设置该参数：在所有有效的主分片以及副本间轮询。</p>\n<p>具体可看下：OperationRouting.java类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ShardIterator <span class=\"title\">activeInitializingShardsRandomIt</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> activeInitializingShardsIt(shuffler.nextSeed());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>自增，以实现shard间轮询操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">nextSeed</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> seed.getAndIncrement();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ShardIterator <span class=\"title\">activeInitializingShardsIt</span><span class=\"params\">(<span class=\"keyword\">int</span> seed)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (allInitializingShards.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PlainShardIterator(shardId, shuffler.shuffle(activeShards, seed));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ArrayList&lt;ShardRouting&gt; ordered = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(activeShards.size() + allInitializingShards.size());</span><br><span class=\"line\">    ordered.addAll(shuffler.shuffle(activeShards, seed));</span><br><span class=\"line\">    ordered.addAll(allInitializingShards);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PlainShardIterator(shardId, ordered);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<pre><code class=\"java\"><span class=\"function\"><span class=\"keyword\">private</span> ShardIterator <span class=\"title\">preferenceActiveShardIterator</span><span class=\"params\">(IndexShardRoutingTable indexShard, String localNodeId, DiscoveryNodes nodes, @Nullable String preference)</span> </span>{\n        <span class=\"keyword\">if</span> (preference == <span class=\"keyword\">null</span> || preference.isEmpty()) {\n            <span class=\"keyword\">if</span> (awarenessAttributes.length == <span class=\"number\">0</span>) {\n                <span class=\"keyword\">return</span> indexShard.activeInitializingShardsRandomIt();\n            } <span class=\"keyword\">else</span> {\n                <span class=\"keyword\">return</span> indexShard.preferAttributesActiveInitializingShardsIt(awarenessAttributes, nodes);\n            }\n        }\n        <span class=\"keyword\">if</span> (preference.charAt(<span class=\"number\">0</span>) == <span class=\"string\">'_'</span>) {\n            Preference preferenceType = Preference.parse(preference);\n            <span class=\"keyword\">if</span> (preferenceType == Preference.SHARDS) {\n                <span class=\"comment\">// starts with _shards, so execute on specific ones</span>\n                <span class=\"keyword\">int</span> index = preference.indexOf(<span class=\"string\">'|'</span>);\n\n                String shards;\n                <span class=\"keyword\">if</span> (index == -<span class=\"number\">1</span>) {\n                    shards = preference.substring(Preference.SHARDS.type().length() + <span class=\"number\">1</span>);\n                } <span class=\"keyword\">else</span> {\n                    shards = preference.substring(Preference.SHARDS.type().length() + <span class=\"number\">1</span>, index);\n                }\n                String ids = Strings.splitStringByCommaToArray(shards);\n                <span class=\"keyword\">boolean</span> found = <span class=\"keyword\">false</span>;\n                <span class=\"keyword\">for</span> (String id : ids) {\n                    <span class=\"keyword\">if</span> (Integer.parseInt(id) == indexShard.shardId().id()) {\n                        found = <span class=\"keyword\">true</span>;\n                        <span class=\"keyword\">break</span>;\n                    }\n                }\n                <span class=\"keyword\">if</span> (!found) {\n                    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;\n                }\n                <span class=\"comment\">// no more preference</span>\n                <span class=\"keyword\">if</span> (index == -<span class=\"number\">1</span> || index == preference.length() - <span class=\"number\">1</span>) {\n                    <span class=\"keyword\">if</span> (awarenessAttributes.length == <span class=\"number\">0</span>) {\n                        <span class=\"keyword\">return</span> indexShard.activeInitializingShardsRandomIt();\n                    } <span class=\"keyword\">else</span> {\n                        <span class=\"keyword\">return</span> indexShard.preferAttributesActiveInitializingShardsIt(awarenessAttributes, nodes);\n                    }\n                } <span class=\"keyword\">else</span> {\n                    <span class=\"comment\">// update the preference and continue</span>\n                    preference = preference.substring(index + <span class=\"number\">1</span>);\n                }\n            }\n            preferenceType = Preference.parse(preference);\n            <span class=\"keyword\">switch</span> (preferenceType) {\n                <span class=\"keyword\">case</span> PREFER_NODES:\n                    <span class=\"keyword\">final</span> Set&lt;String&gt; nodesIds =\n                            Arrays.stream(\n                                    preference.substring(Preference.PREFER_NODES.type().length() + <span class=\"number\">1</span>).split(<span class=\"string\">\",\"</span>)\n                            ).collect(Collectors.toSet());\n                    <span class=\"keyword\">return</span> indexShard.preferNodeActiveInitializingShardsIt(nodesIds);\n                <span class=\"keyword\">case</span> LOCAL:\n                    <span class=\"keyword\">return</span> indexShard.preferNodeActiveInitializingShardsIt(Collections.singleton(localNodeId));\n                <span class=\"keyword\">case</span> PRIMARY:\n                    <span class=\"keyword\">return</span> indexShard.primaryActiveInitializingShardIt();\n                <span class=\"keyword\">case</span> REPLICA:\n                    <span class=\"keyword\">return</span> indexShard.replicaActiveInitializingShardIt();\n                <span class=\"keyword\">case</span> PRIMARY_FIRST:\n                    <span class=\"keyword\">return</span> indexShard.primaryFirstActiveInitializingShardsIt();\n                <span class=\"keyword\">case</span> REPLICA_FIRST:\n                    <span class=\"keyword\">return</span> indexShard.replicaFirstActiveInitializingShardsIt();\n                <span class=\"keyword\">case</span> ONLY_LOCAL:\n                    <span class=\"keyword\">return</span> indexShard.onlyNodeActiveInitializingShardsIt(localNodeId);\n                <span class=\"keyword\">case</span> ONLY_NODES:\n                    String nodeAttributes = preference.substring(Preference.ONLY_NODES.type().length() + <span class=\"number\">1</span>);\n                    <span class=\"keyword\">return</span> indexShard.onlyNodeSelectorActiveInitializingShardsIt(nodeAttributes.split(<span class=\"string\">\",\"</span>), nodes);\n                <span class=\"keyword\">default</span>:\n                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"unknown preference [\"</span> + preferenceType + <span class=\"string\">\"]\"</span>);\n            }\n        }\n        <span class=\"comment\">// if not, then use it as the index</span>\n        <span class=\"keyword\">if</span> (awarenessAttributes.length == <span class=\"number\">0</span>) {\n            <span class=\"keyword\">return</span> indexShard.activeInitializingShardsIt(Murmur3HashFunction.hash(preference));\n        } <span class=\"keyword\">else</span> {\n            <span class=\"keyword\">return</span> indexShard.preferAttributesActiveInitializingShardsIt(awarenessAttributes, nodes, Murmur3HashFunction.hash(preference));\n        }\n    }</code></pre>\n<p>二，结果震荡问题（Bouncing Results）</p>\n<p>搜索同一query，结果ES返回的顺序却不尽相同，这就是请求轮询到不同分片，而未设置排序条件，相同相关性评分情况下，是按照所在segment中​lucene id来排序的，相同数据的不同备份之间该id是不能保证一致的，故造成结果震荡问题。<br>如设置该参数，则有一下9种情况</p>\n<p><code>_primary</code>:发送到集群的相关操作请求只会在主分片上执行。<br><code>_primary_first</code>:指查询会先在主分片中查询，如果主分片找不到（挂了），就会在副本中查询。<br><code>_replica</code>:发送到集群的相关操作请求只会在副本上执行。<br><code>_replica_first</code>：指查询会先在副本中查询，如果副本找不到（挂了），就会在主分片中查询。<br><code>_local</code>: 指查询操作会优先在本地节点有的分片中查询，没有的话再在其它节点查询。<br><code>_prefer_nodes:abc,xyz</code>:在提供的节点上优先执行（在这种情况下为’abc’或’xyz’）<br><code>_shards:2,3</code>：限制操作到指定的分片。 （<code>2</code>和“3”）。这个偏好可以与其他偏好组合，但必须首先出现：<code>_shards：2,3 | _primary</code><br><code>_only_nodes:node1,node2</code>:指在指定id的节点里面进行查询，如果该节点只有要查询索引的部分分片，就只在这部分分片中查找，不同节点之间用“，”分隔。</p>\n<p>custom(自定义)：注意自定义的preference参数不能以下划线”_”开头。<br>当preference为自定义时，即该参数不为空，且开头不以“下划线”开头时，特别注意：如果以用户query作为自定义preference时，一定要处理以下划线开头的情况，这种情况下如果不属于以上8种情况，则会抛出异常。</p>\n<p>三，参考：</p>\n<p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-preference.html\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-preference.html</a></p>\n"},{"title":"Elasticsearch源码编译by Intellij Idea","toc":true,"thumbnail":"/logo/elasticsearch.jpg","_content":"##一、软件环境\nIntellij Idea:2017.1版本\nElasticsearch源码版本:5.3.1\nJDK:1.8.0_111 \nGradle :建议3.3及以上版本。官网：https://gradle.org/\n##二、下载Elasticsearch源码\n到github clone源码，https://github.com/elastic/elasticsearch.git，建议选择稳定版本分支。\n\n##三、导入idea\n1，##编译执行gradle build.gradle，报错：\nyou must run gradle idea from the root of elasticsearch before importing into intellij\n解决办法：运行命令：gradle idea。同理如使用eclipse编译器，运行gradle eclipse。该过程会向mvn仓库下载响应的jar包，视网络情况，大概会持续20分钟。\n\n \n##2，运行org.elasticsearch.bootstrap.Elasticsearch 方法，报错：\n\"path.home is not configured\" when starting ES in transport and client mode“，\n解决办法：在VM options中加入配置：-Des.path.home=/home/jiangtao/code/elasticsearch/core，即指向相应的core模块的路径。\n\n##3，报错：org.elasticsearch.bootstrap.BootstrapException: java.nio.file.NoSuchFileException\n  ```java\nException in thread \"main\" org.elasticsearch.bootstrap.BootstrapException: java.nio.file.NoSuchFileException: /home/jiangtao/code/elasticsearch/core/config Likely root cause: java.nio.file.NoSuchFileException: /home/jiangtao/code/elasticsearch/core/config\n    at sun.nio.fs.UnixException.translateToIOException(UnixException.java:86)\n    at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102)\n    at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107)\n    at sun.nio.fs.UnixFileAttributeViews$Basic.readAttributes(UnixFileAttributeViews.java:55)\n   at sun.nio.fs.UnixFileSystemProvider.readAttributes(UnixFileSystemProvider.java:144)\n   at sun.nio.fs.LinuxFileSystemProvider.readAttributes(LinuxFileSystemProvider.java:99)\n   at java.nio.file.Files.readAttributes(Files.java:1737)\n   at java.nio.file.FileTreeWalker.getAttributes(FileTreeWalker.java:225)\n   at java.nio.file.FileTreeWalker.visit(FileTreeWalker.java:276)\n   at java.nio.file.FileTreeWalker.walk(FileTreeWalker.java:322)\n   at java.nio.file.Files.walkFileTree(Files.java:2662)\n   ```\n\n解决办法：将distribution模块src路径下的config整个文件copy到core模块中\n\n##4，报错： ERROR Could not register mbeans java.security.AccessControlException\n```java\n2017-06-06 09:52:08,007 main ERROR Could not register mbeans java.security.AccessControlException: access denied (\"javax.management.MBeanTrustPermission\" \"register\")\n             at java.security.AccessControlContext.checkPermission(AccessControlContext.java:472)\n            at java.lang.SecurityManager.checkPermission(SecurityManager.java:585)\n            at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.checkMBeanTrustPermission(DefaultMBeanServerInterceptor.java:1848)\n            at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerMBean(DefaultMBeanServerInterceptor.java:322)\n            at com.sun.jmx.mbeanserver.JmxMBeanServer.registerMBean(JmxMBeanServer.java:522)\n             \n           at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:91)\n           at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:84)```\n\n       解决办法：禁用jmx,在VM options中继续添加配置：  -Dlog4j2.disable.jmx=true。注意：在VM options中多个配置中间用空格分隔。\n```\n##5，报错： java.lang.IllegalStateException: Unsupported transport.type \n错误栈如下：\n```java\n[2017-06-06T10:04:21,327][WARN ][o.e.b.ElasticsearchUncaughtExceptionHandler]  uncaught exception in thread [main]\norg.elasticsearch.bootstrap.StartupException: java.lang.IllegalStateException: Unsupported transport.type \nat org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:127) ~[main/:?]\nat org.elasticsearch.bootstrap.Elasticsearch.execute(Elasticsearch.java:114) ~[main/:?]\nat org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:58) ~[main/:?]\nat org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:122) ~[main/:?]\nat org.elasticsearch.cli.Command.main(Command.java:88) ~[main/:?]\nat org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:91) ~[main/:?]\nat org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:84) ~[main/:?]\nCaused by: java.lang.IllegalStateException: Unsupported transport.type \nat org.elasticsearch.common.network.NetworkModule.getTransportSupplier(NetworkModule.java:213) ~[main/:?]\nat org.elasticsearch.node.Node.<init>(Node.java:421) ~[main/:?]\nat org.elasticsearch.node.Node.<init>(Node.java:242) ~[main/:?]\nat org.elasticsearch.bootstrap.Bootstrap$6.<init>(Bootstrap.java:242) ~[main/:?]\nat org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:242) ~[main/:?]\nat org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:360) ~[main/:?]\nat org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:123) ~[main/:?]\n... 6 more\n```\n\n这个是由于依赖的transport等jar并没有找到，可以在项目根目录找到models模块，然后将下面目录打包，然后copy到distribution/src/main/models目录下，\n也可以直接去官网（https://www.elastic.co/downloads/elasticsearch）下载zip包，解压后直接copy。\n我直接去官网下载的zip包：从官网下载完毕zip包后，具体解决办法请看：错误 6。\n\n\n##6，copy module版本冲突\n错误栈如下： \n```java\norg.elasticsearch.bootstrap.StartupException: java.lang.IllegalArgumentException: Plugin [lang-expression] is incompatible with Elasticsearch [5.3.4]. Was designed for version [5.3.1]\n at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:127) ~[main/:?]\n at org.elasticsearch.bootstrap.Elasticsearch.execute(Elasticsearch.java:114) ~[main/:?]\n at org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:58) ~[main/:?]\n at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:122) ~[main/:?]\n at org.elasticsearch.cli.Command.main(Command.java:88) ~[main/:?]\nat org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:91) ~[main/:?]\nat org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:84) ~[main/:?]\nCaused by: java.lang.IllegalArgumentException: Plugin [lang-expression] is incompatible with Elasticsearch [5.3.4]. Was designed for version [5.3.1]\n```\n\n解决办法：修改es当前版本\n将core模块中的Version.java类由\npublic static final Version CURRENT = V_5_3_4_UNRELEASED;\n修改为：\npublic static final Version CURRENT = V_5_3_1;","source":"_posts/Elasticsearch源码编译by Intellij Idea.md","raw":"title: Elasticsearch源码编译by Intellij Idea\ntoc: true\ncategories: elasticsearch\ntags:\n  - elasticsearch\nthumbnail: /logo/elasticsearch.jpg\n---\n##一、软件环境\nIntellij Idea:2017.1版本\nElasticsearch源码版本:5.3.1\nJDK:1.8.0_111 \nGradle :建议3.3及以上版本。官网：https://gradle.org/\n##二、下载Elasticsearch源码\n到github clone源码，https://github.com/elastic/elasticsearch.git，建议选择稳定版本分支。\n\n##三、导入idea\n1，##编译执行gradle build.gradle，报错：\nyou must run gradle idea from the root of elasticsearch before importing into intellij\n解决办法：运行命令：gradle idea。同理如使用eclipse编译器，运行gradle eclipse。该过程会向mvn仓库下载响应的jar包，视网络情况，大概会持续20分钟。\n\n \n##2，运行org.elasticsearch.bootstrap.Elasticsearch 方法，报错：\n\"path.home is not configured\" when starting ES in transport and client mode“，\n解决办法：在VM options中加入配置：-Des.path.home=/home/jiangtao/code/elasticsearch/core，即指向相应的core模块的路径。\n\n##3，报错：org.elasticsearch.bootstrap.BootstrapException: java.nio.file.NoSuchFileException\n  ```java\nException in thread \"main\" org.elasticsearch.bootstrap.BootstrapException: java.nio.file.NoSuchFileException: /home/jiangtao/code/elasticsearch/core/config Likely root cause: java.nio.file.NoSuchFileException: /home/jiangtao/code/elasticsearch/core/config\n    at sun.nio.fs.UnixException.translateToIOException(UnixException.java:86)\n    at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102)\n    at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107)\n    at sun.nio.fs.UnixFileAttributeViews$Basic.readAttributes(UnixFileAttributeViews.java:55)\n   at sun.nio.fs.UnixFileSystemProvider.readAttributes(UnixFileSystemProvider.java:144)\n   at sun.nio.fs.LinuxFileSystemProvider.readAttributes(LinuxFileSystemProvider.java:99)\n   at java.nio.file.Files.readAttributes(Files.java:1737)\n   at java.nio.file.FileTreeWalker.getAttributes(FileTreeWalker.java:225)\n   at java.nio.file.FileTreeWalker.visit(FileTreeWalker.java:276)\n   at java.nio.file.FileTreeWalker.walk(FileTreeWalker.java:322)\n   at java.nio.file.Files.walkFileTree(Files.java:2662)\n   ```\n\n解决办法：将distribution模块src路径下的config整个文件copy到core模块中\n\n##4，报错： ERROR Could not register mbeans java.security.AccessControlException\n```java\n2017-06-06 09:52:08,007 main ERROR Could not register mbeans java.security.AccessControlException: access denied (\"javax.management.MBeanTrustPermission\" \"register\")\n             at java.security.AccessControlContext.checkPermission(AccessControlContext.java:472)\n            at java.lang.SecurityManager.checkPermission(SecurityManager.java:585)\n            at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.checkMBeanTrustPermission(DefaultMBeanServerInterceptor.java:1848)\n            at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerMBean(DefaultMBeanServerInterceptor.java:322)\n            at com.sun.jmx.mbeanserver.JmxMBeanServer.registerMBean(JmxMBeanServer.java:522)\n             \n           at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:91)\n           at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:84)```\n\n       解决办法：禁用jmx,在VM options中继续添加配置：  -Dlog4j2.disable.jmx=true。注意：在VM options中多个配置中间用空格分隔。\n```\n##5，报错： java.lang.IllegalStateException: Unsupported transport.type \n错误栈如下：\n```java\n[2017-06-06T10:04:21,327][WARN ][o.e.b.ElasticsearchUncaughtExceptionHandler]  uncaught exception in thread [main]\norg.elasticsearch.bootstrap.StartupException: java.lang.IllegalStateException: Unsupported transport.type \nat org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:127) ~[main/:?]\nat org.elasticsearch.bootstrap.Elasticsearch.execute(Elasticsearch.java:114) ~[main/:?]\nat org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:58) ~[main/:?]\nat org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:122) ~[main/:?]\nat org.elasticsearch.cli.Command.main(Command.java:88) ~[main/:?]\nat org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:91) ~[main/:?]\nat org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:84) ~[main/:?]\nCaused by: java.lang.IllegalStateException: Unsupported transport.type \nat org.elasticsearch.common.network.NetworkModule.getTransportSupplier(NetworkModule.java:213) ~[main/:?]\nat org.elasticsearch.node.Node.<init>(Node.java:421) ~[main/:?]\nat org.elasticsearch.node.Node.<init>(Node.java:242) ~[main/:?]\nat org.elasticsearch.bootstrap.Bootstrap$6.<init>(Bootstrap.java:242) ~[main/:?]\nat org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:242) ~[main/:?]\nat org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:360) ~[main/:?]\nat org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:123) ~[main/:?]\n... 6 more\n```\n\n这个是由于依赖的transport等jar并没有找到，可以在项目根目录找到models模块，然后将下面目录打包，然后copy到distribution/src/main/models目录下，\n也可以直接去官网（https://www.elastic.co/downloads/elasticsearch）下载zip包，解压后直接copy。\n我直接去官网下载的zip包：从官网下载完毕zip包后，具体解决办法请看：错误 6。\n\n\n##6，copy module版本冲突\n错误栈如下： \n```java\norg.elasticsearch.bootstrap.StartupException: java.lang.IllegalArgumentException: Plugin [lang-expression] is incompatible with Elasticsearch [5.3.4]. Was designed for version [5.3.1]\n at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:127) ~[main/:?]\n at org.elasticsearch.bootstrap.Elasticsearch.execute(Elasticsearch.java:114) ~[main/:?]\n at org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:58) ~[main/:?]\n at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:122) ~[main/:?]\n at org.elasticsearch.cli.Command.main(Command.java:88) ~[main/:?]\nat org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:91) ~[main/:?]\nat org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:84) ~[main/:?]\nCaused by: java.lang.IllegalArgumentException: Plugin [lang-expression] is incompatible with Elasticsearch [5.3.4]. Was designed for version [5.3.1]\n```\n\n解决办法：修改es当前版本\n将core模块中的Version.java类由\npublic static final Version CURRENT = V_5_3_4_UNRELEASED;\n修改为：\npublic static final Version CURRENT = V_5_3_1;","slug":"Elasticsearch源码编译by Intellij Idea","published":1,"date":"2020-03-06T10:56:32.358Z","updated":"2020-03-22T07:40:21.679Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck82rwpme0008g52wazu62jll","content":"<html><head></head><body><p>##一、软件环境<br>Intellij Idea:2017.1版本<br>Elasticsearch源码版本:5.3.1<br>JDK:1.8.0_111<br>Gradle :建议3.3及以上版本。官网：<a href=\"https://gradle.org/\" target=\"_blank\" rel=\"noopener\">https://gradle.org/</a><br>##二、下载Elasticsearch源码<br>到github clone源码，<a href=\"https://github.com/elastic/elasticsearch.git，建议选择稳定版本分支。\" target=\"_blank\" rel=\"noopener\">https://github.com/elastic/elasticsearch.git，建议选择稳定版本分支。</a></p>\n<p>##三、导入idea<br>1，##编译执行gradle build.gradle，报错：<br>you must run gradle idea from the root of elasticsearch before importing into intellij<br>解决办法：运行命令：gradle idea。同理如使用eclipse编译器，运行gradle eclipse。该过程会向mvn仓库下载响应的jar包，视网络情况，大概会持续20分钟。</p>\n<p>##2，运行org.elasticsearch.bootstrap.Elasticsearch 方法，报错：<br>“path.home is not configured” when starting ES in transport and client mode“，<br>解决办法：在VM options中加入配置：-Des.path.home=/home/jiangtao/code/elasticsearch/core，即指向相应的core模块的路径。</p>\n<p>##3，报错：org.elasticsearch.bootstrap.BootstrapException: java.nio.file.NoSuchFileException<br>  </p><figure class=\"highlight java hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception in thread <span class=\"hljs-string\">\"main\"</span> org.elasticsearch.bootstrap.BootstrapException: java.nio.file.NoSuchFileException: /home/jiangtao/code/elasticsearch/core/config Likely root cause: java.nio.file.NoSuchFileException: /home/jiangtao/code/elasticsearch/core/config</span><br><span class=\"line\">    at sun.nio.fs.UnixException.translateToIOException(UnixException.java:<span class=\"hljs-number\">86</span>)</span><br><span class=\"line\">    at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:<span class=\"hljs-number\">102</span>)</span><br><span class=\"line\">    at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:<span class=\"hljs-number\">107</span>)</span><br><span class=\"line\">    at sun.nio.fs.UnixFileAttributeViews$Basic.readAttributes(UnixFileAttributeViews.java:<span class=\"hljs-number\">55</span>)</span><br><span class=\"line\">   at sun.nio.fs.UnixFileSystemProvider.readAttributes(UnixFileSystemProvider.java:<span class=\"hljs-number\">144</span>)</span><br><span class=\"line\">   at sun.nio.fs.LinuxFileSystemProvider.readAttributes(LinuxFileSystemProvider.java:<span class=\"hljs-number\">99</span>)</span><br><span class=\"line\">   at java.nio.file.Files.readAttributes(Files.java:<span class=\"hljs-number\">1737</span>)</span><br><span class=\"line\">   at java.nio.file.FileTreeWalker.getAttributes(FileTreeWalker.java:<span class=\"hljs-number\">225</span>)</span><br><span class=\"line\">   at java.nio.file.FileTreeWalker.visit(FileTreeWalker.java:<span class=\"hljs-number\">276</span>)</span><br><span class=\"line\">   at java.nio.file.FileTreeWalker.walk(FileTreeWalker.java:<span class=\"hljs-number\">322</span>)</span><br><span class=\"line\">   at java.nio.file.Files.walkFileTree(Files.java:<span class=\"hljs-number\">2662</span>)</span><br></pre></td></tr></tbody></table></figure><p></p>\n<p>解决办法：将distribution模块src路径下的config整个文件copy到core模块中</p>\n<p>##4，报错： ERROR Could not register mbeans java.security.AccessControlException</p>\n<figure class=\"highlight java hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-number\">2017</span>-<span class=\"hljs-number\">06</span>-<span class=\"hljs-number\">06</span> <span class=\"hljs-number\">09</span>:<span class=\"hljs-number\">52</span>:<span class=\"hljs-number\">08</span>,<span class=\"hljs-number\">007</span> main ERROR Could not register mbeans java.security.AccessControlException: <span class=\"hljs-function\">access <span class=\"hljs-title\">denied</span> <span class=\"hljs-params\">(<span class=\"hljs-string\">\"javax.management.MBeanTrustPermission\"</span> <span class=\"hljs-string\">\"register\"</span>)</span></span></span><br><span class=\"line\"><span class=\"hljs-function\">             at java.security.AccessControlContext.<span class=\"hljs-title\">checkPermission</span><span class=\"hljs-params\">(AccessControlContext.java:<span class=\"hljs-number\">472</span>)</span></span></span><br><span class=\"line\"><span class=\"hljs-function\">            at java.lang.SecurityManager.<span class=\"hljs-title\">checkPermission</span><span class=\"hljs-params\">(SecurityManager.java:<span class=\"hljs-number\">585</span>)</span></span></span><br><span class=\"line\"><span class=\"hljs-function\">            at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.<span class=\"hljs-title\">checkMBeanTrustPermission</span><span class=\"hljs-params\">(DefaultMBeanServerInterceptor.java:<span class=\"hljs-number\">1848</span>)</span></span></span><br><span class=\"line\"><span class=\"hljs-function\">            at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.<span class=\"hljs-title\">registerMBean</span><span class=\"hljs-params\">(DefaultMBeanServerInterceptor.java:<span class=\"hljs-number\">322</span>)</span></span></span><br><span class=\"line\"><span class=\"hljs-function\">            at com.sun.jmx.mbeanserver.JmxMBeanServer.<span class=\"hljs-title\">registerMBean</span><span class=\"hljs-params\">(JmxMBeanServer.java:<span class=\"hljs-number\">522</span>)</span></span></span><br><span class=\"line\"><span class=\"hljs-function\">             </span></span><br><span class=\"line\"><span class=\"hljs-function\">           at org.elasticsearch.bootstrap.Elasticsearch.<span class=\"hljs-title\">main</span><span class=\"hljs-params\">(Elasticsearch.java:<span class=\"hljs-number\">91</span>)</span></span></span><br><span class=\"line\"><span class=\"hljs-function\">           at org.elasticsearch.bootstrap.Elasticsearch.<span class=\"hljs-title\">main</span><span class=\"hljs-params\">(Elasticsearch.java:<span class=\"hljs-number\">84</span>)</span></span></span><br></pre></td></tr></tbody></table></figure>\n\n<pre><code>解决办法：禁用jmx,在VM options中继续添加配置：  -Dlog4j2.disable.jmx=true。注意：在VM options中多个配置中间用空格分隔。</code></pre><figure class=\"highlight plain hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">##5，报错： java.lang.IllegalStateException: Unsupported transport.type </span><br><span class=\"line\">错误栈如下：</span><br><span class=\"line\">```java</span><br><span class=\"line\">[2017-06-06T10:04:21,327][WARN ][o.e.b.ElasticsearchUncaughtExceptionHandler]  uncaught exception in thread [main]</span><br><span class=\"line\">org.elasticsearch.bootstrap.StartupException: java.lang.IllegalStateException: Unsupported transport.type </span><br><span class=\"line\">at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:127) ~[main/:?]</span><br><span class=\"line\">at org.elasticsearch.bootstrap.Elasticsearch.execute(Elasticsearch.java:114) ~[main/:?]</span><br><span class=\"line\">at org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:58) ~[main/:?]</span><br><span class=\"line\">at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:122) ~[main/:?]</span><br><span class=\"line\">at org.elasticsearch.cli.Command.main(Command.java:88) ~[main/:?]</span><br><span class=\"line\">at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:91) ~[main/:?]</span><br><span class=\"line\">at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:84) ~[main/:?]</span><br><span class=\"line\">Caused by: java.lang.IllegalStateException: Unsupported transport.type </span><br><span class=\"line\">at org.elasticsearch.common.network.NetworkModule.getTransportSupplier(NetworkModule.java:213) ~[main/:?]</span><br><span class=\"line\">at org.elasticsearch.node.Node.<init>(Node.java:421) ~[main/:?]</span><br><span class=\"line\">at org.elasticsearch.node.Node.<init>(Node.java:242) ~[main/:?]</span><br><span class=\"line\">at org.elasticsearch.bootstrap.Bootstrap$6.<init>(Bootstrap.java:242) ~[main/:?]</span><br><span class=\"line\">at org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:242) ~[main/:?]</span><br><span class=\"line\">at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:360) ~[main/:?]</span><br><span class=\"line\">at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:123) ~[main/:?]</span><br><span class=\"line\">... 6 more</span><br></pre></td></tr></tbody></table></figure>\n\n<p>这个是由于依赖的transport等jar并没有找到，可以在项目根目录找到models模块，然后将下面目录打包，然后copy到distribution/src/main/models目录下，<br>也可以直接去官网（<a href=\"https://www.elastic.co/downloads/elasticsearch）下载zip包，解压后直接copy。\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/downloads/elasticsearch）下载zip包，解压后直接copy。</a><br>我直接去官网下载的zip包：从官网下载完毕zip包后，具体解决办法请看：错误 6。</p>\n<p>##6，copy module版本冲突<br>错误栈如下： </p>\n<figure class=\"highlight java hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.elasticsearch.bootstrap.StartupException: java.lang.IllegalArgumentException: Plugin [lang-expression] is incompatible with Elasticsearch [<span class=\"hljs-number\">5.3</span><span class=\"hljs-number\">.4</span>]. Was designed <span class=\"hljs-keyword\">for</span> version [<span class=\"hljs-number\">5.3</span><span class=\"hljs-number\">.1</span>]</span><br><span class=\"line\"> at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:<span class=\"hljs-number\">127</span>) ~[main/:?]</span><br><span class=\"line\"> at org.elasticsearch.bootstrap.Elasticsearch.execute(Elasticsearch.java:<span class=\"hljs-number\">114</span>) ~[main/:?]</span><br><span class=\"line\"> at org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:<span class=\"hljs-number\">58</span>) ~[main/:?]</span><br><span class=\"line\"> at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:<span class=\"hljs-number\">122</span>) ~[main/:?]</span><br><span class=\"line\"> at org.elasticsearch.cli.Command.main(Command.java:<span class=\"hljs-number\">88</span>) ~[main/:?]</span><br><span class=\"line\">at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:<span class=\"hljs-number\">91</span>) ~[main/:?]</span><br><span class=\"line\">at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:<span class=\"hljs-number\">84</span>) ~[main/:?]</span><br><span class=\"line\">Caused by: java.lang.IllegalArgumentException: Plugin [lang-expression] is incompatible with Elasticsearch [<span class=\"hljs-number\">5.3</span><span class=\"hljs-number\">.4</span>]. Was designed <span class=\"hljs-keyword\">for</span> version [<span class=\"hljs-number\">5.3</span><span class=\"hljs-number\">.1</span>]</span><br></pre></td></tr></tbody></table></figure>\n\n<p>解决办法：修改es当前版本<br>将core模块中的Version.java类由<br>public static final Version CURRENT = V_5_3_4_UNRELEASED;<br>修改为：<br>public static final Version CURRENT = V_5_3_1;</p>\n</body></html>","site":{"data":{}},"excerpt":"","more":"<p>##一、软件环境<br>Intellij Idea:2017.1版本<br>Elasticsearch源码版本:5.3.1<br>JDK:1.8.0_111<br>Gradle :建议3.3及以上版本。官网：<a href=\"https://gradle.org/\" target=\"_blank\" rel=\"noopener\">https://gradle.org/</a><br>##二、下载Elasticsearch源码<br>到github clone源码，<a href=\"https://github.com/elastic/elasticsearch.git，建议选择稳定版本分支。\" target=\"_blank\" rel=\"noopener\">https://github.com/elastic/elasticsearch.git，建议选择稳定版本分支。</a></p>\n<p>##三、导入idea<br>1，##编译执行gradle build.gradle，报错：<br>you must run gradle idea from the root of elasticsearch before importing into intellij<br>解决办法：运行命令：gradle idea。同理如使用eclipse编译器，运行gradle eclipse。该过程会向mvn仓库下载响应的jar包，视网络情况，大概会持续20分钟。</p>\n<p>##2，运行org.elasticsearch.bootstrap.Elasticsearch 方法，报错：<br>“path.home is not configured” when starting ES in transport and client mode“，<br>解决办法：在VM options中加入配置：-Des.path.home=/home/jiangtao/code/elasticsearch/core，即指向相应的core模块的路径。</p>\n<p>##3，报错：org.elasticsearch.bootstrap.BootstrapException: java.nio.file.NoSuchFileException<br>  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception in thread <span class=\"string\">\"main\"</span> org.elasticsearch.bootstrap.BootstrapException: java.nio.file.NoSuchFileException: /home/jiangtao/code/elasticsearch/core/config Likely root cause: java.nio.file.NoSuchFileException: /home/jiangtao/code/elasticsearch/core/config</span><br><span class=\"line\">    at sun.nio.fs.UnixException.translateToIOException(UnixException.java:<span class=\"number\">86</span>)</span><br><span class=\"line\">    at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:<span class=\"number\">102</span>)</span><br><span class=\"line\">    at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:<span class=\"number\">107</span>)</span><br><span class=\"line\">    at sun.nio.fs.UnixFileAttributeViews$Basic.readAttributes(UnixFileAttributeViews.java:<span class=\"number\">55</span>)</span><br><span class=\"line\">   at sun.nio.fs.UnixFileSystemProvider.readAttributes(UnixFileSystemProvider.java:<span class=\"number\">144</span>)</span><br><span class=\"line\">   at sun.nio.fs.LinuxFileSystemProvider.readAttributes(LinuxFileSystemProvider.java:<span class=\"number\">99</span>)</span><br><span class=\"line\">   at java.nio.file.Files.readAttributes(Files.java:<span class=\"number\">1737</span>)</span><br><span class=\"line\">   at java.nio.file.FileTreeWalker.getAttributes(FileTreeWalker.java:<span class=\"number\">225</span>)</span><br><span class=\"line\">   at java.nio.file.FileTreeWalker.visit(FileTreeWalker.java:<span class=\"number\">276</span>)</span><br><span class=\"line\">   at java.nio.file.FileTreeWalker.walk(FileTreeWalker.java:<span class=\"number\">322</span>)</span><br><span class=\"line\">   at java.nio.file.Files.walkFileTree(Files.java:<span class=\"number\">2662</span>)</span><br></pre></td></tr></table></figure></p>\n<p>解决办法：将distribution模块src路径下的config整个文件copy到core模块中</p>\n<p>##4，报错： ERROR Could not register mbeans java.security.AccessControlException</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2017</span>-<span class=\"number\">06</span>-<span class=\"number\">06</span> <span class=\"number\">09</span>:<span class=\"number\">52</span>:<span class=\"number\">08</span>,<span class=\"number\">007</span> main ERROR Could not register mbeans java.security.AccessControlException: <span class=\"function\">access <span class=\"title\">denied</span> <span class=\"params\">(<span class=\"string\">\"javax.management.MBeanTrustPermission\"</span> <span class=\"string\">\"register\"</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">             at java.security.AccessControlContext.<span class=\"title\">checkPermission</span><span class=\"params\">(AccessControlContext.java:<span class=\"number\">472</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">            at java.lang.SecurityManager.<span class=\"title\">checkPermission</span><span class=\"params\">(SecurityManager.java:<span class=\"number\">585</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">            at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.<span class=\"title\">checkMBeanTrustPermission</span><span class=\"params\">(DefaultMBeanServerInterceptor.java:<span class=\"number\">1848</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">            at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.<span class=\"title\">registerMBean</span><span class=\"params\">(DefaultMBeanServerInterceptor.java:<span class=\"number\">322</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">            at com.sun.jmx.mbeanserver.JmxMBeanServer.<span class=\"title\">registerMBean</span><span class=\"params\">(JmxMBeanServer.java:<span class=\"number\">522</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">             </span></span><br><span class=\"line\"><span class=\"function\">           at org.elasticsearch.bootstrap.Elasticsearch.<span class=\"title\">main</span><span class=\"params\">(Elasticsearch.java:<span class=\"number\">91</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">           at org.elasticsearch.bootstrap.Elasticsearch.<span class=\"title\">main</span><span class=\"params\">(Elasticsearch.java:<span class=\"number\">84</span>)</span></span></span><br></pre></td></tr></table></figure>\n\n<pre><code>解决办法：禁用jmx,在VM options中继续添加配置：  -Dlog4j2.disable.jmx=true。注意：在VM options中多个配置中间用空格分隔。</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">##5，报错： java.lang.IllegalStateException: Unsupported transport.type </span><br><span class=\"line\">错误栈如下：</span><br><span class=\"line\">&#96;&#96;&#96;java</span><br><span class=\"line\">[2017-06-06T10:04:21,327][WARN ][o.e.b.ElasticsearchUncaughtExceptionHandler]  uncaught exception in thread [main]</span><br><span class=\"line\">org.elasticsearch.bootstrap.StartupException: java.lang.IllegalStateException: Unsupported transport.type </span><br><span class=\"line\">at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:127) ~[main&#x2F;:?]</span><br><span class=\"line\">at org.elasticsearch.bootstrap.Elasticsearch.execute(Elasticsearch.java:114) ~[main&#x2F;:?]</span><br><span class=\"line\">at org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:58) ~[main&#x2F;:?]</span><br><span class=\"line\">at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:122) ~[main&#x2F;:?]</span><br><span class=\"line\">at org.elasticsearch.cli.Command.main(Command.java:88) ~[main&#x2F;:?]</span><br><span class=\"line\">at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:91) ~[main&#x2F;:?]</span><br><span class=\"line\">at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:84) ~[main&#x2F;:?]</span><br><span class=\"line\">Caused by: java.lang.IllegalStateException: Unsupported transport.type </span><br><span class=\"line\">at org.elasticsearch.common.network.NetworkModule.getTransportSupplier(NetworkModule.java:213) ~[main&#x2F;:?]</span><br><span class=\"line\">at org.elasticsearch.node.Node.&lt;init&gt;(Node.java:421) ~[main&#x2F;:?]</span><br><span class=\"line\">at org.elasticsearch.node.Node.&lt;init&gt;(Node.java:242) ~[main&#x2F;:?]</span><br><span class=\"line\">at org.elasticsearch.bootstrap.Bootstrap$6.&lt;init&gt;(Bootstrap.java:242) ~[main&#x2F;:?]</span><br><span class=\"line\">at org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:242) ~[main&#x2F;:?]</span><br><span class=\"line\">at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:360) ~[main&#x2F;:?]</span><br><span class=\"line\">at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:123) ~[main&#x2F;:?]</span><br><span class=\"line\">... 6 more</span><br></pre></td></tr></table></figure>\n\n<p>这个是由于依赖的transport等jar并没有找到，可以在项目根目录找到models模块，然后将下面目录打包，然后copy到distribution/src/main/models目录下，<br>也可以直接去官网（<a href=\"https://www.elastic.co/downloads/elasticsearch）下载zip包，解压后直接copy。\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/downloads/elasticsearch）下载zip包，解压后直接copy。</a><br>我直接去官网下载的zip包：从官网下载完毕zip包后，具体解决办法请看：错误 6。</p>\n<p>##6，copy module版本冲突<br>错误栈如下： </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.elasticsearch.bootstrap.StartupException: java.lang.IllegalArgumentException: Plugin [lang-expression] is incompatible with Elasticsearch [<span class=\"number\">5.3</span><span class=\"number\">.4</span>]. Was designed <span class=\"keyword\">for</span> version [<span class=\"number\">5.3</span><span class=\"number\">.1</span>]</span><br><span class=\"line\"> at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:<span class=\"number\">127</span>) ~[main/:?]</span><br><span class=\"line\"> at org.elasticsearch.bootstrap.Elasticsearch.execute(Elasticsearch.java:<span class=\"number\">114</span>) ~[main/:?]</span><br><span class=\"line\"> at org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:<span class=\"number\">58</span>) ~[main/:?]</span><br><span class=\"line\"> at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:<span class=\"number\">122</span>) ~[main/:?]</span><br><span class=\"line\"> at org.elasticsearch.cli.Command.main(Command.java:<span class=\"number\">88</span>) ~[main/:?]</span><br><span class=\"line\">at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:<span class=\"number\">91</span>) ~[main/:?]</span><br><span class=\"line\">at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:<span class=\"number\">84</span>) ~[main/:?]</span><br><span class=\"line\">Caused by: java.lang.IllegalArgumentException: Plugin [lang-expression] is incompatible with Elasticsearch [<span class=\"number\">5.3</span><span class=\"number\">.4</span>]. Was designed <span class=\"keyword\">for</span> version [<span class=\"number\">5.3</span><span class=\"number\">.1</span>]</span><br></pre></td></tr></table></figure>\n\n<p>解决办法：修改es当前版本<br>将core模块中的Version.java类由<br>public static final Version CURRENT = V_5_3_4_UNRELEASED;<br>修改为：<br>public static final Version CURRENT = V_5_3_1;</p>\n"},{"title":"Git如何回退版本","toc":true,"thumbnail":"/logo/github.jpg","_content":"1. 首先使用git log查看最近几次提交的版本号，如版本号\"0250cd\";\n\n2. 在命令行输入 git reset --hard 0250cd，成功后会提示\"head is now at 0250cd\"；\n\n3. git push -f -u origin you_branch,you_branch需要回退的分支名\n\n","source":"_posts/Git如何回退版本.md","raw":"title: Git如何回退版本\ntoc: true\ncategories: git\ntags:\n  - git\nthumbnail: /logo/github.jpg\n---\n1. 首先使用git log查看最近几次提交的版本号，如版本号\"0250cd\";\n\n2. 在命令行输入 git reset --hard 0250cd，成功后会提示\"head is now at 0250cd\"；\n\n3. git push -f -u origin you_branch,you_branch需要回退的分支名\n\n","slug":"Git如何回退版本","published":1,"date":"2020-03-20T12:47:07.461Z","updated":"2020-03-22T07:40:21.670Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck82rwpmg000ag52w7k2zcset","content":"<html><head></head><body><ol>\n<li><p>首先使用git log查看最近几次提交的版本号，如版本号”0250cd”;</p>\n</li>\n<li><p>在命令行输入 git reset –hard 0250cd，成功后会提示”head is now at 0250cd”；</p>\n</li>\n<li><p>git push -f -u origin you_branch,you_branch需要回退的分支名</p>\n</li>\n</ol>\n</body></html>","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>首先使用git log查看最近几次提交的版本号，如版本号”0250cd”;</p>\n</li>\n<li><p>在命令行输入 git reset –hard 0250cd，成功后会提示”head is now at 0250cd”；</p>\n</li>\n<li><p>git push -f -u origin you_branch,you_branch需要回退的分支名</p>\n</li>\n</ol>\n"},{"title":"lambda表达式","toc":true,"thumbnail":"/logo/java.jpg","_content":"## 一，排序\n\n对数组从小到大排序\n\n```java\n    public void sortUsingLambda(List<Integer> indexs) {\n        Collections.sort(indexs, (s1, s2) -> s1.compareTo(s2));\n    }\n```\n更简洁的实现方式\n\n```java\n    public void sortUsingLambda(List<Integer> indexs) {\n        Collections.sort(indexs, Integer::compareTo);\n    }\n```\n对数组从小到大排序\n```java\n    public void sortUsingLambda(List<Integer> indexs) {\n        Collections.sort(indexs, (s1, s2) -> s2.compareTo(s1));\n    }\n```\n从小到大简洁实现\n\n```java\n    public void sortUsingLambda(List<Integer> indexs) {\n        Collections.sort(indexs, Comparator.reverseOrder());\n    }\n```\n\n## 二，list转map\n**①：取list中某2个字段作为Map的K,V**\n```java\npublic Map<Long, String> getIdNameMap(List<Account> accounts) {\n    return accounts.stream().collect(Collectors.toMap(Account::getId, Account::getUsername));\n}\n```\n**②：将id和实体Bean做为K,V**\n```java\npublic Map<Long, Account> getIdAccountMap(List<Account> accounts) {\n    return accounts.stream().collect(Collectors.toMap(Account::getId, account -> account));\n}\n```\n或者这样写\n```java\npublic Map<Long, Account> getIdAccountMap(List<Account> accounts) {\n    return accounts.stream().collect(Collectors.toMap(Account::getId, Function.identity()));\n}\n```\naccount -> account是一个返回本身的lambda表达式，后面的使用Function接口中的一个默认方法代替，使整个方法更简洁优雅。\n**③：key存在重复记录时处理**\n\n```java\npublic Map<String, Account> getNameAccountMap(List<Account> accounts) {\n    return accounts.stream().collect(Collectors.toMap(Account::getUsername, Function.identity(), (key1, key2) -> key2));\n}\n```\n**④：使用某个具体的Map类来保存，如保存时使用LinkedHashMap**\n\n```java\npublic Map<String, Account> getNameAccountMap(List<Account> accounts) {\n    return accounts.stream().collect(Collectors.toMap(Account::getUsername, Function.identity(), (key1, key2) -> key2, LinkedHashMap::new));\n}\n```\n**⑤：List<Object>转List<String,Map<String, String>>**\n\n```java\npublic Map<String,List<MCode>> getCodeListMap(){\n        if(CollectionUtils.isEmpty(codeListMap)){\n                List<MCode> codeList = this.getCodeList();\n                Set<String> keySet = codeList.stream().map(code -> code.getCodeKbn()).collect(Collectors.toSet());\n                Iterator<String> it = keySet.iterator();\n                while(it.hasNext()) {\n                        String key = it.next();\n                        codeListMap.put(key, codeList.stream().filter(code -> code.getCodeKbn().equals(key)).collect(Collectors.toList()));\n                }\n        }\n        return codeListMap;\n}\n```\n\n三，Map转List\n\n```java\nMap<String, String> map = new HashMap<>();\n// Convert all Map keys to a List\nList<String> result = new ArrayList(map.keySet());\n// Convert all Map values to a List\nList<String> result2 = new ArrayList(map.values());\n// Java 8, Convert all Map keys to a List\nList<String> result3 = map.keySet().stream()\n\t.collect(Collectors.toList());\n// Java 8, Convert all Map values  to a List\nList<String> result4 = map.values().stream()\n\t.collect(Collectors.toList());\n// Java 8, seem a bit long, but you can enjoy the Stream features like filter and etc.\nList<String> result5 = map.values().stream()\n\t.filter(x -> !\"apple\".equalsIgnoreCase(x))\n\t.collect(Collectors.toList());\n// Java 8, split a map into 2 List, it works!\n// refer example 3 below\n```\n\n","source":"_posts/lambda表达式.md","raw":"title: lambda表达式\ntoc: true\ncategories: java\ntags:\n  - java\nthumbnail: /logo/java.jpg\n---\n## 一，排序\n\n对数组从小到大排序\n\n```java\n    public void sortUsingLambda(List<Integer> indexs) {\n        Collections.sort(indexs, (s1, s2) -> s1.compareTo(s2));\n    }\n```\n更简洁的实现方式\n\n```java\n    public void sortUsingLambda(List<Integer> indexs) {\n        Collections.sort(indexs, Integer::compareTo);\n    }\n```\n对数组从小到大排序\n```java\n    public void sortUsingLambda(List<Integer> indexs) {\n        Collections.sort(indexs, (s1, s2) -> s2.compareTo(s1));\n    }\n```\n从小到大简洁实现\n\n```java\n    public void sortUsingLambda(List<Integer> indexs) {\n        Collections.sort(indexs, Comparator.reverseOrder());\n    }\n```\n\n## 二，list转map\n**①：取list中某2个字段作为Map的K,V**\n```java\npublic Map<Long, String> getIdNameMap(List<Account> accounts) {\n    return accounts.stream().collect(Collectors.toMap(Account::getId, Account::getUsername));\n}\n```\n**②：将id和实体Bean做为K,V**\n```java\npublic Map<Long, Account> getIdAccountMap(List<Account> accounts) {\n    return accounts.stream().collect(Collectors.toMap(Account::getId, account -> account));\n}\n```\n或者这样写\n```java\npublic Map<Long, Account> getIdAccountMap(List<Account> accounts) {\n    return accounts.stream().collect(Collectors.toMap(Account::getId, Function.identity()));\n}\n```\naccount -> account是一个返回本身的lambda表达式，后面的使用Function接口中的一个默认方法代替，使整个方法更简洁优雅。\n**③：key存在重复记录时处理**\n\n```java\npublic Map<String, Account> getNameAccountMap(List<Account> accounts) {\n    return accounts.stream().collect(Collectors.toMap(Account::getUsername, Function.identity(), (key1, key2) -> key2));\n}\n```\n**④：使用某个具体的Map类来保存，如保存时使用LinkedHashMap**\n\n```java\npublic Map<String, Account> getNameAccountMap(List<Account> accounts) {\n    return accounts.stream().collect(Collectors.toMap(Account::getUsername, Function.identity(), (key1, key2) -> key2, LinkedHashMap::new));\n}\n```\n**⑤：List<Object>转List<String,Map<String, String>>**\n\n```java\npublic Map<String,List<MCode>> getCodeListMap(){\n        if(CollectionUtils.isEmpty(codeListMap)){\n                List<MCode> codeList = this.getCodeList();\n                Set<String> keySet = codeList.stream().map(code -> code.getCodeKbn()).collect(Collectors.toSet());\n                Iterator<String> it = keySet.iterator();\n                while(it.hasNext()) {\n                        String key = it.next();\n                        codeListMap.put(key, codeList.stream().filter(code -> code.getCodeKbn().equals(key)).collect(Collectors.toList()));\n                }\n        }\n        return codeListMap;\n}\n```\n\n三，Map转List\n\n```java\nMap<String, String> map = new HashMap<>();\n// Convert all Map keys to a List\nList<String> result = new ArrayList(map.keySet());\n// Convert all Map values to a List\nList<String> result2 = new ArrayList(map.values());\n// Java 8, Convert all Map keys to a List\nList<String> result3 = map.keySet().stream()\n\t.collect(Collectors.toList());\n// Java 8, Convert all Map values  to a List\nList<String> result4 = map.values().stream()\n\t.collect(Collectors.toList());\n// Java 8, seem a bit long, but you can enjoy the Stream features like filter and etc.\nList<String> result5 = map.values().stream()\n\t.filter(x -> !\"apple\".equalsIgnoreCase(x))\n\t.collect(Collectors.toList());\n// Java 8, split a map into 2 List, it works!\n// refer example 3 below\n```\n\n","slug":"lambda表达式","published":1,"date":"2020-03-06T08:54:58.317Z","updated":"2020-03-22T07:40:21.675Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck82rwpmh000dg52w78wkgc1c","content":"<html><head></head><body><h2 id=\"一，排序\"><a href=\"#一，排序\" class=\"headerlink\" title=\"一，排序\"></a>一，排序</h2><p>对数组从小到大排序</p>\n<figure class=\"highlight java hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sortUsingLambda</span><span class=\"hljs-params\">(List<Integer> indexs)</span> </span>{</span><br><span class=\"line\">    Collections.sort(indexs, (s1, s2) -> s1.compareTo(s2));</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>更简洁的实现方式</p>\n<figure class=\"highlight java hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sortUsingLambda</span><span class=\"hljs-params\">(List<Integer> indexs)</span> </span>{</span><br><span class=\"line\">    Collections.sort(indexs, Integer::compareTo);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>对数组从小到大排序</p>\n<figure class=\"highlight java hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sortUsingLambda</span><span class=\"hljs-params\">(List<Integer> indexs)</span> </span>{</span><br><span class=\"line\">    Collections.sort(indexs, (s1, s2) -> s2.compareTo(s1));</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>从小到大简洁实现</p>\n<figure class=\"highlight java hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sortUsingLambda</span><span class=\"hljs-params\">(List<Integer> indexs)</span> </span>{</span><br><span class=\"line\">    Collections.sort(indexs, Comparator.reverseOrder());</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"二，list转map\"><a href=\"#二，list转map\" class=\"headerlink\" title=\"二，list转map\"></a>二，list转map</h2><p><strong>①：取list中某2个字段作为Map的K,V</strong></p>\n<figure class=\"highlight java hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Map<Long, String> <span class=\"hljs-title\">getIdNameMap</span><span class=\"hljs-params\">(List<Account> accounts)</span> </span>{</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> accounts.stream().collect(Collectors.toMap(Account::getId, Account::getUsername));</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p><strong>②：将id和实体Bean做为K,V</strong></p>\n<figure class=\"highlight java hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Map<Long, Account> <span class=\"hljs-title\">getIdAccountMap</span><span class=\"hljs-params\">(List<Account> accounts)</span> </span>{</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> accounts.stream().collect(Collectors.toMap(Account::getId, account -> account));</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>或者这样写</p>\n<figure class=\"highlight java hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Map<Long, Account> <span class=\"hljs-title\">getIdAccountMap</span><span class=\"hljs-params\">(List<Account> accounts)</span> </span>{</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> accounts.stream().collect(Collectors.toMap(Account::getId, Function.identity()));</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>account -> account是一个返回本身的lambda表达式，后面的使用Function接口中的一个默认方法代替，使整个方法更简洁优雅。<br><strong>③：key存在重复记录时处理</strong></p>\n<figure class=\"highlight java hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Map<String, Account> <span class=\"hljs-title\">getNameAccountMap</span><span class=\"hljs-params\">(List<Account> accounts)</span> </span>{</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> accounts.stream().collect(Collectors.toMap(Account::getUsername, Function.identity(), (key1, key2) -> key2));</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p><strong>④：使用某个具体的Map类来保存，如保存时使用LinkedHashMap</strong></p>\n<figure class=\"highlight java hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Map<String, Account> <span class=\"hljs-title\">getNameAccountMap</span><span class=\"hljs-params\">(List<Account> accounts)</span> </span>{</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> accounts.stream().collect(Collectors.toMap(Account::getUsername, Function.identity(), (key1, key2) -> key2, LinkedHashMap::<span class=\"hljs-keyword\">new</span>));</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p><strong>⑤：List<object>转List<String,Map<String, String>><p></p>\n<figure class=\"highlight java hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">public</span> Map<String,List<MCode>> getCodeListMap(){</span><br><span class=\"line\">        <span class=\"hljs-keyword\">if</span>(CollectionUtils.isEmpty(codeListMap)){</span><br><span class=\"line\">                List<MCode> codeList = <span class=\"hljs-keyword\">this</span>.getCodeList();</span><br><span class=\"line\">                Set<String> keySet = codeList.stream().map(code -> code.getCodeKbn()).collect(Collectors.toSet());</span><br><span class=\"line\">                Iterator<String> it = keySet.iterator();</span><br><span class=\"line\">                <span class=\"hljs-keyword\">while</span>(it.hasNext()) {</span><br><span class=\"line\">                        String key = it.next();</span><br><span class=\"line\">                        codeListMap.put(key, codeList.stream().filter(code -> code.getCodeKbn().equals(key)).collect(Collectors.toList()));</span><br><span class=\"line\">                }</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"hljs-keyword\">return</span> codeListMap;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>三，Map转List</p>\n<figure class=\"highlight java hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map<String, String> map = <span class=\"hljs-keyword\">new</span> HashMap<>();</span><br><span class=\"line\"><span class=\"hljs-comment\">// Convert all Map keys to a List</span></span><br><span class=\"line\">List<String> result = <span class=\"hljs-keyword\">new</span> ArrayList(map.keySet());</span><br><span class=\"line\"><span class=\"hljs-comment\">// Convert all Map values to a List</span></span><br><span class=\"line\">List<String> result2 = <span class=\"hljs-keyword\">new</span> ArrayList(map.values());</span><br><span class=\"line\"><span class=\"hljs-comment\">// Java 8, Convert all Map keys to a List</span></span><br><span class=\"line\">List<String> result3 = map.keySet().stream()</span><br><span class=\"line\">\t.collect(Collectors.toList());</span><br><span class=\"line\"><span class=\"hljs-comment\">// Java 8, Convert all Map values  to a List</span></span><br><span class=\"line\">List<String> result4 = map.values().stream()</span><br><span class=\"line\">\t.collect(Collectors.toList());</span><br><span class=\"line\"><span class=\"hljs-comment\">// Java 8, seem a bit long, but you can enjoy the Stream features like filter and etc.</span></span><br><span class=\"line\">List<String> result5 = map.values().stream()</span><br><span class=\"line\">\t.filter(x -> !<span class=\"hljs-string\">\"apple\"</span>.equalsIgnoreCase(x))</span><br><span class=\"line\">\t.collect(Collectors.toList());</span><br><span class=\"line\"><span class=\"hljs-comment\">// Java 8, split a map into 2 List, it works!</span></span><br><span class=\"line\"><span class=\"hljs-comment\">// refer example 3 below</span></span><br></pre></td></tr></tbody></table></figure>\n\n</object></strong></p></body></html>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一，排序\"><a href=\"#一，排序\" class=\"headerlink\" title=\"一，排序\"></a>一，排序</h2><p>对数组从小到大排序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sortUsingLambda</span><span class=\"params\">(List&lt;Integer&gt; indexs)</span> </span>&#123;</span><br><span class=\"line\">    Collections.sort(indexs, (s1, s2) -&gt; s1.compareTo(s2));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>更简洁的实现方式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sortUsingLambda</span><span class=\"params\">(List&lt;Integer&gt; indexs)</span> </span>&#123;</span><br><span class=\"line\">    Collections.sort(indexs, Integer::compareTo);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对数组从小到大排序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sortUsingLambda</span><span class=\"params\">(List&lt;Integer&gt; indexs)</span> </span>&#123;</span><br><span class=\"line\">    Collections.sort(indexs, (s1, s2) -&gt; s2.compareTo(s1));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从小到大简洁实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sortUsingLambda</span><span class=\"params\">(List&lt;Integer&gt; indexs)</span> </span>&#123;</span><br><span class=\"line\">    Collections.sort(indexs, Comparator.reverseOrder());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二，list转map\"><a href=\"#二，list转map\" class=\"headerlink\" title=\"二，list转map\"></a>二，list转map</h2><p><strong>①：取list中某2个字段作为Map的K,V</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Map&lt;Long, String&gt; <span class=\"title\">getIdNameMap</span><span class=\"params\">(List&lt;Account&gt; accounts)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> accounts.stream().collect(Collectors.toMap(Account::getId, Account::getUsername));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>②：将id和实体Bean做为K,V</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Map&lt;Long, Account&gt; <span class=\"title\">getIdAccountMap</span><span class=\"params\">(List&lt;Account&gt; accounts)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> accounts.stream().collect(Collectors.toMap(Account::getId, account -&gt; account));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或者这样写</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Map&lt;Long, Account&gt; <span class=\"title\">getIdAccountMap</span><span class=\"params\">(List&lt;Account&gt; accounts)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> accounts.stream().collect(Collectors.toMap(Account::getId, Function.identity()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>account -&gt; account是一个返回本身的lambda表达式，后面的使用Function接口中的一个默认方法代替，使整个方法更简洁优雅。<br><strong>③：key存在重复记录时处理</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Account&gt; <span class=\"title\">getNameAccountMap</span><span class=\"params\">(List&lt;Account&gt; accounts)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> accounts.stream().collect(Collectors.toMap(Account::getUsername, Function.identity(), (key1, key2) -&gt; key2));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>④：使用某个具体的Map类来保存，如保存时使用LinkedHashMap</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Account&gt; <span class=\"title\">getNameAccountMap</span><span class=\"params\">(List&lt;Account&gt; accounts)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> accounts.stream().collect(Collectors.toMap(Account::getUsername, Function.identity(), (key1, key2) -&gt; key2, LinkedHashMap::<span class=\"keyword\">new</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>⑤：List<Object>转List&lt;String,Map&lt;String, String&gt;&gt;</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Map&lt;String,List&lt;MCode&gt;&gt; getCodeListMap()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(CollectionUtils.isEmpty(codeListMap))&#123;</span><br><span class=\"line\">                List&lt;MCode&gt; codeList = <span class=\"keyword\">this</span>.getCodeList();</span><br><span class=\"line\">                Set&lt;String&gt; keySet = codeList.stream().map(code -&gt; code.getCodeKbn()).collect(Collectors.toSet());</span><br><span class=\"line\">                Iterator&lt;String&gt; it = keySet.iterator();</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(it.hasNext()) &#123;</span><br><span class=\"line\">                        String key = it.next();</span><br><span class=\"line\">                        codeListMap.put(key, codeList.stream().filter(code -&gt; code.getCodeKbn().equals(key)).collect(Collectors.toList()));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> codeListMap;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>三，Map转List</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, String&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"><span class=\"comment\">// Convert all Map keys to a List</span></span><br><span class=\"line\">List&lt;String&gt; result = <span class=\"keyword\">new</span> ArrayList(map.keySet());</span><br><span class=\"line\"><span class=\"comment\">// Convert all Map values to a List</span></span><br><span class=\"line\">List&lt;String&gt; result2 = <span class=\"keyword\">new</span> ArrayList(map.values());</span><br><span class=\"line\"><span class=\"comment\">// Java 8, Convert all Map keys to a List</span></span><br><span class=\"line\">List&lt;String&gt; result3 = map.keySet().stream()</span><br><span class=\"line\">\t.collect(Collectors.toList());</span><br><span class=\"line\"><span class=\"comment\">// Java 8, Convert all Map values  to a List</span></span><br><span class=\"line\">List&lt;String&gt; result4 = map.values().stream()</span><br><span class=\"line\">\t.collect(Collectors.toList());</span><br><span class=\"line\"><span class=\"comment\">// Java 8, seem a bit long, but you can enjoy the Stream features like filter and etc.</span></span><br><span class=\"line\">List&lt;String&gt; result5 = map.values().stream()</span><br><span class=\"line\">\t.filter(x -&gt; !<span class=\"string\">\"apple\"</span>.equalsIgnoreCase(x))</span><br><span class=\"line\">\t.collect(Collectors.toList());</span><br><span class=\"line\"><span class=\"comment\">// Java 8, split a map into 2 List, it works!</span></span><br><span class=\"line\"><span class=\"comment\">// refer example 3 below</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"Git如何回退版本","toc":true,"thumbnail":"/logo/java.jpg","_content":"<div id=\"article_content\" class=\"article_content clearfix\">\n            <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-833878f763.css\">\n                                        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-833878f763.css\">\n                <div class=\"htmledit_views\" id=\"content_views\">\n                                            <p id=\"main-toc\"><strong>目录</strong></p>\n\n<p id=\"1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E5%9E%83%E5%9C%BE-toc\" style=\"margin-left:0px;\"><a href=\"#1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E5%9E%83%E5%9C%BE\" rel=\"nofollow\" target=\"_self\">1、什么是垃圾</a></p>\n\n<p id=\"2%E3%80%81%E5%A6%82%E4%BD%95%E5%AE%9A%E4%BD%8D%E5%9E%83%E5%9C%BE-toc\" style=\"margin-left:0px;\"><a href=\"#2%E3%80%81%E5%A6%82%E4%BD%95%E5%AE%9A%E4%BD%8D%E5%9E%83%E5%9C%BE\" rel=\"nofollow\" target=\"_self\">2、如何定位垃圾</a></p>\n\n<p id=\"reference%20count-toc\" style=\"margin-left:40px;\"><a href=\"#reference%20count\" rel=\"nofollow\" target=\"_self\">reference count</a></p>\n\n<p id=\"Root%20Searching-toc\" style=\"margin-left:40px;\"><a href=\"#Root%20Searching\" rel=\"nofollow\" target=\"_self\">Root Searching</a></p>\n\n<p id=\"3%E3%80%81%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95-toc\" style=\"margin-left:0px;\"><a href=\"#3%E3%80%81%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95\" rel=\"nofollow\" target=\"_self\">3、常见的垃圾回收算法</a></p>\n\n<p id=\"Mark-Sweep(%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4)-toc\" style=\"margin-left:40px;\"><a href=\"#Mark-Sweep(%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4)\" rel=\"nofollow\" target=\"_self\">Mark-Sweep(标记清除)</a></p>\n\n<p id=\"Copying(%E6%8B%B7%E8%B4%9D%E7%AE%97%E6%B3%95%EF%BC%89-toc\" style=\"margin-left:40px;\"><a href=\"#Copying(%E6%8B%B7%E8%B4%9D%E7%AE%97%E6%B3%95%EF%BC%89\" rel=\"nofollow\" target=\"_self\">Copying(拷贝算法）</a></p>\n\n<p id=\"Mark-Compact%EF%BC%88%E6%A0%87%E8%AE%B0%E5%8E%8B%E7%BC%A9)-toc\" style=\"margin-left:40px;\"><a href=\"#Mark-Compact%EF%BC%88%E6%A0%87%E8%AE%B0%E5%8E%8B%E7%BC%A9)\" rel=\"nofollow\" target=\"_self\">Mark-Compact（标记压缩)</a><a href=\"#%E2%80%8B\" rel=\"nofollow\" target=\"_self\">​</a></p>\n\n<p id=\"4%E3%80%81JVM%E5%86%85%E5%AD%98%E5%88%86%E4%BB%A3%E6%A8%A1%E5%9E%8B(%E7%94%A8%E4%BA%8E%E5%88%86%E4%BB%A3%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95%EF%BC%89-toc\" style=\"margin-left:0px;\"><a href=\"#4%E3%80%81JVM%E5%86%85%E5%AD%98%E5%88%86%E4%BB%A3%E6%A8%A1%E5%9E%8B(%E7%94%A8%E4%BA%8E%E5%88%86%E4%BB%A3%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95%EF%BC%89\" rel=\"nofollow\" target=\"_self\">4、JVM内存分代模型(用于分代垃圾回收算法）</a></p>\n\n<p id=\"%E5%A0%86%E5%86%85%E5%AD%98%E9%80%BB%E8%BE%91%E5%88%86%E5%8C%BA-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%A0%86%E5%86%85%E5%AD%98%E9%80%BB%E8%BE%91%E5%88%86%E5%8C%BA\" rel=\"nofollow\" target=\"_self\">堆内存逻辑分区</a></p>\n\n<p id=\"5%E3%80%81%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8-toc\" style=\"margin-left:0px;\"><a href=\"#5%E3%80%81%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8\" rel=\"nofollow\" target=\"_self\">5、垃圾回收器</a></p>\n\n<p id=\"Serial-toc\" style=\"margin-left:40px;\"><a href=\"#Serial\" rel=\"nofollow\" target=\"_self\">Serial</a></p>\n\n<p id=\"Parallel%20Scavenge-toc\" style=\"margin-left:40px;\"><a href=\"#Parallel%20Scavenge\" rel=\"nofollow\" target=\"_self\">Parallel Scavenge</a></p>\n\n<p id=\"ParNew-toc\" style=\"margin-left:40px;\"><a href=\"#ParNew\" rel=\"nofollow\" target=\"_self\">ParNew</a></p>\n\n<p id=\"SerialOld-toc\" style=\"margin-left:40px;\"><a href=\"#SerialOld\" rel=\"nofollow\" target=\"_self\">SerialOld</a></p>\n\n<p id=\"Parallel%20Old-toc\" style=\"margin-left:40px;\"><a href=\"#Parallel%20Old\" rel=\"nofollow\" target=\"_self\">Parallel Old</a></p>\n\n<p id=\"CMS-toc\" style=\"margin-left:40px;\"><a href=\"#CMS\" rel=\"nofollow\" target=\"_self\">CMS</a></p>\n\n<p id=\"6%E3%80%81JVM%E5%8F%82%E6%95%B0-toc\" style=\"margin-left:0px;\"><a href=\"#6%E3%80%81JVM%E5%8F%82%E6%95%B0\" rel=\"nofollow\" target=\"_self\">6、JVM参数</a></p>\n\n<p id=\"7%E3%80%81%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE-toc\" style=\"margin-left:0px;\"><a href=\"#7%E3%80%81%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE\" rel=\"nofollow\" target=\"_self\">7、思维导图</a></p>\n\n<hr id=\"hr-toc\"><h1 id=\"1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E5%9E%83%E5%9C%BE\"><a name=\"t0\"></a><a name=\"t0\"></a>1、什么是垃圾</h1>\n\n<p>内存分配与回收方式：</p>\n\n<ul><li>\n\t<p>C语言：malloc、free</p>\n\t</li>\n\t<li>\n\t<p>C++：new、delete</p>\n\t</li>\n\t<li>\n\t<p>Java：new&nbsp; 自动回收内存</p>\n\t</li>\n</ul><p>自动回收内存系统不容易出错，手动回收内存，容易出现以下的错误：</p>\n\n<ul><li>\n\t<p>忘记回收</p>\n\t</li>\n\t<li>\n\t<p>多次回收</p>\n\t</li>\n</ul><p>垃圾的定义：没有任何引用指向的一个对象或者多个对象(循环引用）。</p>\n\n<p><img alt=\"\" height=\"263\" src=\"https://img-blog.csdnimg.cn/20200218153041603.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"489\"></p>\n\n<p>当把成员变量设置为空(null)之后，不再指向任何引用对象，那么该对象就被称作垃圾：</p>\n\n<h2 id=\"%E2%80%8B\"><a name=\"t1\"></a><img alt=\"\" height=\"259\" src=\"https://img-blog.csdnimg.cn/20200218154813459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"503\"></h2>\n\n<p>还有一种情况，多个对象之间互相引用，但是没有其他的引用指向这个循环的对象。&nbsp;&nbsp;</p>\n\n<h2><a name=\"t2\"></a><img alt=\"\" height=\"320\" src=\"https://img-blog.csdnimg.cn/20200218155228678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"503\"></h2>\n\n<h1 id=\"2%E3%80%81%E5%A6%82%E4%BD%95%E5%AE%9A%E4%BD%8D%E5%9E%83%E5%9C%BE\"><a name=\"t3\"></a><a name=\"t3\"></a>2、如何定位垃圾</h1>\n\n<ul><li>\n\t<h2 id=\"reference%20count\"><a name=\"t4\"></a><a name=\"t4\"></a>reference count</h2>\n\t</li>\n</ul><h2><a name=\"t5\"></a><img alt=\"\" height=\"381\" src=\"https://img-blog.csdnimg.cn/20200218160722764.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"508\"></h2>\n\n<p>当引用计数变为0的时候，这个对象就成为垃圾了。但是引用计数不能解决对象循环引用</p>\n\n<p>如下：</p>\n\n<p><img alt=\"\" height=\"320\" src=\"https://img-blog.csdnimg.cn/20200218155228678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"503\"></p>\n\n<p>每个引用计数都是1，但是它们全部是垃圾，所以用引用计数的方式的话，这些垃圾就找不到了，会发生内存泄漏。</p>\n\n<ul><li>\n\t<h2 id=\"Root%20Searching\"><a name=\"t6\"></a><a name=\"t6\"></a>Root Searching</h2>\n\t</li>\n</ul><p>根可达或者根搜索算法。</p>\n\n<p>通过程序找到一些根对象，通过根对象找到它所连接的那些对象不是垃圾，其他的都是垃圾。</p>\n\n<p>Roots：线程栈变量、静态变量、常量池、JNI指针</p>\n\n<h2><a name=\"t7\"></a><img alt=\"\" height=\"334\" src=\"https://img-blog.csdnimg.cn/20200218163811236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"684\"></h2>\n\n<h1 id=\"3%E3%80%81%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95\"><a name=\"t8\"></a><a name=\"t8\"></a>3、常见的垃圾回收算法</h1>\n\n<ul><li>\n\t<h2 id=\"Mark-Sweep(%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4)\"><a name=\"t9\"></a><a name=\"t9\"></a>Mark-Sweep(标记清除)</h2>\n\t</li>\n</ul><p><img alt=\"\" height=\"461\" src=\"https://img-blog.csdnimg.cn/2020021817055046.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"698\"></p>\n\n<p>将可回收的对象标记为非垃圾。</p>\n\n<p>缺点：位置不连续，产生内存碎片。</p>\n\n<ul><li>\n\t<h2 id=\"Copying(%E6%8B%B7%E8%B4%9D%E7%AE%97%E6%B3%95%EF%BC%89\"><a name=\"t10\"></a><a name=\"t10\"></a>Copying(拷贝算法）</h2>\n\t</li>\n</ul><p><img alt=\"\" height=\"409\" src=\"https://img-blog.csdnimg.cn/20200218171626281.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"697\"></p>\n\n<p>内存一分为二，将存活对象复制到未使用的内存中，原内存全部标记为可使用；新分配内存时先分配存活对象所在的那段内存，垃圾回收时，重复上述操作。</p>\n\n<p>特点：没有碎片，但是内浪费空间。最大的问题：内存浪费。</p>\n\n<ul><li>\n\t<h2 id=\"Mark-Compact%EF%BC%88%E6%A0%87%E8%AE%B0%E5%8E%8B%E7%BC%A9)\"><a name=\"t11\"></a><a name=\"t11\"></a>Mark-Compact（标记压缩)</h2>\n\t</li>\n</ul><h2><a name=\"t12\"></a><img alt=\"\" height=\"460\" src=\"https://img-blog.csdnimg.cn/20200218174827773.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"691\"></h2>\n\n<p>将存活对象依次复制到垃圾对象和未使用的区域中，结合了标记清除和拷贝的做法，但是效率比copy略低。</p>\n\n<p>三种方法找垃圾的效率是一致的，区别在于找到垃圾后对其进行整理的方式。拷贝算法是内存拷贝，是线性地址的拷贝，速度很快的，效率很高。但是压缩算法却不这么简单，因为任意一个内存进行移动时，如果是多线程， 都要进行线程同步；如果是单线程，那单线程的效率本来就低。 所以任何一块内存挪动都要进行线程同步，所以效率肯定是很低的。</p>\n\n<h1 id=\"4%E3%80%81JVM%E5%86%85%E5%AD%98%E5%88%86%E4%BB%A3%E6%A8%A1%E5%9E%8B(%E7%94%A8%E4%BA%8E%E5%88%86%E4%BB%A3%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95%EF%BC%89\"><a name=\"t13\"></a><a name=\"t13\"></a>4、JVM内存分代模型(用于分代垃圾回收算法）</h1>\n\n<p>目前，生产环境中普遍使用的是JDK1.7或JDK1.8，根据JDK版本不同，分代也不同。</p>\n\n<p>JVM中分代：新生代+老年代+永久代(JDK1.7)/元数据区(JDK1.8)Metaspace。</p>\n\n<ul><li>永久代和元数据区是装载Class的，将硬盘上的Class对象load到内存的时候，装载了永久代或者元数据区域，具体放在哪里区别于使用的JDK版本</li>\n\t<li>永久代必须指定大小限制，而元数据可以设置，也可不设置，无上限(受限于物理内存）</li>\n\t<li>字符串常量在JDK1.7中，是放在永久代区域；而JDK1.8中，是放在堆里</li>\n\t<li>MethodArea是一个逻辑概念，并不是指的一个区域，在JDK1.7中对应的就是永久代，JDK1.8中对应的是元数据</li>\n</ul><h2 id=\"%E5%A0%86%E5%86%85%E5%AD%98%E9%80%BB%E8%BE%91%E5%88%86%E5%8C%BA\"><a name=\"t14\"></a><a name=\"t14\"></a>堆内存逻辑分区</h2>\n\n<p><img alt=\"\" height=\"467\" src=\"https://img-blog.csdnimg.cn/20200220122652988.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"817\"></p>\n\n<ul><li>新生代中分了两类区域，eden和survivor，而survivor有两块。默认的比例，新生代：老年代=1：3，新生代中eden: survivor：survivor = 8:1:1。</li>\n</ul><p>之所以新生代中按照这个比例分配，是因为eden区在GC的时候，90%的对象都会被回收，剩下的存活对象在survivor区是可以放下的。</p>\n\n<p>当创建一个对象时，默认会去找eden区， 如果对象特别大，eden区装不下则直接进入老年代。</p>\n\n<p><span style=\"color:#f33b45;\"><strong>新生代 = Eden + 2个survivor区(survivor0、survivor1）</strong>：</span></p>\n\n<ul><li>YGC(Young GC)回收后，大多数的对象会被回收，活着的对象进入survivor0</li>\n\t<li>再次YGC，活着的对象eden+s0拷贝到s1，将eden和s0清空</li>\n\t<li>再次YGC，活着的对象eden+s1拷贝到s0，将eden和s1清空</li>\n\t<li>年龄足够-&gt;老年代(年龄足够：15，CMS 6)</li>\n\t<li>survivor区装不下的时候，装不下的部分直接进入老年代</li>\n</ul><p><span style=\"color:#f33b45;\"><strong>老年代：</strong></span></p>\n\n<ul><li>顽固份子</li>\n\t<li>老年代区域满了，就进行Full GC(简称FGC, FGC包括新生代和老年代同时GC)</li>\n</ul><p><span style=\"color:#f33b45;\"><strong>GC Tuning：</strong></span>尽量减少FGC。</p>\n\n<h1 id=\"5%E3%80%81%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8\"><a name=\"t15\"></a><a name=\"t15\"></a>5、垃圾回收器</h1>\n\n<p><img alt=\"\" height=\"414\" src=\"https://img-blog.csdnimg.cn/20200220125708117.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"863\"></p>\n\n<ul><li>Serial、ParNew、Parallel Scavenge是用于回收Young Generation</li>\n\t<li>CMS、Serial Old、Parallel Old是用于回收Old Generation</li>\n\t<li>G1、ZGC、Shenandoah不区分老年代和新生代。</li>\n\t<li>Epsilon是一个空的GC，仅仅用于调试JDK。</li>\n\t<li>图中的红色虚线表示可以配合使用。</li>\n</ul><h2 id=\"Serial\"><a name=\"t16\"></a><a name=\"t16\"></a>Serial</h2>\n\n<p><img alt=\"\" height=\"436\" src=\"https://img-blog.csdnimg.cn/20200220130215487.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"815\"></p>\n\n<p>垃圾回收的时候，程序是无法执行的。stop-the-world(STW)是停止程序运行，回收线程开始运行，回收结束后程序再接着运行。</p>\n\n<h2 id=\"Parallel%20Scavenge\"><a name=\"t17\"></a><a name=\"t17\"></a>Parallel Scavenge</h2>\n\n<p><img alt=\"\" height=\"471\" src=\"https://img-blog.csdnimg.cn/20200220130956610.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"808\"></p>\n\n<p>并行回收，多个线程同时进行垃圾回收。</p>\n\n<h2 id=\"ParNew\"><a name=\"t18\"></a><a name=\"t18\"></a>ParNew</h2>\n\n<p><img alt=\"\" height=\"474\" src=\"https://img-blog.csdnimg.cn/2020022013122529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"827\"></p>\n\n<p>配合CMS的年轻代并行回收。</p>\n\n<h2 id=\"SerialOld\"><a name=\"t19\"></a><a name=\"t19\"></a>SerialOld</h2>\n\n<p>单线程回收算法用于old区域</p>\n\n<h2 id=\"Parallel%20Old\"><a name=\"t20\"></a><a name=\"t20\"></a>Parallel Old</h2>\n\n<p>多线程回收算法用于old区域</p>\n\n<h2 id=\"CMS\"><a name=\"t21\"></a><a name=\"t21\"></a>CMS</h2>\n\n<p>ConcurrentMarkSweep，用于回收老年代，在垃圾回收的同时程序也能运行。(黄色的表示垃圾回收线程，蓝色表示程序执行线程）</p>\n\n<p><img alt=\"\" height=\"456\" src=\"https://img-blog.csdnimg.cn/20200220132715191.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"835\"></p>\n\n<p><img alt=\"\" height=\"445\" src=\"https://img-blog.csdnimg.cn/20200220133005356.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"836\"></p>\n\n<p>调优针对的是Serial、Parallel Scavenge和Serial Old、Parallel New，因为JDK1.8默认的垃圾回收：Parallel Scavenge + Parallel Old。</p>\n\n<h1 id=\"6%E3%80%81JVM%E5%8F%82%E6%95%B0\"><a name=\"t22\"></a><a name=\"t22\"></a>6、JVM参数</h1>\n\n<p>JVM的命令行参数参考：https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html</p>\n\n<p>JVM参数分类：</p>\n\n<ul><li>标准：-开头，所有的HotSpot都支持。 如：java -version</li>\n\t<li>非标准：-X开头，特定版本HotSpot支持特定命令</li>\n\t<li>不稳定：-XX开头，下个版本可能取消\n\t<ol><li>-XX: +PrintFlagsFinal &nbsp; --- 设置值（最终生效值)</li>\n\t\t<li>-XX:+PrintFlagsInitial &nbsp;--- 默认值</li>\n\t\t<li>-XX:+PrintCommandLineFlags ---命令行参数</li>\n\t</ol></li>\n</ul><h1 id=\"7%E3%80%81%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE\"><a name=\"t23\"></a><a name=\"t23\"></a>7、思维导图</h1>\n\n<p><img alt=\"\" src=\"https://img-blog.csdnimg.cn/20200220151948590.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\"></p>\n\n<p>参考文档：</p>\n\n<p><a href=\"https://blogs.oracle.com/jonthecollector/our-collectors\" rel=\"nofollow\">https://blogs.oracle.com/jonthecollector/our-collectors</a></p>\n\n<p><a href=\"https://blogs.oracle.com/jonthecollector/why-not-a-grand-unified-garbage-collector\" rel=\"nofollow\">https://blogs.oracle.com/jonthecollector/why-not-a-grand-unified-garbage-collector</a></p>\n","source":"_posts/jvm-GC-and-GC-Tuning.md","raw":"title: Git如何回退版本\ntoc: true\ncategories: java\ntags:\n  - java\nthumbnail: /logo/java.jpg\n---\n<div id=\"article_content\" class=\"article_content clearfix\">\n            <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-833878f763.css\">\n                                        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-833878f763.css\">\n                <div class=\"htmledit_views\" id=\"content_views\">\n                                            <p id=\"main-toc\"><strong>目录</strong></p>\n\n<p id=\"1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E5%9E%83%E5%9C%BE-toc\" style=\"margin-left:0px;\"><a href=\"#1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E5%9E%83%E5%9C%BE\" rel=\"nofollow\" target=\"_self\">1、什么是垃圾</a></p>\n\n<p id=\"2%E3%80%81%E5%A6%82%E4%BD%95%E5%AE%9A%E4%BD%8D%E5%9E%83%E5%9C%BE-toc\" style=\"margin-left:0px;\"><a href=\"#2%E3%80%81%E5%A6%82%E4%BD%95%E5%AE%9A%E4%BD%8D%E5%9E%83%E5%9C%BE\" rel=\"nofollow\" target=\"_self\">2、如何定位垃圾</a></p>\n\n<p id=\"reference%20count-toc\" style=\"margin-left:40px;\"><a href=\"#reference%20count\" rel=\"nofollow\" target=\"_self\">reference count</a></p>\n\n<p id=\"Root%20Searching-toc\" style=\"margin-left:40px;\"><a href=\"#Root%20Searching\" rel=\"nofollow\" target=\"_self\">Root Searching</a></p>\n\n<p id=\"3%E3%80%81%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95-toc\" style=\"margin-left:0px;\"><a href=\"#3%E3%80%81%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95\" rel=\"nofollow\" target=\"_self\">3、常见的垃圾回收算法</a></p>\n\n<p id=\"Mark-Sweep(%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4)-toc\" style=\"margin-left:40px;\"><a href=\"#Mark-Sweep(%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4)\" rel=\"nofollow\" target=\"_self\">Mark-Sweep(标记清除)</a></p>\n\n<p id=\"Copying(%E6%8B%B7%E8%B4%9D%E7%AE%97%E6%B3%95%EF%BC%89-toc\" style=\"margin-left:40px;\"><a href=\"#Copying(%E6%8B%B7%E8%B4%9D%E7%AE%97%E6%B3%95%EF%BC%89\" rel=\"nofollow\" target=\"_self\">Copying(拷贝算法）</a></p>\n\n<p id=\"Mark-Compact%EF%BC%88%E6%A0%87%E8%AE%B0%E5%8E%8B%E7%BC%A9)-toc\" style=\"margin-left:40px;\"><a href=\"#Mark-Compact%EF%BC%88%E6%A0%87%E8%AE%B0%E5%8E%8B%E7%BC%A9)\" rel=\"nofollow\" target=\"_self\">Mark-Compact（标记压缩)</a><a href=\"#%E2%80%8B\" rel=\"nofollow\" target=\"_self\">​</a></p>\n\n<p id=\"4%E3%80%81JVM%E5%86%85%E5%AD%98%E5%88%86%E4%BB%A3%E6%A8%A1%E5%9E%8B(%E7%94%A8%E4%BA%8E%E5%88%86%E4%BB%A3%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95%EF%BC%89-toc\" style=\"margin-left:0px;\"><a href=\"#4%E3%80%81JVM%E5%86%85%E5%AD%98%E5%88%86%E4%BB%A3%E6%A8%A1%E5%9E%8B(%E7%94%A8%E4%BA%8E%E5%88%86%E4%BB%A3%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95%EF%BC%89\" rel=\"nofollow\" target=\"_self\">4、JVM内存分代模型(用于分代垃圾回收算法）</a></p>\n\n<p id=\"%E5%A0%86%E5%86%85%E5%AD%98%E9%80%BB%E8%BE%91%E5%88%86%E5%8C%BA-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%A0%86%E5%86%85%E5%AD%98%E9%80%BB%E8%BE%91%E5%88%86%E5%8C%BA\" rel=\"nofollow\" target=\"_self\">堆内存逻辑分区</a></p>\n\n<p id=\"5%E3%80%81%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8-toc\" style=\"margin-left:0px;\"><a href=\"#5%E3%80%81%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8\" rel=\"nofollow\" target=\"_self\">5、垃圾回收器</a></p>\n\n<p id=\"Serial-toc\" style=\"margin-left:40px;\"><a href=\"#Serial\" rel=\"nofollow\" target=\"_self\">Serial</a></p>\n\n<p id=\"Parallel%20Scavenge-toc\" style=\"margin-left:40px;\"><a href=\"#Parallel%20Scavenge\" rel=\"nofollow\" target=\"_self\">Parallel Scavenge</a></p>\n\n<p id=\"ParNew-toc\" style=\"margin-left:40px;\"><a href=\"#ParNew\" rel=\"nofollow\" target=\"_self\">ParNew</a></p>\n\n<p id=\"SerialOld-toc\" style=\"margin-left:40px;\"><a href=\"#SerialOld\" rel=\"nofollow\" target=\"_self\">SerialOld</a></p>\n\n<p id=\"Parallel%20Old-toc\" style=\"margin-left:40px;\"><a href=\"#Parallel%20Old\" rel=\"nofollow\" target=\"_self\">Parallel Old</a></p>\n\n<p id=\"CMS-toc\" style=\"margin-left:40px;\"><a href=\"#CMS\" rel=\"nofollow\" target=\"_self\">CMS</a></p>\n\n<p id=\"6%E3%80%81JVM%E5%8F%82%E6%95%B0-toc\" style=\"margin-left:0px;\"><a href=\"#6%E3%80%81JVM%E5%8F%82%E6%95%B0\" rel=\"nofollow\" target=\"_self\">6、JVM参数</a></p>\n\n<p id=\"7%E3%80%81%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE-toc\" style=\"margin-left:0px;\"><a href=\"#7%E3%80%81%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE\" rel=\"nofollow\" target=\"_self\">7、思维导图</a></p>\n\n<hr id=\"hr-toc\"><h1 id=\"1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E5%9E%83%E5%9C%BE\"><a name=\"t0\"></a><a name=\"t0\"></a>1、什么是垃圾</h1>\n\n<p>内存分配与回收方式：</p>\n\n<ul><li>\n\t<p>C语言：malloc、free</p>\n\t</li>\n\t<li>\n\t<p>C++：new、delete</p>\n\t</li>\n\t<li>\n\t<p>Java：new&nbsp; 自动回收内存</p>\n\t</li>\n</ul><p>自动回收内存系统不容易出错，手动回收内存，容易出现以下的错误：</p>\n\n<ul><li>\n\t<p>忘记回收</p>\n\t</li>\n\t<li>\n\t<p>多次回收</p>\n\t</li>\n</ul><p>垃圾的定义：没有任何引用指向的一个对象或者多个对象(循环引用）。</p>\n\n<p><img alt=\"\" height=\"263\" src=\"https://img-blog.csdnimg.cn/20200218153041603.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"489\"></p>\n\n<p>当把成员变量设置为空(null)之后，不再指向任何引用对象，那么该对象就被称作垃圾：</p>\n\n<h2 id=\"%E2%80%8B\"><a name=\"t1\"></a><img alt=\"\" height=\"259\" src=\"https://img-blog.csdnimg.cn/20200218154813459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"503\"></h2>\n\n<p>还有一种情况，多个对象之间互相引用，但是没有其他的引用指向这个循环的对象。&nbsp;&nbsp;</p>\n\n<h2><a name=\"t2\"></a><img alt=\"\" height=\"320\" src=\"https://img-blog.csdnimg.cn/20200218155228678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"503\"></h2>\n\n<h1 id=\"2%E3%80%81%E5%A6%82%E4%BD%95%E5%AE%9A%E4%BD%8D%E5%9E%83%E5%9C%BE\"><a name=\"t3\"></a><a name=\"t3\"></a>2、如何定位垃圾</h1>\n\n<ul><li>\n\t<h2 id=\"reference%20count\"><a name=\"t4\"></a><a name=\"t4\"></a>reference count</h2>\n\t</li>\n</ul><h2><a name=\"t5\"></a><img alt=\"\" height=\"381\" src=\"https://img-blog.csdnimg.cn/20200218160722764.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"508\"></h2>\n\n<p>当引用计数变为0的时候，这个对象就成为垃圾了。但是引用计数不能解决对象循环引用</p>\n\n<p>如下：</p>\n\n<p><img alt=\"\" height=\"320\" src=\"https://img-blog.csdnimg.cn/20200218155228678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"503\"></p>\n\n<p>每个引用计数都是1，但是它们全部是垃圾，所以用引用计数的方式的话，这些垃圾就找不到了，会发生内存泄漏。</p>\n\n<ul><li>\n\t<h2 id=\"Root%20Searching\"><a name=\"t6\"></a><a name=\"t6\"></a>Root Searching</h2>\n\t</li>\n</ul><p>根可达或者根搜索算法。</p>\n\n<p>通过程序找到一些根对象，通过根对象找到它所连接的那些对象不是垃圾，其他的都是垃圾。</p>\n\n<p>Roots：线程栈变量、静态变量、常量池、JNI指针</p>\n\n<h2><a name=\"t7\"></a><img alt=\"\" height=\"334\" src=\"https://img-blog.csdnimg.cn/20200218163811236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"684\"></h2>\n\n<h1 id=\"3%E3%80%81%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95\"><a name=\"t8\"></a><a name=\"t8\"></a>3、常见的垃圾回收算法</h1>\n\n<ul><li>\n\t<h2 id=\"Mark-Sweep(%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4)\"><a name=\"t9\"></a><a name=\"t9\"></a>Mark-Sweep(标记清除)</h2>\n\t</li>\n</ul><p><img alt=\"\" height=\"461\" src=\"https://img-blog.csdnimg.cn/2020021817055046.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"698\"></p>\n\n<p>将可回收的对象标记为非垃圾。</p>\n\n<p>缺点：位置不连续，产生内存碎片。</p>\n\n<ul><li>\n\t<h2 id=\"Copying(%E6%8B%B7%E8%B4%9D%E7%AE%97%E6%B3%95%EF%BC%89\"><a name=\"t10\"></a><a name=\"t10\"></a>Copying(拷贝算法）</h2>\n\t</li>\n</ul><p><img alt=\"\" height=\"409\" src=\"https://img-blog.csdnimg.cn/20200218171626281.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"697\"></p>\n\n<p>内存一分为二，将存活对象复制到未使用的内存中，原内存全部标记为可使用；新分配内存时先分配存活对象所在的那段内存，垃圾回收时，重复上述操作。</p>\n\n<p>特点：没有碎片，但是内浪费空间。最大的问题：内存浪费。</p>\n\n<ul><li>\n\t<h2 id=\"Mark-Compact%EF%BC%88%E6%A0%87%E8%AE%B0%E5%8E%8B%E7%BC%A9)\"><a name=\"t11\"></a><a name=\"t11\"></a>Mark-Compact（标记压缩)</h2>\n\t</li>\n</ul><h2><a name=\"t12\"></a><img alt=\"\" height=\"460\" src=\"https://img-blog.csdnimg.cn/20200218174827773.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"691\"></h2>\n\n<p>将存活对象依次复制到垃圾对象和未使用的区域中，结合了标记清除和拷贝的做法，但是效率比copy略低。</p>\n\n<p>三种方法找垃圾的效率是一致的，区别在于找到垃圾后对其进行整理的方式。拷贝算法是内存拷贝，是线性地址的拷贝，速度很快的，效率很高。但是压缩算法却不这么简单，因为任意一个内存进行移动时，如果是多线程， 都要进行线程同步；如果是单线程，那单线程的效率本来就低。 所以任何一块内存挪动都要进行线程同步，所以效率肯定是很低的。</p>\n\n<h1 id=\"4%E3%80%81JVM%E5%86%85%E5%AD%98%E5%88%86%E4%BB%A3%E6%A8%A1%E5%9E%8B(%E7%94%A8%E4%BA%8E%E5%88%86%E4%BB%A3%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95%EF%BC%89\"><a name=\"t13\"></a><a name=\"t13\"></a>4、JVM内存分代模型(用于分代垃圾回收算法）</h1>\n\n<p>目前，生产环境中普遍使用的是JDK1.7或JDK1.8，根据JDK版本不同，分代也不同。</p>\n\n<p>JVM中分代：新生代+老年代+永久代(JDK1.7)/元数据区(JDK1.8)Metaspace。</p>\n\n<ul><li>永久代和元数据区是装载Class的，将硬盘上的Class对象load到内存的时候，装载了永久代或者元数据区域，具体放在哪里区别于使用的JDK版本</li>\n\t<li>永久代必须指定大小限制，而元数据可以设置，也可不设置，无上限(受限于物理内存）</li>\n\t<li>字符串常量在JDK1.7中，是放在永久代区域；而JDK1.8中，是放在堆里</li>\n\t<li>MethodArea是一个逻辑概念，并不是指的一个区域，在JDK1.7中对应的就是永久代，JDK1.8中对应的是元数据</li>\n</ul><h2 id=\"%E5%A0%86%E5%86%85%E5%AD%98%E9%80%BB%E8%BE%91%E5%88%86%E5%8C%BA\"><a name=\"t14\"></a><a name=\"t14\"></a>堆内存逻辑分区</h2>\n\n<p><img alt=\"\" height=\"467\" src=\"https://img-blog.csdnimg.cn/20200220122652988.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"817\"></p>\n\n<ul><li>新生代中分了两类区域，eden和survivor，而survivor有两块。默认的比例，新生代：老年代=1：3，新生代中eden: survivor：survivor = 8:1:1。</li>\n</ul><p>之所以新生代中按照这个比例分配，是因为eden区在GC的时候，90%的对象都会被回收，剩下的存活对象在survivor区是可以放下的。</p>\n\n<p>当创建一个对象时，默认会去找eden区， 如果对象特别大，eden区装不下则直接进入老年代。</p>\n\n<p><span style=\"color:#f33b45;\"><strong>新生代 = Eden + 2个survivor区(survivor0、survivor1）</strong>：</span></p>\n\n<ul><li>YGC(Young GC)回收后，大多数的对象会被回收，活着的对象进入survivor0</li>\n\t<li>再次YGC，活着的对象eden+s0拷贝到s1，将eden和s0清空</li>\n\t<li>再次YGC，活着的对象eden+s1拷贝到s0，将eden和s1清空</li>\n\t<li>年龄足够-&gt;老年代(年龄足够：15，CMS 6)</li>\n\t<li>survivor区装不下的时候，装不下的部分直接进入老年代</li>\n</ul><p><span style=\"color:#f33b45;\"><strong>老年代：</strong></span></p>\n\n<ul><li>顽固份子</li>\n\t<li>老年代区域满了，就进行Full GC(简称FGC, FGC包括新生代和老年代同时GC)</li>\n</ul><p><span style=\"color:#f33b45;\"><strong>GC Tuning：</strong></span>尽量减少FGC。</p>\n\n<h1 id=\"5%E3%80%81%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8\"><a name=\"t15\"></a><a name=\"t15\"></a>5、垃圾回收器</h1>\n\n<p><img alt=\"\" height=\"414\" src=\"https://img-blog.csdnimg.cn/20200220125708117.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"863\"></p>\n\n<ul><li>Serial、ParNew、Parallel Scavenge是用于回收Young Generation</li>\n\t<li>CMS、Serial Old、Parallel Old是用于回收Old Generation</li>\n\t<li>G1、ZGC、Shenandoah不区分老年代和新生代。</li>\n\t<li>Epsilon是一个空的GC，仅仅用于调试JDK。</li>\n\t<li>图中的红色虚线表示可以配合使用。</li>\n</ul><h2 id=\"Serial\"><a name=\"t16\"></a><a name=\"t16\"></a>Serial</h2>\n\n<p><img alt=\"\" height=\"436\" src=\"https://img-blog.csdnimg.cn/20200220130215487.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"815\"></p>\n\n<p>垃圾回收的时候，程序是无法执行的。stop-the-world(STW)是停止程序运行，回收线程开始运行，回收结束后程序再接着运行。</p>\n\n<h2 id=\"Parallel%20Scavenge\"><a name=\"t17\"></a><a name=\"t17\"></a>Parallel Scavenge</h2>\n\n<p><img alt=\"\" height=\"471\" src=\"https://img-blog.csdnimg.cn/20200220130956610.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"808\"></p>\n\n<p>并行回收，多个线程同时进行垃圾回收。</p>\n\n<h2 id=\"ParNew\"><a name=\"t18\"></a><a name=\"t18\"></a>ParNew</h2>\n\n<p><img alt=\"\" height=\"474\" src=\"https://img-blog.csdnimg.cn/2020022013122529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"827\"></p>\n\n<p>配合CMS的年轻代并行回收。</p>\n\n<h2 id=\"SerialOld\"><a name=\"t19\"></a><a name=\"t19\"></a>SerialOld</h2>\n\n<p>单线程回收算法用于old区域</p>\n\n<h2 id=\"Parallel%20Old\"><a name=\"t20\"></a><a name=\"t20\"></a>Parallel Old</h2>\n\n<p>多线程回收算法用于old区域</p>\n\n<h2 id=\"CMS\"><a name=\"t21\"></a><a name=\"t21\"></a>CMS</h2>\n\n<p>ConcurrentMarkSweep，用于回收老年代，在垃圾回收的同时程序也能运行。(黄色的表示垃圾回收线程，蓝色表示程序执行线程）</p>\n\n<p><img alt=\"\" height=\"456\" src=\"https://img-blog.csdnimg.cn/20200220132715191.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"835\"></p>\n\n<p><img alt=\"\" height=\"445\" src=\"https://img-blog.csdnimg.cn/20200220133005356.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"836\"></p>\n\n<p>调优针对的是Serial、Parallel Scavenge和Serial Old、Parallel New，因为JDK1.8默认的垃圾回收：Parallel Scavenge + Parallel Old。</p>\n\n<h1 id=\"6%E3%80%81JVM%E5%8F%82%E6%95%B0\"><a name=\"t22\"></a><a name=\"t22\"></a>6、JVM参数</h1>\n\n<p>JVM的命令行参数参考：https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html</p>\n\n<p>JVM参数分类：</p>\n\n<ul><li>标准：-开头，所有的HotSpot都支持。 如：java -version</li>\n\t<li>非标准：-X开头，特定版本HotSpot支持特定命令</li>\n\t<li>不稳定：-XX开头，下个版本可能取消\n\t<ol><li>-XX: +PrintFlagsFinal &nbsp; --- 设置值（最终生效值)</li>\n\t\t<li>-XX:+PrintFlagsInitial &nbsp;--- 默认值</li>\n\t\t<li>-XX:+PrintCommandLineFlags ---命令行参数</li>\n\t</ol></li>\n</ul><h1 id=\"7%E3%80%81%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE\"><a name=\"t23\"></a><a name=\"t23\"></a>7、思维导图</h1>\n\n<p><img alt=\"\" src=\"https://img-blog.csdnimg.cn/20200220151948590.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\"></p>\n\n<p>参考文档：</p>\n\n<p><a href=\"https://blogs.oracle.com/jonthecollector/our-collectors\" rel=\"nofollow\">https://blogs.oracle.com/jonthecollector/our-collectors</a></p>\n\n<p><a href=\"https://blogs.oracle.com/jonthecollector/why-not-a-grand-unified-garbage-collector\" rel=\"nofollow\">https://blogs.oracle.com/jonthecollector/why-not-a-grand-unified-garbage-collector</a></p>\n","slug":"jvm-GC-and-GC-Tuning","published":1,"date":"2020-02-26T02:29:19.384Z","updated":"2020-03-22T07:40:21.667Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck82rwpmj000hg52wcvhf8lpg","content":"<html><head></head><body><div id=\"article_content\" class=\"article_content clearfix\">\n            <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-833878f763.css\">\n                                        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-833878f763.css\">\n                <div class=\"htmledit_views\" id=\"content_views\">\n                                            <p id=\"main-toc\"><strong>目录</strong></p>\n\n<p id=\"1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E5%9E%83%E5%9C%BE-toc\" style=\"margin-left:0px;\"><a href=\"#1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E5%9E%83%E5%9C%BE\" rel=\"nofollow\" target=\"_self\">1、什么是垃圾</a></p>\n\n<p id=\"2%E3%80%81%E5%A6%82%E4%BD%95%E5%AE%9A%E4%BD%8D%E5%9E%83%E5%9C%BE-toc\" style=\"margin-left:0px;\"><a href=\"#2%E3%80%81%E5%A6%82%E4%BD%95%E5%AE%9A%E4%BD%8D%E5%9E%83%E5%9C%BE\" rel=\"nofollow\" target=\"_self\">2、如何定位垃圾</a></p>\n\n<p id=\"reference%20count-toc\" style=\"margin-left:40px;\"><a href=\"#reference%20count\" rel=\"nofollow\" target=\"_self\">reference count</a></p>\n\n<p id=\"Root%20Searching-toc\" style=\"margin-left:40px;\"><a href=\"#Root%20Searching\" rel=\"nofollow\" target=\"_self\">Root Searching</a></p>\n\n<p id=\"3%E3%80%81%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95-toc\" style=\"margin-left:0px;\"><a href=\"#3%E3%80%81%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95\" rel=\"nofollow\" target=\"_self\">3、常见的垃圾回收算法</a></p>\n\n<p id=\"Mark-Sweep(%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4)-toc\" style=\"margin-left:40px;\"><a href=\"#Mark-Sweep(%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4)\" rel=\"nofollow\" target=\"_self\">Mark-Sweep(标记清除)</a></p>\n\n<p id=\"Copying(%E6%8B%B7%E8%B4%9D%E7%AE%97%E6%B3%95%EF%BC%89-toc\" style=\"margin-left:40px;\"><a href=\"#Copying(%E6%8B%B7%E8%B4%9D%E7%AE%97%E6%B3%95%EF%BC%89\" rel=\"nofollow\" target=\"_self\">Copying(拷贝算法）</a></p>\n\n<p id=\"Mark-Compact%EF%BC%88%E6%A0%87%E8%AE%B0%E5%8E%8B%E7%BC%A9)-toc\" style=\"margin-left:40px;\"><a href=\"#Mark-Compact%EF%BC%88%E6%A0%87%E8%AE%B0%E5%8E%8B%E7%BC%A9)\" rel=\"nofollow\" target=\"_self\">Mark-Compact（标记压缩)</a><a href=\"#%E2%80%8B\" rel=\"nofollow\" target=\"_self\">​</a></p>\n\n<p id=\"4%E3%80%81JVM%E5%86%85%E5%AD%98%E5%88%86%E4%BB%A3%E6%A8%A1%E5%9E%8B(%E7%94%A8%E4%BA%8E%E5%88%86%E4%BB%A3%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95%EF%BC%89-toc\" style=\"margin-left:0px;\"><a href=\"#4%E3%80%81JVM%E5%86%85%E5%AD%98%E5%88%86%E4%BB%A3%E6%A8%A1%E5%9E%8B(%E7%94%A8%E4%BA%8E%E5%88%86%E4%BB%A3%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95%EF%BC%89\" rel=\"nofollow\" target=\"_self\">4、JVM内存分代模型(用于分代垃圾回收算法）</a></p>\n\n<p id=\"%E5%A0%86%E5%86%85%E5%AD%98%E9%80%BB%E8%BE%91%E5%88%86%E5%8C%BA-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%A0%86%E5%86%85%E5%AD%98%E9%80%BB%E8%BE%91%E5%88%86%E5%8C%BA\" rel=\"nofollow\" target=\"_self\">堆内存逻辑分区</a></p>\n\n<p id=\"5%E3%80%81%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8-toc\" style=\"margin-left:0px;\"><a href=\"#5%E3%80%81%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8\" rel=\"nofollow\" target=\"_self\">5、垃圾回收器</a></p>\n\n<p id=\"Serial-toc\" style=\"margin-left:40px;\"><a href=\"#Serial\" rel=\"nofollow\" target=\"_self\">Serial</a></p>\n\n<p id=\"Parallel%20Scavenge-toc\" style=\"margin-left:40px;\"><a href=\"#Parallel%20Scavenge\" rel=\"nofollow\" target=\"_self\">Parallel Scavenge</a></p>\n\n<p id=\"ParNew-toc\" style=\"margin-left:40px;\"><a href=\"#ParNew\" rel=\"nofollow\" target=\"_self\">ParNew</a></p>\n\n<p id=\"SerialOld-toc\" style=\"margin-left:40px;\"><a href=\"#SerialOld\" rel=\"nofollow\" target=\"_self\">SerialOld</a></p>\n\n<p id=\"Parallel%20Old-toc\" style=\"margin-left:40px;\"><a href=\"#Parallel%20Old\" rel=\"nofollow\" target=\"_self\">Parallel Old</a></p>\n\n<p id=\"CMS-toc\" style=\"margin-left:40px;\"><a href=\"#CMS\" rel=\"nofollow\" target=\"_self\">CMS</a></p>\n\n<p id=\"6%E3%80%81JVM%E5%8F%82%E6%95%B0-toc\" style=\"margin-left:0px;\"><a href=\"#6%E3%80%81JVM%E5%8F%82%E6%95%B0\" rel=\"nofollow\" target=\"_self\">6、JVM参数</a></p>\n\n<p id=\"7%E3%80%81%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE-toc\" style=\"margin-left:0px;\"><a href=\"#7%E3%80%81%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE\" rel=\"nofollow\" target=\"_self\">7、思维导图</a></p>\n\n<hr id=\"hr-toc\"><h1 id=\"1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E5%9E%83%E5%9C%BE\"><a name=\"t0\"></a><a name=\"t0\"></a>1、什么是垃圾</h1>\n\n<p>内存分配与回收方式：</p>\n\n<ul><li>\n    <p>C语言：malloc、free</p>\n    </li>\n    <li>\n    <p>C++：new、delete</p>\n    </li>\n    <li>\n    <p>Java：new  自动回收内存</p>\n    </li>\n</ul><p>自动回收内存系统不容易出错，手动回收内存，容易出现以下的错误：</p>\n\n<ul><li>\n    <p>忘记回收</p>\n    </li>\n    <li>\n    <p>多次回收</p>\n    </li>\n</ul><p>垃圾的定义：没有任何引用指向的一个对象或者多个对象(循环引用）。</p>\n\n<p><img alt height=\"263\" src=\"https://img-blog.csdnimg.cn/20200218153041603.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"489\"></p>\n\n<p>当把成员变量设置为空(null)之后，不再指向任何引用对象，那么该对象就被称作垃圾：</p>\n\n<h2 id=\"%E2%80%8B\"><a name=\"t1\"></a><img alt height=\"259\" src=\"https://img-blog.csdnimg.cn/20200218154813459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"503\"></h2>\n\n<p>还有一种情况，多个对象之间互相引用，但是没有其他的引用指向这个循环的对象。  </p>\n\n<h2><a name=\"t2\"></a><img alt height=\"320\" src=\"https://img-blog.csdnimg.cn/20200218155228678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"503\"></h2>\n\n<h1 id=\"2%E3%80%81%E5%A6%82%E4%BD%95%E5%AE%9A%E4%BD%8D%E5%9E%83%E5%9C%BE\"><a name=\"t3\"></a><a name=\"t3\"></a>2、如何定位垃圾</h1>\n\n<ul><li>\n    <h2 id=\"reference%20count\"><a name=\"t4\"></a><a name=\"t4\"></a>reference count</h2>\n    </li>\n</ul><h2><a name=\"t5\"></a><img alt height=\"381\" src=\"https://img-blog.csdnimg.cn/20200218160722764.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"508\"></h2>\n\n<p>当引用计数变为0的时候，这个对象就成为垃圾了。但是引用计数不能解决对象循环引用</p>\n\n<p>如下：</p>\n\n<p><img alt height=\"320\" src=\"https://img-blog.csdnimg.cn/20200218155228678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"503\"></p>\n\n<p>每个引用计数都是1，但是它们全部是垃圾，所以用引用计数的方式的话，这些垃圾就找不到了，会发生内存泄漏。</p>\n\n<ul><li>\n    <h2 id=\"Root%20Searching\"><a name=\"t6\"></a><a name=\"t6\"></a>Root Searching</h2>\n    </li>\n</ul><p>根可达或者根搜索算法。</p>\n\n<p>通过程序找到一些根对象，通过根对象找到它所连接的那些对象不是垃圾，其他的都是垃圾。</p>\n\n<p>Roots：线程栈变量、静态变量、常量池、JNI指针</p>\n\n<h2><a name=\"t7\"></a><img alt height=\"334\" src=\"https://img-blog.csdnimg.cn/20200218163811236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"684\"></h2>\n\n<h1 id=\"3%E3%80%81%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95\"><a name=\"t8\"></a><a name=\"t8\"></a>3、常见的垃圾回收算法</h1>\n\n<ul><li>\n    <h2 id=\"Mark-Sweep(%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4)\"><a name=\"t9\"></a><a name=\"t9\"></a>Mark-Sweep(标记清除)</h2>\n    </li>\n</ul><p><img alt height=\"461\" src=\"https://img-blog.csdnimg.cn/2020021817055046.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"698\"></p>\n\n<p>将可回收的对象标记为非垃圾。</p>\n\n<p>缺点：位置不连续，产生内存碎片。</p>\n\n<ul><li>\n    <h2 id=\"Copying(%E6%8B%B7%E8%B4%9D%E7%AE%97%E6%B3%95%EF%BC%89\"><a name=\"t10\"></a><a name=\"t10\"></a>Copying(拷贝算法）</h2>\n    </li>\n</ul><p><img alt height=\"409\" src=\"https://img-blog.csdnimg.cn/20200218171626281.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"697\"></p>\n\n<p>内存一分为二，将存活对象复制到未使用的内存中，原内存全部标记为可使用；新分配内存时先分配存活对象所在的那段内存，垃圾回收时，重复上述操作。</p>\n\n<p>特点：没有碎片，但是内浪费空间。最大的问题：内存浪费。</p>\n\n<ul><li>\n    <h2 id=\"Mark-Compact%EF%BC%88%E6%A0%87%E8%AE%B0%E5%8E%8B%E7%BC%A9)\"><a name=\"t11\"></a><a name=\"t11\"></a>Mark-Compact（标记压缩)</h2>\n    </li>\n</ul><h2><a name=\"t12\"></a><img alt height=\"460\" src=\"https://img-blog.csdnimg.cn/20200218174827773.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"691\"></h2>\n\n<p>将存活对象依次复制到垃圾对象和未使用的区域中，结合了标记清除和拷贝的做法，但是效率比copy略低。</p>\n\n<p>三种方法找垃圾的效率是一致的，区别在于找到垃圾后对其进行整理的方式。拷贝算法是内存拷贝，是线性地址的拷贝，速度很快的，效率很高。但是压缩算法却不这么简单，因为任意一个内存进行移动时，如果是多线程， 都要进行线程同步；如果是单线程，那单线程的效率本来就低。 所以任何一块内存挪动都要进行线程同步，所以效率肯定是很低的。</p>\n\n<h1 id=\"4%E3%80%81JVM%E5%86%85%E5%AD%98%E5%88%86%E4%BB%A3%E6%A8%A1%E5%9E%8B(%E7%94%A8%E4%BA%8E%E5%88%86%E4%BB%A3%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95%EF%BC%89\"><a name=\"t13\"></a><a name=\"t13\"></a>4、JVM内存分代模型(用于分代垃圾回收算法）</h1>\n\n<p>目前，生产环境中普遍使用的是JDK1.7或JDK1.8，根据JDK版本不同，分代也不同。</p>\n\n<p>JVM中分代：新生代+老年代+永久代(JDK1.7)/元数据区(JDK1.8)Metaspace。</p>\n\n<ul><li>永久代和元数据区是装载Class的，将硬盘上的Class对象load到内存的时候，装载了永久代或者元数据区域，具体放在哪里区别于使用的JDK版本</li>\n    <li>永久代必须指定大小限制，而元数据可以设置，也可不设置，无上限(受限于物理内存）</li>\n    <li>字符串常量在JDK1.7中，是放在永久代区域；而JDK1.8中，是放在堆里</li>\n    <li>MethodArea是一个逻辑概念，并不是指的一个区域，在JDK1.7中对应的就是永久代，JDK1.8中对应的是元数据</li>\n</ul><h2 id=\"%E5%A0%86%E5%86%85%E5%AD%98%E9%80%BB%E8%BE%91%E5%88%86%E5%8C%BA\"><a name=\"t14\"></a><a name=\"t14\"></a>堆内存逻辑分区</h2>\n\n<p><img alt height=\"467\" src=\"https://img-blog.csdnimg.cn/20200220122652988.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"817\"></p>\n\n<ul><li>新生代中分了两类区域，eden和survivor，而survivor有两块。默认的比例，新生代：老年代=1：3，新生代中eden: survivor：survivor = 8:1:1。</li>\n</ul><p>之所以新生代中按照这个比例分配，是因为eden区在GC的时候，90%的对象都会被回收，剩下的存活对象在survivor区是可以放下的。</p>\n\n<p>当创建一个对象时，默认会去找eden区， 如果对象特别大，eden区装不下则直接进入老年代。</p>\n\n<p><span style=\"color:#f33b45;\"><strong>新生代 = Eden + 2个survivor区(survivor0、survivor1）</strong>：</span></p>\n\n<ul><li>YGC(Young GC)回收后，大多数的对象会被回收，活着的对象进入survivor0</li>\n    <li>再次YGC，活着的对象eden+s0拷贝到s1，将eden和s0清空</li>\n    <li>再次YGC，活着的对象eden+s1拷贝到s0，将eden和s1清空</li>\n    <li>年龄足够->老年代(年龄足够：15，CMS 6)</li>\n    <li>survivor区装不下的时候，装不下的部分直接进入老年代</li>\n</ul><p><span style=\"color:#f33b45;\"><strong>老年代：</strong></span></p>\n\n<ul><li>顽固份子</li>\n    <li>老年代区域满了，就进行Full GC(简称FGC, FGC包括新生代和老年代同时GC)</li>\n</ul><p><span style=\"color:#f33b45;\"><strong>GC Tuning：</strong></span>尽量减少FGC。</p>\n\n<h1 id=\"5%E3%80%81%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8\"><a name=\"t15\"></a><a name=\"t15\"></a>5、垃圾回收器</h1>\n\n<p><img alt height=\"414\" src=\"https://img-blog.csdnimg.cn/20200220125708117.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"863\"></p>\n\n<ul><li>Serial、ParNew、Parallel Scavenge是用于回收Young Generation</li>\n    <li>CMS、Serial Old、Parallel Old是用于回收Old Generation</li>\n    <li>G1、ZGC、Shenandoah不区分老年代和新生代。</li>\n    <li>Epsilon是一个空的GC，仅仅用于调试JDK。</li>\n    <li>图中的红色虚线表示可以配合使用。</li>\n</ul><h2 id=\"Serial\"><a name=\"t16\"></a><a name=\"t16\"></a>Serial</h2>\n\n<p><img alt height=\"436\" src=\"https://img-blog.csdnimg.cn/20200220130215487.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"815\"></p>\n\n<p>垃圾回收的时候，程序是无法执行的。stop-the-world(STW)是停止程序运行，回收线程开始运行，回收结束后程序再接着运行。</p>\n\n<h2 id=\"Parallel%20Scavenge\"><a name=\"t17\"></a><a name=\"t17\"></a>Parallel Scavenge</h2>\n\n<p><img alt height=\"471\" src=\"https://img-blog.csdnimg.cn/20200220130956610.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"808\"></p>\n\n<p>并行回收，多个线程同时进行垃圾回收。</p>\n\n<h2 id=\"ParNew\"><a name=\"t18\"></a><a name=\"t18\"></a>ParNew</h2>\n\n<p><img alt height=\"474\" src=\"https://img-blog.csdnimg.cn/2020022013122529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"827\"></p>\n\n<p>配合CMS的年轻代并行回收。</p>\n\n<h2 id=\"SerialOld\"><a name=\"t19\"></a><a name=\"t19\"></a>SerialOld</h2>\n\n<p>单线程回收算法用于old区域</p>\n\n<h2 id=\"Parallel%20Old\"><a name=\"t20\"></a><a name=\"t20\"></a>Parallel Old</h2>\n\n<p>多线程回收算法用于old区域</p>\n\n<h2 id=\"CMS\"><a name=\"t21\"></a><a name=\"t21\"></a>CMS</h2>\n\n<p>ConcurrentMarkSweep，用于回收老年代，在垃圾回收的同时程序也能运行。(黄色的表示垃圾回收线程，蓝色表示程序执行线程）</p>\n\n<p><img alt height=\"456\" src=\"https://img-blog.csdnimg.cn/20200220132715191.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"835\"></p>\n\n<p><img alt height=\"445\" src=\"https://img-blog.csdnimg.cn/20200220133005356.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"836\"></p>\n\n<p>调优针对的是Serial、Parallel Scavenge和Serial Old、Parallel New，因为JDK1.8默认的垃圾回收：Parallel Scavenge + Parallel Old。</p>\n\n<h1 id=\"6%E3%80%81JVM%E5%8F%82%E6%95%B0\"><a name=\"t22\"></a><a name=\"t22\"></a>6、JVM参数</h1>\n\n<p>JVM的命令行参数参考：https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html</p>\n\n<p>JVM参数分类：</p>\n\n<ul><li>标准：-开头，所有的HotSpot都支持。 如：java -version</li>\n    <li>非标准：-X开头，特定版本HotSpot支持特定命令</li>\n    <li>不稳定：-XX开头，下个版本可能取消\n    <ol><li>-XX: +PrintFlagsFinal   --- 设置值（最终生效值)</li>\n        <li>-XX:+PrintFlagsInitial  --- 默认值</li>\n        <li>-XX:+PrintCommandLineFlags ---命令行参数</li>\n    </ol></li>\n</ul><h1 id=\"7%E3%80%81%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE\"><a name=\"t23\"></a><a name=\"t23\"></a>7、思维导图</h1>\n\n<p><img alt src=\"https://img-blog.csdnimg.cn/20200220151948590.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\"></p>\n\n<p>参考文档：</p>\n\n<p><a href=\"https://blogs.oracle.com/jonthecollector/our-collectors\" target=\"_blank\" rel=\"nofollow noopener\">https://blogs.oracle.com/jonthecollector/our-collectors</a></p>\n\n<p><a href=\"https://blogs.oracle.com/jonthecollector/why-not-a-grand-unified-garbage-collector\" target=\"_blank\" rel=\"nofollow noopener\">https://blogs.oracle.com/jonthecollector/why-not-a-grand-unified-garbage-collector</a></p>\n</div></div></body></html>","site":{"data":{}},"excerpt":"","more":"<div id=\"article_content\" class=\"article_content clearfix\">\n            <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-833878f763.css\">\n                                        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-833878f763.css\">\n                <div class=\"htmledit_views\" id=\"content_views\">\n                                            <p id=\"main-toc\"><strong>目录</strong></p>\n\n<p id=\"1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E5%9E%83%E5%9C%BE-toc\" style=\"margin-left:0px;\"><a href=\"#1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E5%9E%83%E5%9C%BE\" rel=\"nofollow\" target=\"_self\">1、什么是垃圾</a></p>\n\n<p id=\"2%E3%80%81%E5%A6%82%E4%BD%95%E5%AE%9A%E4%BD%8D%E5%9E%83%E5%9C%BE-toc\" style=\"margin-left:0px;\"><a href=\"#2%E3%80%81%E5%A6%82%E4%BD%95%E5%AE%9A%E4%BD%8D%E5%9E%83%E5%9C%BE\" rel=\"nofollow\" target=\"_self\">2、如何定位垃圾</a></p>\n\n<p id=\"reference%20count-toc\" style=\"margin-left:40px;\"><a href=\"#reference%20count\" rel=\"nofollow\" target=\"_self\">reference count</a></p>\n\n<p id=\"Root%20Searching-toc\" style=\"margin-left:40px;\"><a href=\"#Root%20Searching\" rel=\"nofollow\" target=\"_self\">Root Searching</a></p>\n\n<p id=\"3%E3%80%81%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95-toc\" style=\"margin-left:0px;\"><a href=\"#3%E3%80%81%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95\" rel=\"nofollow\" target=\"_self\">3、常见的垃圾回收算法</a></p>\n\n<p id=\"Mark-Sweep(%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4)-toc\" style=\"margin-left:40px;\"><a href=\"#Mark-Sweep(%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4)\" rel=\"nofollow\" target=\"_self\">Mark-Sweep(标记清除)</a></p>\n\n<p id=\"Copying(%E6%8B%B7%E8%B4%9D%E7%AE%97%E6%B3%95%EF%BC%89-toc\" style=\"margin-left:40px;\"><a href=\"#Copying(%E6%8B%B7%E8%B4%9D%E7%AE%97%E6%B3%95%EF%BC%89\" rel=\"nofollow\" target=\"_self\">Copying(拷贝算法）</a></p>\n\n<p id=\"Mark-Compact%EF%BC%88%E6%A0%87%E8%AE%B0%E5%8E%8B%E7%BC%A9)-toc\" style=\"margin-left:40px;\"><a href=\"#Mark-Compact%EF%BC%88%E6%A0%87%E8%AE%B0%E5%8E%8B%E7%BC%A9)\" rel=\"nofollow\" target=\"_self\">Mark-Compact（标记压缩)</a><a href=\"#%E2%80%8B\" rel=\"nofollow\" target=\"_self\">​</a></p>\n\n<p id=\"4%E3%80%81JVM%E5%86%85%E5%AD%98%E5%88%86%E4%BB%A3%E6%A8%A1%E5%9E%8B(%E7%94%A8%E4%BA%8E%E5%88%86%E4%BB%A3%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95%EF%BC%89-toc\" style=\"margin-left:0px;\"><a href=\"#4%E3%80%81JVM%E5%86%85%E5%AD%98%E5%88%86%E4%BB%A3%E6%A8%A1%E5%9E%8B(%E7%94%A8%E4%BA%8E%E5%88%86%E4%BB%A3%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95%EF%BC%89\" rel=\"nofollow\" target=\"_self\">4、JVM内存分代模型(用于分代垃圾回收算法）</a></p>\n\n<p id=\"%E5%A0%86%E5%86%85%E5%AD%98%E9%80%BB%E8%BE%91%E5%88%86%E5%8C%BA-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%A0%86%E5%86%85%E5%AD%98%E9%80%BB%E8%BE%91%E5%88%86%E5%8C%BA\" rel=\"nofollow\" target=\"_self\">堆内存逻辑分区</a></p>\n\n<p id=\"5%E3%80%81%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8-toc\" style=\"margin-left:0px;\"><a href=\"#5%E3%80%81%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8\" rel=\"nofollow\" target=\"_self\">5、垃圾回收器</a></p>\n\n<p id=\"Serial-toc\" style=\"margin-left:40px;\"><a href=\"#Serial\" rel=\"nofollow\" target=\"_self\">Serial</a></p>\n\n<p id=\"Parallel%20Scavenge-toc\" style=\"margin-left:40px;\"><a href=\"#Parallel%20Scavenge\" rel=\"nofollow\" target=\"_self\">Parallel Scavenge</a></p>\n\n<p id=\"ParNew-toc\" style=\"margin-left:40px;\"><a href=\"#ParNew\" rel=\"nofollow\" target=\"_self\">ParNew</a></p>\n\n<p id=\"SerialOld-toc\" style=\"margin-left:40px;\"><a href=\"#SerialOld\" rel=\"nofollow\" target=\"_self\">SerialOld</a></p>\n\n<p id=\"Parallel%20Old-toc\" style=\"margin-left:40px;\"><a href=\"#Parallel%20Old\" rel=\"nofollow\" target=\"_self\">Parallel Old</a></p>\n\n<p id=\"CMS-toc\" style=\"margin-left:40px;\"><a href=\"#CMS\" rel=\"nofollow\" target=\"_self\">CMS</a></p>\n\n<p id=\"6%E3%80%81JVM%E5%8F%82%E6%95%B0-toc\" style=\"margin-left:0px;\"><a href=\"#6%E3%80%81JVM%E5%8F%82%E6%95%B0\" rel=\"nofollow\" target=\"_self\">6、JVM参数</a></p>\n\n<p id=\"7%E3%80%81%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE-toc\" style=\"margin-left:0px;\"><a href=\"#7%E3%80%81%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE\" rel=\"nofollow\" target=\"_self\">7、思维导图</a></p>\n\n<hr id=\"hr-toc\"><h1 id=\"1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E5%9E%83%E5%9C%BE\"><a name=\"t0\"></a><a name=\"t0\"></a>1、什么是垃圾</h1>\n\n<p>内存分配与回收方式：</p>\n\n<ul><li>\n    <p>C语言：malloc、free</p>\n    </li>\n    <li>\n    <p>C++：new、delete</p>\n    </li>\n    <li>\n    <p>Java：new&nbsp; 自动回收内存</p>\n    </li>\n</ul><p>自动回收内存系统不容易出错，手动回收内存，容易出现以下的错误：</p>\n\n<ul><li>\n    <p>忘记回收</p>\n    </li>\n    <li>\n    <p>多次回收</p>\n    </li>\n</ul><p>垃圾的定义：没有任何引用指向的一个对象或者多个对象(循环引用）。</p>\n\n<p><img alt=\"\" height=\"263\" src=\"https://img-blog.csdnimg.cn/20200218153041603.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"489\"></p>\n\n<p>当把成员变量设置为空(null)之后，不再指向任何引用对象，那么该对象就被称作垃圾：</p>\n\n<h2 id=\"%E2%80%8B\"><a name=\"t1\"></a><img alt=\"\" height=\"259\" src=\"https://img-blog.csdnimg.cn/20200218154813459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"503\"></h2>\n\n<p>还有一种情况，多个对象之间互相引用，但是没有其他的引用指向这个循环的对象。&nbsp;&nbsp;</p>\n\n<h2><a name=\"t2\"></a><img alt=\"\" height=\"320\" src=\"https://img-blog.csdnimg.cn/20200218155228678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"503\"></h2>\n\n<h1 id=\"2%E3%80%81%E5%A6%82%E4%BD%95%E5%AE%9A%E4%BD%8D%E5%9E%83%E5%9C%BE\"><a name=\"t3\"></a><a name=\"t3\"></a>2、如何定位垃圾</h1>\n\n<ul><li>\n    <h2 id=\"reference%20count\"><a name=\"t4\"></a><a name=\"t4\"></a>reference count</h2>\n    </li>\n</ul><h2><a name=\"t5\"></a><img alt=\"\" height=\"381\" src=\"https://img-blog.csdnimg.cn/20200218160722764.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"508\"></h2>\n\n<p>当引用计数变为0的时候，这个对象就成为垃圾了。但是引用计数不能解决对象循环引用</p>\n\n<p>如下：</p>\n\n<p><img alt=\"\" height=\"320\" src=\"https://img-blog.csdnimg.cn/20200218155228678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"503\"></p>\n\n<p>每个引用计数都是1，但是它们全部是垃圾，所以用引用计数的方式的话，这些垃圾就找不到了，会发生内存泄漏。</p>\n\n<ul><li>\n    <h2 id=\"Root%20Searching\"><a name=\"t6\"></a><a name=\"t6\"></a>Root Searching</h2>\n    </li>\n</ul><p>根可达或者根搜索算法。</p>\n\n<p>通过程序找到一些根对象，通过根对象找到它所连接的那些对象不是垃圾，其他的都是垃圾。</p>\n\n<p>Roots：线程栈变量、静态变量、常量池、JNI指针</p>\n\n<h2><a name=\"t7\"></a><img alt=\"\" height=\"334\" src=\"https://img-blog.csdnimg.cn/20200218163811236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"684\"></h2>\n\n<h1 id=\"3%E3%80%81%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95\"><a name=\"t8\"></a><a name=\"t8\"></a>3、常见的垃圾回收算法</h1>\n\n<ul><li>\n    <h2 id=\"Mark-Sweep(%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4)\"><a name=\"t9\"></a><a name=\"t9\"></a>Mark-Sweep(标记清除)</h2>\n    </li>\n</ul><p><img alt=\"\" height=\"461\" src=\"https://img-blog.csdnimg.cn/2020021817055046.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"698\"></p>\n\n<p>将可回收的对象标记为非垃圾。</p>\n\n<p>缺点：位置不连续，产生内存碎片。</p>\n\n<ul><li>\n    <h2 id=\"Copying(%E6%8B%B7%E8%B4%9D%E7%AE%97%E6%B3%95%EF%BC%89\"><a name=\"t10\"></a><a name=\"t10\"></a>Copying(拷贝算法）</h2>\n    </li>\n</ul><p><img alt=\"\" height=\"409\" src=\"https://img-blog.csdnimg.cn/20200218171626281.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"697\"></p>\n\n<p>内存一分为二，将存活对象复制到未使用的内存中，原内存全部标记为可使用；新分配内存时先分配存活对象所在的那段内存，垃圾回收时，重复上述操作。</p>\n\n<p>特点：没有碎片，但是内浪费空间。最大的问题：内存浪费。</p>\n\n<ul><li>\n    <h2 id=\"Mark-Compact%EF%BC%88%E6%A0%87%E8%AE%B0%E5%8E%8B%E7%BC%A9)\"><a name=\"t11\"></a><a name=\"t11\"></a>Mark-Compact（标记压缩)</h2>\n    </li>\n</ul><h2><a name=\"t12\"></a><img alt=\"\" height=\"460\" src=\"https://img-blog.csdnimg.cn/20200218174827773.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"691\"></h2>\n\n<p>将存活对象依次复制到垃圾对象和未使用的区域中，结合了标记清除和拷贝的做法，但是效率比copy略低。</p>\n\n<p>三种方法找垃圾的效率是一致的，区别在于找到垃圾后对其进行整理的方式。拷贝算法是内存拷贝，是线性地址的拷贝，速度很快的，效率很高。但是压缩算法却不这么简单，因为任意一个内存进行移动时，如果是多线程， 都要进行线程同步；如果是单线程，那单线程的效率本来就低。 所以任何一块内存挪动都要进行线程同步，所以效率肯定是很低的。</p>\n\n<h1 id=\"4%E3%80%81JVM%E5%86%85%E5%AD%98%E5%88%86%E4%BB%A3%E6%A8%A1%E5%9E%8B(%E7%94%A8%E4%BA%8E%E5%88%86%E4%BB%A3%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95%EF%BC%89\"><a name=\"t13\"></a><a name=\"t13\"></a>4、JVM内存分代模型(用于分代垃圾回收算法）</h1>\n\n<p>目前，生产环境中普遍使用的是JDK1.7或JDK1.8，根据JDK版本不同，分代也不同。</p>\n\n<p>JVM中分代：新生代+老年代+永久代(JDK1.7)/元数据区(JDK1.8)Metaspace。</p>\n\n<ul><li>永久代和元数据区是装载Class的，将硬盘上的Class对象load到内存的时候，装载了永久代或者元数据区域，具体放在哪里区别于使用的JDK版本</li>\n    <li>永久代必须指定大小限制，而元数据可以设置，也可不设置，无上限(受限于物理内存）</li>\n    <li>字符串常量在JDK1.7中，是放在永久代区域；而JDK1.8中，是放在堆里</li>\n    <li>MethodArea是一个逻辑概念，并不是指的一个区域，在JDK1.7中对应的就是永久代，JDK1.8中对应的是元数据</li>\n</ul><h2 id=\"%E5%A0%86%E5%86%85%E5%AD%98%E9%80%BB%E8%BE%91%E5%88%86%E5%8C%BA\"><a name=\"t14\"></a><a name=\"t14\"></a>堆内存逻辑分区</h2>\n\n<p><img alt=\"\" height=\"467\" src=\"https://img-blog.csdnimg.cn/20200220122652988.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"817\"></p>\n\n<ul><li>新生代中分了两类区域，eden和survivor，而survivor有两块。默认的比例，新生代：老年代=1：3，新生代中eden: survivor：survivor = 8:1:1。</li>\n</ul><p>之所以新生代中按照这个比例分配，是因为eden区在GC的时候，90%的对象都会被回收，剩下的存活对象在survivor区是可以放下的。</p>\n\n<p>当创建一个对象时，默认会去找eden区， 如果对象特别大，eden区装不下则直接进入老年代。</p>\n\n<p><span style=\"color:#f33b45;\"><strong>新生代 = Eden + 2个survivor区(survivor0、survivor1）</strong>：</span></p>\n\n<ul><li>YGC(Young GC)回收后，大多数的对象会被回收，活着的对象进入survivor0</li>\n    <li>再次YGC，活着的对象eden+s0拷贝到s1，将eden和s0清空</li>\n    <li>再次YGC，活着的对象eden+s1拷贝到s0，将eden和s1清空</li>\n    <li>年龄足够-&gt;老年代(年龄足够：15，CMS 6)</li>\n    <li>survivor区装不下的时候，装不下的部分直接进入老年代</li>\n</ul><p><span style=\"color:#f33b45;\"><strong>老年代：</strong></span></p>\n\n<ul><li>顽固份子</li>\n    <li>老年代区域满了，就进行Full GC(简称FGC, FGC包括新生代和老年代同时GC)</li>\n</ul><p><span style=\"color:#f33b45;\"><strong>GC Tuning：</strong></span>尽量减少FGC。</p>\n\n<h1 id=\"5%E3%80%81%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8\"><a name=\"t15\"></a><a name=\"t15\"></a>5、垃圾回收器</h1>\n\n<p><img alt=\"\" height=\"414\" src=\"https://img-blog.csdnimg.cn/20200220125708117.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"863\"></p>\n\n<ul><li>Serial、ParNew、Parallel Scavenge是用于回收Young Generation</li>\n    <li>CMS、Serial Old、Parallel Old是用于回收Old Generation</li>\n    <li>G1、ZGC、Shenandoah不区分老年代和新生代。</li>\n    <li>Epsilon是一个空的GC，仅仅用于调试JDK。</li>\n    <li>图中的红色虚线表示可以配合使用。</li>\n</ul><h2 id=\"Serial\"><a name=\"t16\"></a><a name=\"t16\"></a>Serial</h2>\n\n<p><img alt=\"\" height=\"436\" src=\"https://img-blog.csdnimg.cn/20200220130215487.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"815\"></p>\n\n<p>垃圾回收的时候，程序是无法执行的。stop-the-world(STW)是停止程序运行，回收线程开始运行，回收结束后程序再接着运行。</p>\n\n<h2 id=\"Parallel%20Scavenge\"><a name=\"t17\"></a><a name=\"t17\"></a>Parallel Scavenge</h2>\n\n<p><img alt=\"\" height=\"471\" src=\"https://img-blog.csdnimg.cn/20200220130956610.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"808\"></p>\n\n<p>并行回收，多个线程同时进行垃圾回收。</p>\n\n<h2 id=\"ParNew\"><a name=\"t18\"></a><a name=\"t18\"></a>ParNew</h2>\n\n<p><img alt=\"\" height=\"474\" src=\"https://img-blog.csdnimg.cn/2020022013122529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"827\"></p>\n\n<p>配合CMS的年轻代并行回收。</p>\n\n<h2 id=\"SerialOld\"><a name=\"t19\"></a><a name=\"t19\"></a>SerialOld</h2>\n\n<p>单线程回收算法用于old区域</p>\n\n<h2 id=\"Parallel%20Old\"><a name=\"t20\"></a><a name=\"t20\"></a>Parallel Old</h2>\n\n<p>多线程回收算法用于old区域</p>\n\n<h2 id=\"CMS\"><a name=\"t21\"></a><a name=\"t21\"></a>CMS</h2>\n\n<p>ConcurrentMarkSweep，用于回收老年代，在垃圾回收的同时程序也能运行。(黄色的表示垃圾回收线程，蓝色表示程序执行线程）</p>\n\n<p><img alt=\"\" height=\"456\" src=\"https://img-blog.csdnimg.cn/20200220132715191.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"835\"></p>\n\n<p><img alt=\"\" height=\"445\" src=\"https://img-blog.csdnimg.cn/20200220133005356.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"836\"></p>\n\n<p>调优针对的是Serial、Parallel Scavenge和Serial Old、Parallel New，因为JDK1.8默认的垃圾回收：Parallel Scavenge + Parallel Old。</p>\n\n<h1 id=\"6%E3%80%81JVM%E5%8F%82%E6%95%B0\"><a name=\"t22\"></a><a name=\"t22\"></a>6、JVM参数</h1>\n\n<p>JVM的命令行参数参考：https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html</p>\n\n<p>JVM参数分类：</p>\n\n<ul><li>标准：-开头，所有的HotSpot都支持。 如：java -version</li>\n    <li>非标准：-X开头，特定版本HotSpot支持特定命令</li>\n    <li>不稳定：-XX开头，下个版本可能取消\n    <ol><li>-XX: +PrintFlagsFinal &nbsp; --- 设置值（最终生效值)</li>\n        <li>-XX:+PrintFlagsInitial &nbsp;--- 默认值</li>\n        <li>-XX:+PrintCommandLineFlags ---命令行参数</li>\n    </ol></li>\n</ul><h1 id=\"7%E3%80%81%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE\"><a name=\"t23\"></a><a name=\"t23\"></a>7、思维导图</h1>\n\n<p><img alt=\"\" src=\"https://img-blog.csdnimg.cn/20200220151948590.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\"></p>\n\n<p>参考文档：</p>\n\n<p><a href=\"https://blogs.oracle.com/jonthecollector/our-collectors\" target=\"_blank\" rel=\"nofollow noopener\">https://blogs.oracle.com/jonthecollector/our-collectors</a></p>\n\n<p><a href=\"https://blogs.oracle.com/jonthecollector/why-not-a-grand-unified-garbage-collector\" target=\"_blank\" rel=\"nofollow noopener\">https://blogs.oracle.com/jonthecollector/why-not-a-grand-unified-garbage-collector</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck82rwplc0000g52wfv8ravyj","category_id":"ck82rwpln0001g52w1db55h88","_id":"ck82rwplq0004g52w5etwe86n"},{"post_id":"ck82rwpma0005g52w7540hqpu","category_id":"ck82rwpln0001g52w1db55h88","_id":"ck82rwpmh000bg52w8lfhcge4"},{"post_id":"ck82rwpmc0006g52w2v10308c","category_id":"ck82rwpln0001g52w1db55h88","_id":"ck82rwpmi000eg52wf2rp1bqb"},{"post_id":"ck82rwpme0008g52wazu62jll","category_id":"ck82rwpln0001g52w1db55h88","_id":"ck82rwpmk000ig52w822v13qf"},{"post_id":"ck82rwpmg000ag52w7k2zcset","category_id":"ck82rwpmi000fg52w1d08glmc","_id":"ck82rwpml000mg52waivads1j"},{"post_id":"ck82rwpmh000dg52w78wkgc1c","category_id":"ck82rwpmk000jg52w3tmn2rxk","_id":"ck82rwpmn000qg52wdy4pbgeu"},{"post_id":"ck82rwpmj000hg52wcvhf8lpg","category_id":"ck82rwpmk000jg52w3tmn2rxk","_id":"ck82rwpmn000sg52wajz546ff"}],"PostTag":[{"post_id":"ck82rwplc0000g52wfv8ravyj","tag_id":"ck82rwplo0002g52w8l253ggp","_id":"ck82rwplq0003g52w0j4deke6"},{"post_id":"ck82rwpma0005g52w7540hqpu","tag_id":"ck82rwplo0002g52w8l253ggp","_id":"ck82rwpme0007g52w7axze96i"},{"post_id":"ck82rwpmc0006g52w2v10308c","tag_id":"ck82rwplo0002g52w8l253ggp","_id":"ck82rwpmg0009g52w20pib5d2"},{"post_id":"ck82rwpme0008g52wazu62jll","tag_id":"ck82rwplo0002g52w8l253ggp","_id":"ck82rwpmh000cg52wa6f70p1r"},{"post_id":"ck82rwpmg000ag52w7k2zcset","tag_id":"ck82rwpmj000gg52w1qj8hktl","_id":"ck82rwpml000lg52w4q8bgk39"},{"post_id":"ck82rwpmh000dg52w78wkgc1c","tag_id":"ck82rwpmk000kg52w5a0e7hh9","_id":"ck82rwpmm000pg52wcokjf08f"},{"post_id":"ck82rwpmj000hg52wcvhf8lpg","tag_id":"ck82rwpmk000kg52w5a0e7hh9","_id":"ck82rwpmn000rg52w0xjk6n7h"}],"Tag":[{"name":"elasticsearch","_id":"ck82rwplo0002g52w8l253ggp"},{"name":"git","_id":"ck82rwpmj000gg52w1qj8hktl"},{"name":"java","_id":"ck82rwpmk000kg52w5a0e7hh9"}]}}