{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1582642366229},{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1582642366229},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1582642366229},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1582642366229},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1582642366229},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1582642366234},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1582642366230},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1582642366230},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1582642366230},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1582642366230},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1582642366230},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1582642366230},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1582642366230},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1582642366230},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1582642366230},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1582642366230},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1582642366231},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1582642366231},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1582642366233},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1582642366234},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1582642366234},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1582642366234},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1582642366235},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1582642366234},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1582642366234},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1582642366234},{"_id":"source/_posts/Ladmbda表达式.md","hash":"fb6c7eac53a8551eeb911884bc63b727e1849155","modified":1583484898317},{"_id":"source/_posts/jvm-GC-and-GC-Tuning.md","hash":"846b7b0395b85d57786ac82f9fc7658c369ddf5a","modified":1582685920595},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1582642366231},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1582642366231},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1582642366231},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1582642366231},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1582642366231},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1582642366231},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1582642366232},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1582642366232},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1582642366232},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1582642366232},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1582642366233},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1582642366233},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1582642366233},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1582642366233},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1582642366233},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1582642366233},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1582642366235},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1582642366237},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1582642366249},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1582642366250},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1582642366250},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1582642366251},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1582642366251},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1582642366251},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1582642366251},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1582642366252},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1582642366253},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1582642366253},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1582642366253},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1582642366232},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1582642366233},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1582642366232},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1582642366232},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1582642366233},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1582642366233},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1582642366235},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1582642366236},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1582642366235},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1582642366235},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1582642366236},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1582642366236},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1582642366236},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1582642366237},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1582642366237},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1582642366237},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1582642366236},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1582642366237},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1582642366239},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1582642366251},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1582642366251},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1582642366252},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1582642366252},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1582642366244},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1582642366252},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1582642366252},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1582642366238},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1582642366242},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1582642366241},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1582642366249},{"_id":"public/2020/03/06/Ladmbda表达式/index.html","hash":"41f112171270b6be49ac207dca69669c4678440f","modified":1583485134335},{"_id":"public/archives/index.html","hash":"d630f778de3ab303a8910117d88ca9dc1f10bee0","modified":1583485134335},{"_id":"public/archives/2020/index.html","hash":"cf8366d657b2487007065104c8163a37b2c423bc","modified":1583485134335},{"_id":"public/archives/2020/02/index.html","hash":"e67e20223e1ff5fbdf80e79ee6c73d056b63a65e","modified":1583485134335},{"_id":"public/2020/02/26/jvm-GC-and-GC-Tuning/index.html","hash":"d88746a2d00dd9903e452c2b6ab04c78bfb06541","modified":1583485134335},{"_id":"public/archives/2020/03/index.html","hash":"c7875a2ea204e8dd43749e6de48f0df2b98106f3","modified":1583485134335},{"_id":"public/index.html","hash":"fe4462dd24d854013999f4ea11ceee1dbf02a4ec","modified":1583485134335},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1583485134335},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1583485134335},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1583485134335},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1583485134335},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1583485134335},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1583485134335},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1583485134335},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1583485134335},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1583485134335},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1583485134335},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1583485134335},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1583485134335},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1583485134335},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1583485134335},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1583485134335},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1583485134335},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1583485134335},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1583485134335},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1583485134335},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1583485134335},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1583485134335},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1583485134335},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1583485134335}],"Category":[],"Data":[],"Page":[],"Post":[{"_content":"<div id=\"article_content\" class=\"article_content clearfix\">\n            <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-833878f763.css\">\n                                        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-833878f763.css\">\n                <div class=\"htmledit_views\" id=\"content_views\">\n                                            <p id=\"main-toc\"><strong>目录</strong></p>\n\n<p id=\"1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E5%9E%83%E5%9C%BE-toc\" style=\"margin-left:0px;\"><a href=\"#1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E5%9E%83%E5%9C%BE\" rel=\"nofollow\" target=\"_self\">1、什么是垃圾</a></p>\n\n<p id=\"2%E3%80%81%E5%A6%82%E4%BD%95%E5%AE%9A%E4%BD%8D%E5%9E%83%E5%9C%BE-toc\" style=\"margin-left:0px;\"><a href=\"#2%E3%80%81%E5%A6%82%E4%BD%95%E5%AE%9A%E4%BD%8D%E5%9E%83%E5%9C%BE\" rel=\"nofollow\" target=\"_self\">2、如何定位垃圾</a></p>\n\n<p id=\"reference%20count-toc\" style=\"margin-left:40px;\"><a href=\"#reference%20count\" rel=\"nofollow\" target=\"_self\">reference count</a></p>\n\n<p id=\"Root%20Searching-toc\" style=\"margin-left:40px;\"><a href=\"#Root%20Searching\" rel=\"nofollow\" target=\"_self\">Root Searching</a></p>\n\n<p id=\"3%E3%80%81%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95-toc\" style=\"margin-left:0px;\"><a href=\"#3%E3%80%81%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95\" rel=\"nofollow\" target=\"_self\">3、常见的垃圾回收算法</a></p>\n\n<p id=\"Mark-Sweep(%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4)-toc\" style=\"margin-left:40px;\"><a href=\"#Mark-Sweep(%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4)\" rel=\"nofollow\" target=\"_self\">Mark-Sweep(标记清除)</a></p>\n\n<p id=\"Copying(%E6%8B%B7%E8%B4%9D%E7%AE%97%E6%B3%95%EF%BC%89-toc\" style=\"margin-left:40px;\"><a href=\"#Copying(%E6%8B%B7%E8%B4%9D%E7%AE%97%E6%B3%95%EF%BC%89\" rel=\"nofollow\" target=\"_self\">Copying(拷贝算法）</a></p>\n\n<p id=\"Mark-Compact%EF%BC%88%E6%A0%87%E8%AE%B0%E5%8E%8B%E7%BC%A9)-toc\" style=\"margin-left:40px;\"><a href=\"#Mark-Compact%EF%BC%88%E6%A0%87%E8%AE%B0%E5%8E%8B%E7%BC%A9)\" rel=\"nofollow\" target=\"_self\">Mark-Compact（标记压缩)</a><a href=\"#%E2%80%8B\" rel=\"nofollow\" target=\"_self\">​</a></p>\n\n<p id=\"4%E3%80%81JVM%E5%86%85%E5%AD%98%E5%88%86%E4%BB%A3%E6%A8%A1%E5%9E%8B(%E7%94%A8%E4%BA%8E%E5%88%86%E4%BB%A3%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95%EF%BC%89-toc\" style=\"margin-left:0px;\"><a href=\"#4%E3%80%81JVM%E5%86%85%E5%AD%98%E5%88%86%E4%BB%A3%E6%A8%A1%E5%9E%8B(%E7%94%A8%E4%BA%8E%E5%88%86%E4%BB%A3%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95%EF%BC%89\" rel=\"nofollow\" target=\"_self\">4、JVM内存分代模型(用于分代垃圾回收算法）</a></p>\n\n<p id=\"%E5%A0%86%E5%86%85%E5%AD%98%E9%80%BB%E8%BE%91%E5%88%86%E5%8C%BA-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%A0%86%E5%86%85%E5%AD%98%E9%80%BB%E8%BE%91%E5%88%86%E5%8C%BA\" rel=\"nofollow\" target=\"_self\">堆内存逻辑分区</a></p>\n\n<p id=\"5%E3%80%81%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8-toc\" style=\"margin-left:0px;\"><a href=\"#5%E3%80%81%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8\" rel=\"nofollow\" target=\"_self\">5、垃圾回收器</a></p>\n\n<p id=\"Serial-toc\" style=\"margin-left:40px;\"><a href=\"#Serial\" rel=\"nofollow\" target=\"_self\">Serial</a></p>\n\n<p id=\"Parallel%20Scavenge-toc\" style=\"margin-left:40px;\"><a href=\"#Parallel%20Scavenge\" rel=\"nofollow\" target=\"_self\">Parallel Scavenge</a></p>\n\n<p id=\"ParNew-toc\" style=\"margin-left:40px;\"><a href=\"#ParNew\" rel=\"nofollow\" target=\"_self\">ParNew</a></p>\n\n<p id=\"SerialOld-toc\" style=\"margin-left:40px;\"><a href=\"#SerialOld\" rel=\"nofollow\" target=\"_self\">SerialOld</a></p>\n\n<p id=\"Parallel%20Old-toc\" style=\"margin-left:40px;\"><a href=\"#Parallel%20Old\" rel=\"nofollow\" target=\"_self\">Parallel Old</a></p>\n\n<p id=\"CMS-toc\" style=\"margin-left:40px;\"><a href=\"#CMS\" rel=\"nofollow\" target=\"_self\">CMS</a></p>\n\n<p id=\"6%E3%80%81JVM%E5%8F%82%E6%95%B0-toc\" style=\"margin-left:0px;\"><a href=\"#6%E3%80%81JVM%E5%8F%82%E6%95%B0\" rel=\"nofollow\" target=\"_self\">6、JVM参数</a></p>\n\n<p id=\"7%E3%80%81%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE-toc\" style=\"margin-left:0px;\"><a href=\"#7%E3%80%81%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE\" rel=\"nofollow\" target=\"_self\">7、思维导图</a></p>\n\n<hr id=\"hr-toc\"><h1 id=\"1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E5%9E%83%E5%9C%BE\"><a name=\"t0\"></a><a name=\"t0\"></a>1、什么是垃圾</h1>\n\n<p>内存分配与回收方式：</p>\n\n<ul><li>\n\t<p>C语言：malloc、free</p>\n\t</li>\n\t<li>\n\t<p>C++：new、delete</p>\n\t</li>\n\t<li>\n\t<p>Java：new&nbsp; 自动回收内存</p>\n\t</li>\n</ul><p>自动回收内存系统不容易出错，手动回收内存，容易出现以下的错误：</p>\n\n<ul><li>\n\t<p>忘记回收</p>\n\t</li>\n\t<li>\n\t<p>多次回收</p>\n\t</li>\n</ul><p>垃圾的定义：没有任何引用指向的一个对象或者多个对象(循环引用）。</p>\n\n<p><img alt=\"\" height=\"263\" src=\"https://img-blog.csdnimg.cn/20200218153041603.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"489\"></p>\n\n<p>当把成员变量设置为空(null)之后，不再指向任何引用对象，那么该对象就被称作垃圾：</p>\n\n<h2 id=\"%E2%80%8B\"><a name=\"t1\"></a><img alt=\"\" height=\"259\" src=\"https://img-blog.csdnimg.cn/20200218154813459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"503\"></h2>\n\n<p>还有一种情况，多个对象之间互相引用，但是没有其他的引用指向这个循环的对象。&nbsp;&nbsp;</p>\n\n<h2><a name=\"t2\"></a><img alt=\"\" height=\"320\" src=\"https://img-blog.csdnimg.cn/20200218155228678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"503\"></h2>\n\n<h1 id=\"2%E3%80%81%E5%A6%82%E4%BD%95%E5%AE%9A%E4%BD%8D%E5%9E%83%E5%9C%BE\"><a name=\"t3\"></a><a name=\"t3\"></a>2、如何定位垃圾</h1>\n\n<ul><li>\n\t<h2 id=\"reference%20count\"><a name=\"t4\"></a><a name=\"t4\"></a>reference count</h2>\n\t</li>\n</ul><h2><a name=\"t5\"></a><img alt=\"\" height=\"381\" src=\"https://img-blog.csdnimg.cn/20200218160722764.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"508\"></h2>\n\n<p>当引用计数变为0的时候，这个对象就成为垃圾了。但是引用计数不能解决对象循环引用</p>\n\n<p>如下：</p>\n\n<p><img alt=\"\" height=\"320\" src=\"https://img-blog.csdnimg.cn/20200218155228678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"503\"></p>\n\n<p>每个引用计数都是1，但是它们全部是垃圾，所以用引用计数的方式的话，这些垃圾就找不到了，会发生内存泄漏。</p>\n\n<ul><li>\n\t<h2 id=\"Root%20Searching\"><a name=\"t6\"></a><a name=\"t6\"></a>Root Searching</h2>\n\t</li>\n</ul><p>根可达或者根搜索算法。</p>\n\n<p>通过程序找到一些根对象，通过根对象找到它所连接的那些对象不是垃圾，其他的都是垃圾。</p>\n\n<p>Roots：线程栈变量、静态变量、常量池、JNI指针</p>\n\n<h2><a name=\"t7\"></a><img alt=\"\" height=\"334\" src=\"https://img-blog.csdnimg.cn/20200218163811236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"684\"></h2>\n\n<h1 id=\"3%E3%80%81%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95\"><a name=\"t8\"></a><a name=\"t8\"></a>3、常见的垃圾回收算法</h1>\n\n<ul><li>\n\t<h2 id=\"Mark-Sweep(%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4)\"><a name=\"t9\"></a><a name=\"t9\"></a>Mark-Sweep(标记清除)</h2>\n\t</li>\n</ul><p><img alt=\"\" height=\"461\" src=\"https://img-blog.csdnimg.cn/2020021817055046.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"698\"></p>\n\n<p>将可回收的对象标记为非垃圾。</p>\n\n<p>缺点：位置不连续，产生内存碎片。</p>\n\n<ul><li>\n\t<h2 id=\"Copying(%E6%8B%B7%E8%B4%9D%E7%AE%97%E6%B3%95%EF%BC%89\"><a name=\"t10\"></a><a name=\"t10\"></a>Copying(拷贝算法）</h2>\n\t</li>\n</ul><p><img alt=\"\" height=\"409\" src=\"https://img-blog.csdnimg.cn/20200218171626281.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"697\"></p>\n\n<p>内存一分为二，将存活对象复制到未使用的内存中，原内存全部标记为可使用；新分配内存时先分配存活对象所在的那段内存，垃圾回收时，重复上述操作。</p>\n\n<p>特点：没有碎片，但是内浪费空间。最大的问题：内存浪费。</p>\n\n<ul><li>\n\t<h2 id=\"Mark-Compact%EF%BC%88%E6%A0%87%E8%AE%B0%E5%8E%8B%E7%BC%A9)\"><a name=\"t11\"></a><a name=\"t11\"></a>Mark-Compact（标记压缩)</h2>\n\t</li>\n</ul><h2><a name=\"t12\"></a><img alt=\"\" height=\"460\" src=\"https://img-blog.csdnimg.cn/20200218174827773.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"691\"></h2>\n\n<p>将存活对象依次复制到垃圾对象和未使用的区域中，结合了标记清除和拷贝的做法，但是效率比copy略低。</p>\n\n<p>三种方法找垃圾的效率是一致的，区别在于找到垃圾后对其进行整理的方式。拷贝算法是内存拷贝，是线性地址的拷贝，速度很快的，效率很高。但是压缩算法却不这么简单，因为任意一个内存进行移动时，如果是多线程， 都要进行线程同步；如果是单线程，那单线程的效率本来就低。 所以任何一块内存挪动都要进行线程同步，所以效率肯定是很低的。</p>\n\n<h1 id=\"4%E3%80%81JVM%E5%86%85%E5%AD%98%E5%88%86%E4%BB%A3%E6%A8%A1%E5%9E%8B(%E7%94%A8%E4%BA%8E%E5%88%86%E4%BB%A3%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95%EF%BC%89\"><a name=\"t13\"></a><a name=\"t13\"></a>4、JVM内存分代模型(用于分代垃圾回收算法）</h1>\n\n<p>目前，生产环境中普遍使用的是JDK1.7或JDK1.8，根据JDK版本不同，分代也不同。</p>\n\n<p>JVM中分代：新生代+老年代+永久代(JDK1.7)/元数据区(JDK1.8)Metaspace。</p>\n\n<ul><li>永久代和元数据区是装载Class的，将硬盘上的Class对象load到内存的时候，装载了永久代或者元数据区域，具体放在哪里区别于使用的JDK版本</li>\n\t<li>永久代必须指定大小限制，而元数据可以设置，也可不设置，无上限(受限于物理内存）</li>\n\t<li>字符串常量在JDK1.7中，是放在永久代区域；而JDK1.8中，是放在堆里</li>\n\t<li>MethodArea是一个逻辑概念，并不是指的一个区域，在JDK1.7中对应的就是永久代，JDK1.8中对应的是元数据</li>\n</ul><h2 id=\"%E5%A0%86%E5%86%85%E5%AD%98%E9%80%BB%E8%BE%91%E5%88%86%E5%8C%BA\"><a name=\"t14\"></a><a name=\"t14\"></a>堆内存逻辑分区</h2>\n\n<p><img alt=\"\" height=\"467\" src=\"https://img-blog.csdnimg.cn/20200220122652988.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"817\"></p>\n\n<ul><li>新生代中分了两类区域，eden和survivor，而survivor有两块。默认的比例，新生代：老年代=1：3，新生代中eden: survivor：survivor = 8:1:1。</li>\n</ul><p>之所以新生代中按照这个比例分配，是因为eden区在GC的时候，90%的对象都会被回收，剩下的存活对象在survivor区是可以放下的。</p>\n\n<p>当创建一个对象时，默认会去找eden区， 如果对象特别大，eden区装不下则直接进入老年代。</p>\n\n<p><span style=\"color:#f33b45;\"><strong>新生代 = Eden + 2个survivor区(survivor0、survivor1）</strong>：</span></p>\n\n<ul><li>YGC(Young GC)回收后，大多数的对象会被回收，活着的对象进入survivor0</li>\n\t<li>再次YGC，活着的对象eden+s0拷贝到s1，将eden和s0清空</li>\n\t<li>再次YGC，活着的对象eden+s1拷贝到s0，将eden和s1清空</li>\n\t<li>年龄足够-&gt;老年代(年龄足够：15，CMS 6)</li>\n\t<li>survivor区装不下的时候，装不下的部分直接进入老年代</li>\n</ul><p><span style=\"color:#f33b45;\"><strong>老年代：</strong></span></p>\n\n<ul><li>顽固份子</li>\n\t<li>老年代区域满了，就进行Full GC(简称FGC, FGC包括新生代和老年代同时GC)</li>\n</ul><p><span style=\"color:#f33b45;\"><strong>GC Tuning：</strong></span>尽量减少FGC。</p>\n\n<h1 id=\"5%E3%80%81%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8\"><a name=\"t15\"></a><a name=\"t15\"></a>5、垃圾回收器</h1>\n\n<p><img alt=\"\" height=\"414\" src=\"https://img-blog.csdnimg.cn/20200220125708117.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"863\"></p>\n\n<ul><li>Serial、ParNew、Parallel Scavenge是用于回收Young Generation</li>\n\t<li>CMS、Serial Old、Parallel Old是用于回收Old Generation</li>\n\t<li>G1、ZGC、Shenandoah不区分老年代和新生代。</li>\n\t<li>Epsilon是一个空的GC，仅仅用于调试JDK。</li>\n\t<li>图中的红色虚线表示可以配合使用。</li>\n</ul><h2 id=\"Serial\"><a name=\"t16\"></a><a name=\"t16\"></a>Serial</h2>\n\n<p><img alt=\"\" height=\"436\" src=\"https://img-blog.csdnimg.cn/20200220130215487.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"815\"></p>\n\n<p>垃圾回收的时候，程序是无法执行的。stop-the-world(STW)是停止程序运行，回收线程开始运行，回收结束后程序再接着运行。</p>\n\n<h2 id=\"Parallel%20Scavenge\"><a name=\"t17\"></a><a name=\"t17\"></a>Parallel Scavenge</h2>\n\n<p><img alt=\"\" height=\"471\" src=\"https://img-blog.csdnimg.cn/20200220130956610.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"808\"></p>\n\n<p>并行回收，多个线程同时进行垃圾回收。</p>\n\n<h2 id=\"ParNew\"><a name=\"t18\"></a><a name=\"t18\"></a>ParNew</h2>\n\n<p><img alt=\"\" height=\"474\" src=\"https://img-blog.csdnimg.cn/2020022013122529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"827\"></p>\n\n<p>配合CMS的年轻代并行回收。</p>\n\n<h2 id=\"SerialOld\"><a name=\"t19\"></a><a name=\"t19\"></a>SerialOld</h2>\n\n<p>单线程回收算法用于old区域</p>\n\n<h2 id=\"Parallel%20Old\"><a name=\"t20\"></a><a name=\"t20\"></a>Parallel Old</h2>\n\n<p>多线程回收算法用于old区域</p>\n\n<h2 id=\"CMS\"><a name=\"t21\"></a><a name=\"t21\"></a>CMS</h2>\n\n<p>ConcurrentMarkSweep，用于回收老年代，在垃圾回收的同时程序也能运行。(黄色的表示垃圾回收线程，蓝色表示程序执行线程）</p>\n\n<p><img alt=\"\" height=\"456\" src=\"https://img-blog.csdnimg.cn/20200220132715191.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"835\"></p>\n\n<p><img alt=\"\" height=\"445\" src=\"https://img-blog.csdnimg.cn/20200220133005356.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"836\"></p>\n\n<p>调优针对的是Serial、Parallel Scavenge和Serial Old、Parallel New，因为JDK1.8默认的垃圾回收：Parallel Scavenge + Parallel Old。</p>\n\n<h1 id=\"6%E3%80%81JVM%E5%8F%82%E6%95%B0\"><a name=\"t22\"></a><a name=\"t22\"></a>6、JVM参数</h1>\n\n<p>JVM的命令行参数参考：https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html</p>\n\n<p>JVM参数分类：</p>\n\n<ul><li>标准：-开头，所有的HotSpot都支持。 如：java -version</li>\n\t<li>非标准：-X开头，特定版本HotSpot支持特定命令</li>\n\t<li>不稳定：-XX开头，下个版本可能取消\n\t<ol><li>-XX: +PrintFlagsFinal &nbsp; --- 设置值（最终生效值)</li>\n\t\t<li>-XX:+PrintFlagsInitial &nbsp;--- 默认值</li>\n\t\t<li>-XX:+PrintCommandLineFlags ---命令行参数</li>\n\t</ol></li>\n</ul><h1 id=\"7%E3%80%81%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE\"><a name=\"t23\"></a><a name=\"t23\"></a>7、思维导图</h1>\n\n<p><img alt=\"\" src=\"https://img-blog.csdnimg.cn/20200220151948590.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\"></p>\n\n<p>参考文档：</p>\n\n<p><a href=\"https://blogs.oracle.com/jonthecollector/our-collectors\" rel=\"nofollow\">https://blogs.oracle.com/jonthecollector/our-collectors</a></p>\n\n<p><a href=\"https://blogs.oracle.com/jonthecollector/why-not-a-grand-unified-garbage-collector\" rel=\"nofollow\">https://blogs.oracle.com/jonthecollector/why-not-a-grand-unified-garbage-collector</a></p>\n","source":"_posts/jvm-GC-and-GC-Tuning.md","raw":"<div id=\"article_content\" class=\"article_content clearfix\">\n            <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-833878f763.css\">\n                                        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-833878f763.css\">\n                <div class=\"htmledit_views\" id=\"content_views\">\n                                            <p id=\"main-toc\"><strong>目录</strong></p>\n\n<p id=\"1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E5%9E%83%E5%9C%BE-toc\" style=\"margin-left:0px;\"><a href=\"#1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E5%9E%83%E5%9C%BE\" rel=\"nofollow\" target=\"_self\">1、什么是垃圾</a></p>\n\n<p id=\"2%E3%80%81%E5%A6%82%E4%BD%95%E5%AE%9A%E4%BD%8D%E5%9E%83%E5%9C%BE-toc\" style=\"margin-left:0px;\"><a href=\"#2%E3%80%81%E5%A6%82%E4%BD%95%E5%AE%9A%E4%BD%8D%E5%9E%83%E5%9C%BE\" rel=\"nofollow\" target=\"_self\">2、如何定位垃圾</a></p>\n\n<p id=\"reference%20count-toc\" style=\"margin-left:40px;\"><a href=\"#reference%20count\" rel=\"nofollow\" target=\"_self\">reference count</a></p>\n\n<p id=\"Root%20Searching-toc\" style=\"margin-left:40px;\"><a href=\"#Root%20Searching\" rel=\"nofollow\" target=\"_self\">Root Searching</a></p>\n\n<p id=\"3%E3%80%81%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95-toc\" style=\"margin-left:0px;\"><a href=\"#3%E3%80%81%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95\" rel=\"nofollow\" target=\"_self\">3、常见的垃圾回收算法</a></p>\n\n<p id=\"Mark-Sweep(%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4)-toc\" style=\"margin-left:40px;\"><a href=\"#Mark-Sweep(%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4)\" rel=\"nofollow\" target=\"_self\">Mark-Sweep(标记清除)</a></p>\n\n<p id=\"Copying(%E6%8B%B7%E8%B4%9D%E7%AE%97%E6%B3%95%EF%BC%89-toc\" style=\"margin-left:40px;\"><a href=\"#Copying(%E6%8B%B7%E8%B4%9D%E7%AE%97%E6%B3%95%EF%BC%89\" rel=\"nofollow\" target=\"_self\">Copying(拷贝算法）</a></p>\n\n<p id=\"Mark-Compact%EF%BC%88%E6%A0%87%E8%AE%B0%E5%8E%8B%E7%BC%A9)-toc\" style=\"margin-left:40px;\"><a href=\"#Mark-Compact%EF%BC%88%E6%A0%87%E8%AE%B0%E5%8E%8B%E7%BC%A9)\" rel=\"nofollow\" target=\"_self\">Mark-Compact（标记压缩)</a><a href=\"#%E2%80%8B\" rel=\"nofollow\" target=\"_self\">​</a></p>\n\n<p id=\"4%E3%80%81JVM%E5%86%85%E5%AD%98%E5%88%86%E4%BB%A3%E6%A8%A1%E5%9E%8B(%E7%94%A8%E4%BA%8E%E5%88%86%E4%BB%A3%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95%EF%BC%89-toc\" style=\"margin-left:0px;\"><a href=\"#4%E3%80%81JVM%E5%86%85%E5%AD%98%E5%88%86%E4%BB%A3%E6%A8%A1%E5%9E%8B(%E7%94%A8%E4%BA%8E%E5%88%86%E4%BB%A3%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95%EF%BC%89\" rel=\"nofollow\" target=\"_self\">4、JVM内存分代模型(用于分代垃圾回收算法）</a></p>\n\n<p id=\"%E5%A0%86%E5%86%85%E5%AD%98%E9%80%BB%E8%BE%91%E5%88%86%E5%8C%BA-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%A0%86%E5%86%85%E5%AD%98%E9%80%BB%E8%BE%91%E5%88%86%E5%8C%BA\" rel=\"nofollow\" target=\"_self\">堆内存逻辑分区</a></p>\n\n<p id=\"5%E3%80%81%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8-toc\" style=\"margin-left:0px;\"><a href=\"#5%E3%80%81%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8\" rel=\"nofollow\" target=\"_self\">5、垃圾回收器</a></p>\n\n<p id=\"Serial-toc\" style=\"margin-left:40px;\"><a href=\"#Serial\" rel=\"nofollow\" target=\"_self\">Serial</a></p>\n\n<p id=\"Parallel%20Scavenge-toc\" style=\"margin-left:40px;\"><a href=\"#Parallel%20Scavenge\" rel=\"nofollow\" target=\"_self\">Parallel Scavenge</a></p>\n\n<p id=\"ParNew-toc\" style=\"margin-left:40px;\"><a href=\"#ParNew\" rel=\"nofollow\" target=\"_self\">ParNew</a></p>\n\n<p id=\"SerialOld-toc\" style=\"margin-left:40px;\"><a href=\"#SerialOld\" rel=\"nofollow\" target=\"_self\">SerialOld</a></p>\n\n<p id=\"Parallel%20Old-toc\" style=\"margin-left:40px;\"><a href=\"#Parallel%20Old\" rel=\"nofollow\" target=\"_self\">Parallel Old</a></p>\n\n<p id=\"CMS-toc\" style=\"margin-left:40px;\"><a href=\"#CMS\" rel=\"nofollow\" target=\"_self\">CMS</a></p>\n\n<p id=\"6%E3%80%81JVM%E5%8F%82%E6%95%B0-toc\" style=\"margin-left:0px;\"><a href=\"#6%E3%80%81JVM%E5%8F%82%E6%95%B0\" rel=\"nofollow\" target=\"_self\">6、JVM参数</a></p>\n\n<p id=\"7%E3%80%81%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE-toc\" style=\"margin-left:0px;\"><a href=\"#7%E3%80%81%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE\" rel=\"nofollow\" target=\"_self\">7、思维导图</a></p>\n\n<hr id=\"hr-toc\"><h1 id=\"1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E5%9E%83%E5%9C%BE\"><a name=\"t0\"></a><a name=\"t0\"></a>1、什么是垃圾</h1>\n\n<p>内存分配与回收方式：</p>\n\n<ul><li>\n\t<p>C语言：malloc、free</p>\n\t</li>\n\t<li>\n\t<p>C++：new、delete</p>\n\t</li>\n\t<li>\n\t<p>Java：new&nbsp; 自动回收内存</p>\n\t</li>\n</ul><p>自动回收内存系统不容易出错，手动回收内存，容易出现以下的错误：</p>\n\n<ul><li>\n\t<p>忘记回收</p>\n\t</li>\n\t<li>\n\t<p>多次回收</p>\n\t</li>\n</ul><p>垃圾的定义：没有任何引用指向的一个对象或者多个对象(循环引用）。</p>\n\n<p><img alt=\"\" height=\"263\" src=\"https://img-blog.csdnimg.cn/20200218153041603.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"489\"></p>\n\n<p>当把成员变量设置为空(null)之后，不再指向任何引用对象，那么该对象就被称作垃圾：</p>\n\n<h2 id=\"%E2%80%8B\"><a name=\"t1\"></a><img alt=\"\" height=\"259\" src=\"https://img-blog.csdnimg.cn/20200218154813459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"503\"></h2>\n\n<p>还有一种情况，多个对象之间互相引用，但是没有其他的引用指向这个循环的对象。&nbsp;&nbsp;</p>\n\n<h2><a name=\"t2\"></a><img alt=\"\" height=\"320\" src=\"https://img-blog.csdnimg.cn/20200218155228678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"503\"></h2>\n\n<h1 id=\"2%E3%80%81%E5%A6%82%E4%BD%95%E5%AE%9A%E4%BD%8D%E5%9E%83%E5%9C%BE\"><a name=\"t3\"></a><a name=\"t3\"></a>2、如何定位垃圾</h1>\n\n<ul><li>\n\t<h2 id=\"reference%20count\"><a name=\"t4\"></a><a name=\"t4\"></a>reference count</h2>\n\t</li>\n</ul><h2><a name=\"t5\"></a><img alt=\"\" height=\"381\" src=\"https://img-blog.csdnimg.cn/20200218160722764.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"508\"></h2>\n\n<p>当引用计数变为0的时候，这个对象就成为垃圾了。但是引用计数不能解决对象循环引用</p>\n\n<p>如下：</p>\n\n<p><img alt=\"\" height=\"320\" src=\"https://img-blog.csdnimg.cn/20200218155228678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"503\"></p>\n\n<p>每个引用计数都是1，但是它们全部是垃圾，所以用引用计数的方式的话，这些垃圾就找不到了，会发生内存泄漏。</p>\n\n<ul><li>\n\t<h2 id=\"Root%20Searching\"><a name=\"t6\"></a><a name=\"t6\"></a>Root Searching</h2>\n\t</li>\n</ul><p>根可达或者根搜索算法。</p>\n\n<p>通过程序找到一些根对象，通过根对象找到它所连接的那些对象不是垃圾，其他的都是垃圾。</p>\n\n<p>Roots：线程栈变量、静态变量、常量池、JNI指针</p>\n\n<h2><a name=\"t7\"></a><img alt=\"\" height=\"334\" src=\"https://img-blog.csdnimg.cn/20200218163811236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"684\"></h2>\n\n<h1 id=\"3%E3%80%81%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95\"><a name=\"t8\"></a><a name=\"t8\"></a>3、常见的垃圾回收算法</h1>\n\n<ul><li>\n\t<h2 id=\"Mark-Sweep(%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4)\"><a name=\"t9\"></a><a name=\"t9\"></a>Mark-Sweep(标记清除)</h2>\n\t</li>\n</ul><p><img alt=\"\" height=\"461\" src=\"https://img-blog.csdnimg.cn/2020021817055046.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"698\"></p>\n\n<p>将可回收的对象标记为非垃圾。</p>\n\n<p>缺点：位置不连续，产生内存碎片。</p>\n\n<ul><li>\n\t<h2 id=\"Copying(%E6%8B%B7%E8%B4%9D%E7%AE%97%E6%B3%95%EF%BC%89\"><a name=\"t10\"></a><a name=\"t10\"></a>Copying(拷贝算法）</h2>\n\t</li>\n</ul><p><img alt=\"\" height=\"409\" src=\"https://img-blog.csdnimg.cn/20200218171626281.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"697\"></p>\n\n<p>内存一分为二，将存活对象复制到未使用的内存中，原内存全部标记为可使用；新分配内存时先分配存活对象所在的那段内存，垃圾回收时，重复上述操作。</p>\n\n<p>特点：没有碎片，但是内浪费空间。最大的问题：内存浪费。</p>\n\n<ul><li>\n\t<h2 id=\"Mark-Compact%EF%BC%88%E6%A0%87%E8%AE%B0%E5%8E%8B%E7%BC%A9)\"><a name=\"t11\"></a><a name=\"t11\"></a>Mark-Compact（标记压缩)</h2>\n\t</li>\n</ul><h2><a name=\"t12\"></a><img alt=\"\" height=\"460\" src=\"https://img-blog.csdnimg.cn/20200218174827773.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"691\"></h2>\n\n<p>将存活对象依次复制到垃圾对象和未使用的区域中，结合了标记清除和拷贝的做法，但是效率比copy略低。</p>\n\n<p>三种方法找垃圾的效率是一致的，区别在于找到垃圾后对其进行整理的方式。拷贝算法是内存拷贝，是线性地址的拷贝，速度很快的，效率很高。但是压缩算法却不这么简单，因为任意一个内存进行移动时，如果是多线程， 都要进行线程同步；如果是单线程，那单线程的效率本来就低。 所以任何一块内存挪动都要进行线程同步，所以效率肯定是很低的。</p>\n\n<h1 id=\"4%E3%80%81JVM%E5%86%85%E5%AD%98%E5%88%86%E4%BB%A3%E6%A8%A1%E5%9E%8B(%E7%94%A8%E4%BA%8E%E5%88%86%E4%BB%A3%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95%EF%BC%89\"><a name=\"t13\"></a><a name=\"t13\"></a>4、JVM内存分代模型(用于分代垃圾回收算法）</h1>\n\n<p>目前，生产环境中普遍使用的是JDK1.7或JDK1.8，根据JDK版本不同，分代也不同。</p>\n\n<p>JVM中分代：新生代+老年代+永久代(JDK1.7)/元数据区(JDK1.8)Metaspace。</p>\n\n<ul><li>永久代和元数据区是装载Class的，将硬盘上的Class对象load到内存的时候，装载了永久代或者元数据区域，具体放在哪里区别于使用的JDK版本</li>\n\t<li>永久代必须指定大小限制，而元数据可以设置，也可不设置，无上限(受限于物理内存）</li>\n\t<li>字符串常量在JDK1.7中，是放在永久代区域；而JDK1.8中，是放在堆里</li>\n\t<li>MethodArea是一个逻辑概念，并不是指的一个区域，在JDK1.7中对应的就是永久代，JDK1.8中对应的是元数据</li>\n</ul><h2 id=\"%E5%A0%86%E5%86%85%E5%AD%98%E9%80%BB%E8%BE%91%E5%88%86%E5%8C%BA\"><a name=\"t14\"></a><a name=\"t14\"></a>堆内存逻辑分区</h2>\n\n<p><img alt=\"\" height=\"467\" src=\"https://img-blog.csdnimg.cn/20200220122652988.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"817\"></p>\n\n<ul><li>新生代中分了两类区域，eden和survivor，而survivor有两块。默认的比例，新生代：老年代=1：3，新生代中eden: survivor：survivor = 8:1:1。</li>\n</ul><p>之所以新生代中按照这个比例分配，是因为eden区在GC的时候，90%的对象都会被回收，剩下的存活对象在survivor区是可以放下的。</p>\n\n<p>当创建一个对象时，默认会去找eden区， 如果对象特别大，eden区装不下则直接进入老年代。</p>\n\n<p><span style=\"color:#f33b45;\"><strong>新生代 = Eden + 2个survivor区(survivor0、survivor1）</strong>：</span></p>\n\n<ul><li>YGC(Young GC)回收后，大多数的对象会被回收，活着的对象进入survivor0</li>\n\t<li>再次YGC，活着的对象eden+s0拷贝到s1，将eden和s0清空</li>\n\t<li>再次YGC，活着的对象eden+s1拷贝到s0，将eden和s1清空</li>\n\t<li>年龄足够-&gt;老年代(年龄足够：15，CMS 6)</li>\n\t<li>survivor区装不下的时候，装不下的部分直接进入老年代</li>\n</ul><p><span style=\"color:#f33b45;\"><strong>老年代：</strong></span></p>\n\n<ul><li>顽固份子</li>\n\t<li>老年代区域满了，就进行Full GC(简称FGC, FGC包括新生代和老年代同时GC)</li>\n</ul><p><span style=\"color:#f33b45;\"><strong>GC Tuning：</strong></span>尽量减少FGC。</p>\n\n<h1 id=\"5%E3%80%81%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8\"><a name=\"t15\"></a><a name=\"t15\"></a>5、垃圾回收器</h1>\n\n<p><img alt=\"\" height=\"414\" src=\"https://img-blog.csdnimg.cn/20200220125708117.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"863\"></p>\n\n<ul><li>Serial、ParNew、Parallel Scavenge是用于回收Young Generation</li>\n\t<li>CMS、Serial Old、Parallel Old是用于回收Old Generation</li>\n\t<li>G1、ZGC、Shenandoah不区分老年代和新生代。</li>\n\t<li>Epsilon是一个空的GC，仅仅用于调试JDK。</li>\n\t<li>图中的红色虚线表示可以配合使用。</li>\n</ul><h2 id=\"Serial\"><a name=\"t16\"></a><a name=\"t16\"></a>Serial</h2>\n\n<p><img alt=\"\" height=\"436\" src=\"https://img-blog.csdnimg.cn/20200220130215487.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"815\"></p>\n\n<p>垃圾回收的时候，程序是无法执行的。stop-the-world(STW)是停止程序运行，回收线程开始运行，回收结束后程序再接着运行。</p>\n\n<h2 id=\"Parallel%20Scavenge\"><a name=\"t17\"></a><a name=\"t17\"></a>Parallel Scavenge</h2>\n\n<p><img alt=\"\" height=\"471\" src=\"https://img-blog.csdnimg.cn/20200220130956610.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"808\"></p>\n\n<p>并行回收，多个线程同时进行垃圾回收。</p>\n\n<h2 id=\"ParNew\"><a name=\"t18\"></a><a name=\"t18\"></a>ParNew</h2>\n\n<p><img alt=\"\" height=\"474\" src=\"https://img-blog.csdnimg.cn/2020022013122529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"827\"></p>\n\n<p>配合CMS的年轻代并行回收。</p>\n\n<h2 id=\"SerialOld\"><a name=\"t19\"></a><a name=\"t19\"></a>SerialOld</h2>\n\n<p>单线程回收算法用于old区域</p>\n\n<h2 id=\"Parallel%20Old\"><a name=\"t20\"></a><a name=\"t20\"></a>Parallel Old</h2>\n\n<p>多线程回收算法用于old区域</p>\n\n<h2 id=\"CMS\"><a name=\"t21\"></a><a name=\"t21\"></a>CMS</h2>\n\n<p>ConcurrentMarkSweep，用于回收老年代，在垃圾回收的同时程序也能运行。(黄色的表示垃圾回收线程，蓝色表示程序执行线程）</p>\n\n<p><img alt=\"\" height=\"456\" src=\"https://img-blog.csdnimg.cn/20200220132715191.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"835\"></p>\n\n<p><img alt=\"\" height=\"445\" src=\"https://img-blog.csdnimg.cn/20200220133005356.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"836\"></p>\n\n<p>调优针对的是Serial、Parallel Scavenge和Serial Old、Parallel New，因为JDK1.8默认的垃圾回收：Parallel Scavenge + Parallel Old。</p>\n\n<h1 id=\"6%E3%80%81JVM%E5%8F%82%E6%95%B0\"><a name=\"t22\"></a><a name=\"t22\"></a>6、JVM参数</h1>\n\n<p>JVM的命令行参数参考：https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html</p>\n\n<p>JVM参数分类：</p>\n\n<ul><li>标准：-开头，所有的HotSpot都支持。 如：java -version</li>\n\t<li>非标准：-X开头，特定版本HotSpot支持特定命令</li>\n\t<li>不稳定：-XX开头，下个版本可能取消\n\t<ol><li>-XX: +PrintFlagsFinal &nbsp; --- 设置值（最终生效值)</li>\n\t\t<li>-XX:+PrintFlagsInitial &nbsp;--- 默认值</li>\n\t\t<li>-XX:+PrintCommandLineFlags ---命令行参数</li>\n\t</ol></li>\n</ul><h1 id=\"7%E3%80%81%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE\"><a name=\"t23\"></a><a name=\"t23\"></a>7、思维导图</h1>\n\n<p><img alt=\"\" src=\"https://img-blog.csdnimg.cn/20200220151948590.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\"></p>\n\n<p>参考文档：</p>\n\n<p><a href=\"https://blogs.oracle.com/jonthecollector/our-collectors\" rel=\"nofollow\">https://blogs.oracle.com/jonthecollector/our-collectors</a></p>\n\n<p><a href=\"https://blogs.oracle.com/jonthecollector/why-not-a-grand-unified-garbage-collector\" rel=\"nofollow\">https://blogs.oracle.com/jonthecollector/why-not-a-grand-unified-garbage-collector</a></p>\n","slug":"jvm-GC-and-GC-Tuning","published":1,"date":"2020-02-26T02:29:19.384Z","updated":"2020-02-26T02:58:40.595Z","title":"jvm-GC-and-GC-Tuning","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7fy5xje00008ds6bzlza07q","content":"<div id=\"article_content\" class=\"article_content clearfix\">\n            <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-833878f763.css\">\n                                        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-833878f763.css\">\n                <div class=\"htmledit_views\" id=\"content_views\">\n                                            <p id=\"main-toc\"><strong>目录</strong></p>\n\n<p id=\"1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E5%9E%83%E5%9C%BE-toc\" style=\"margin-left:0px;\"><a href=\"#1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E5%9E%83%E5%9C%BE\" rel=\"nofollow\" target=\"_self\">1、什么是垃圾</a></p>\n\n<p id=\"2%E3%80%81%E5%A6%82%E4%BD%95%E5%AE%9A%E4%BD%8D%E5%9E%83%E5%9C%BE-toc\" style=\"margin-left:0px;\"><a href=\"#2%E3%80%81%E5%A6%82%E4%BD%95%E5%AE%9A%E4%BD%8D%E5%9E%83%E5%9C%BE\" rel=\"nofollow\" target=\"_self\">2、如何定位垃圾</a></p>\n\n<p id=\"reference%20count-toc\" style=\"margin-left:40px;\"><a href=\"#reference%20count\" rel=\"nofollow\" target=\"_self\">reference count</a></p>\n\n<p id=\"Root%20Searching-toc\" style=\"margin-left:40px;\"><a href=\"#Root%20Searching\" rel=\"nofollow\" target=\"_self\">Root Searching</a></p>\n\n<p id=\"3%E3%80%81%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95-toc\" style=\"margin-left:0px;\"><a href=\"#3%E3%80%81%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95\" rel=\"nofollow\" target=\"_self\">3、常见的垃圾回收算法</a></p>\n\n<p id=\"Mark-Sweep(%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4)-toc\" style=\"margin-left:40px;\"><a href=\"#Mark-Sweep(%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4)\" rel=\"nofollow\" target=\"_self\">Mark-Sweep(标记清除)</a></p>\n\n<p id=\"Copying(%E6%8B%B7%E8%B4%9D%E7%AE%97%E6%B3%95%EF%BC%89-toc\" style=\"margin-left:40px;\"><a href=\"#Copying(%E6%8B%B7%E8%B4%9D%E7%AE%97%E6%B3%95%EF%BC%89\" rel=\"nofollow\" target=\"_self\">Copying(拷贝算法）</a></p>\n\n<p id=\"Mark-Compact%EF%BC%88%E6%A0%87%E8%AE%B0%E5%8E%8B%E7%BC%A9)-toc\" style=\"margin-left:40px;\"><a href=\"#Mark-Compact%EF%BC%88%E6%A0%87%E8%AE%B0%E5%8E%8B%E7%BC%A9)\" rel=\"nofollow\" target=\"_self\">Mark-Compact（标记压缩)</a><a href=\"#%E2%80%8B\" rel=\"nofollow\" target=\"_self\">​</a></p>\n\n<p id=\"4%E3%80%81JVM%E5%86%85%E5%AD%98%E5%88%86%E4%BB%A3%E6%A8%A1%E5%9E%8B(%E7%94%A8%E4%BA%8E%E5%88%86%E4%BB%A3%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95%EF%BC%89-toc\" style=\"margin-left:0px;\"><a href=\"#4%E3%80%81JVM%E5%86%85%E5%AD%98%E5%88%86%E4%BB%A3%E6%A8%A1%E5%9E%8B(%E7%94%A8%E4%BA%8E%E5%88%86%E4%BB%A3%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95%EF%BC%89\" rel=\"nofollow\" target=\"_self\">4、JVM内存分代模型(用于分代垃圾回收算法）</a></p>\n\n<p id=\"%E5%A0%86%E5%86%85%E5%AD%98%E9%80%BB%E8%BE%91%E5%88%86%E5%8C%BA-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%A0%86%E5%86%85%E5%AD%98%E9%80%BB%E8%BE%91%E5%88%86%E5%8C%BA\" rel=\"nofollow\" target=\"_self\">堆内存逻辑分区</a></p>\n\n<p id=\"5%E3%80%81%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8-toc\" style=\"margin-left:0px;\"><a href=\"#5%E3%80%81%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8\" rel=\"nofollow\" target=\"_self\">5、垃圾回收器</a></p>\n\n<p id=\"Serial-toc\" style=\"margin-left:40px;\"><a href=\"#Serial\" rel=\"nofollow\" target=\"_self\">Serial</a></p>\n\n<p id=\"Parallel%20Scavenge-toc\" style=\"margin-left:40px;\"><a href=\"#Parallel%20Scavenge\" rel=\"nofollow\" target=\"_self\">Parallel Scavenge</a></p>\n\n<p id=\"ParNew-toc\" style=\"margin-left:40px;\"><a href=\"#ParNew\" rel=\"nofollow\" target=\"_self\">ParNew</a></p>\n\n<p id=\"SerialOld-toc\" style=\"margin-left:40px;\"><a href=\"#SerialOld\" rel=\"nofollow\" target=\"_self\">SerialOld</a></p>\n\n<p id=\"Parallel%20Old-toc\" style=\"margin-left:40px;\"><a href=\"#Parallel%20Old\" rel=\"nofollow\" target=\"_self\">Parallel Old</a></p>\n\n<p id=\"CMS-toc\" style=\"margin-left:40px;\"><a href=\"#CMS\" rel=\"nofollow\" target=\"_self\">CMS</a></p>\n\n<p id=\"6%E3%80%81JVM%E5%8F%82%E6%95%B0-toc\" style=\"margin-left:0px;\"><a href=\"#6%E3%80%81JVM%E5%8F%82%E6%95%B0\" rel=\"nofollow\" target=\"_self\">6、JVM参数</a></p>\n\n<p id=\"7%E3%80%81%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE-toc\" style=\"margin-left:0px;\"><a href=\"#7%E3%80%81%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE\" rel=\"nofollow\" target=\"_self\">7、思维导图</a></p>\n\n<hr id=\"hr-toc\"><h1 id=\"1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E5%9E%83%E5%9C%BE\"><a name=\"t0\"></a><a name=\"t0\"></a>1、什么是垃圾</h1>\n\n<p>内存分配与回收方式：</p>\n\n<ul><li>\n    <p>C语言：malloc、free</p>\n    </li>\n    <li>\n    <p>C++：new、delete</p>\n    </li>\n    <li>\n    <p>Java：new&nbsp; 自动回收内存</p>\n    </li>\n</ul><p>自动回收内存系统不容易出错，手动回收内存，容易出现以下的错误：</p>\n\n<ul><li>\n    <p>忘记回收</p>\n    </li>\n    <li>\n    <p>多次回收</p>\n    </li>\n</ul><p>垃圾的定义：没有任何引用指向的一个对象或者多个对象(循环引用）。</p>\n\n<p><img alt=\"\" height=\"263\" src=\"https://img-blog.csdnimg.cn/20200218153041603.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"489\"></p>\n\n<p>当把成员变量设置为空(null)之后，不再指向任何引用对象，那么该对象就被称作垃圾：</p>\n\n<h2 id=\"%E2%80%8B\"><a name=\"t1\"></a><img alt=\"\" height=\"259\" src=\"https://img-blog.csdnimg.cn/20200218154813459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"503\"></h2>\n\n<p>还有一种情况，多个对象之间互相引用，但是没有其他的引用指向这个循环的对象。&nbsp;&nbsp;</p>\n\n<h2><a name=\"t2\"></a><img alt=\"\" height=\"320\" src=\"https://img-blog.csdnimg.cn/20200218155228678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"503\"></h2>\n\n<h1 id=\"2%E3%80%81%E5%A6%82%E4%BD%95%E5%AE%9A%E4%BD%8D%E5%9E%83%E5%9C%BE\"><a name=\"t3\"></a><a name=\"t3\"></a>2、如何定位垃圾</h1>\n\n<ul><li>\n    <h2 id=\"reference%20count\"><a name=\"t4\"></a><a name=\"t4\"></a>reference count</h2>\n    </li>\n</ul><h2><a name=\"t5\"></a><img alt=\"\" height=\"381\" src=\"https://img-blog.csdnimg.cn/20200218160722764.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"508\"></h2>\n\n<p>当引用计数变为0的时候，这个对象就成为垃圾了。但是引用计数不能解决对象循环引用</p>\n\n<p>如下：</p>\n\n<p><img alt=\"\" height=\"320\" src=\"https://img-blog.csdnimg.cn/20200218155228678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"503\"></p>\n\n<p>每个引用计数都是1，但是它们全部是垃圾，所以用引用计数的方式的话，这些垃圾就找不到了，会发生内存泄漏。</p>\n\n<ul><li>\n    <h2 id=\"Root%20Searching\"><a name=\"t6\"></a><a name=\"t6\"></a>Root Searching</h2>\n    </li>\n</ul><p>根可达或者根搜索算法。</p>\n\n<p>通过程序找到一些根对象，通过根对象找到它所连接的那些对象不是垃圾，其他的都是垃圾。</p>\n\n<p>Roots：线程栈变量、静态变量、常量池、JNI指针</p>\n\n<h2><a name=\"t7\"></a><img alt=\"\" height=\"334\" src=\"https://img-blog.csdnimg.cn/20200218163811236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"684\"></h2>\n\n<h1 id=\"3%E3%80%81%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95\"><a name=\"t8\"></a><a name=\"t8\"></a>3、常见的垃圾回收算法</h1>\n\n<ul><li>\n    <h2 id=\"Mark-Sweep(%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4)\"><a name=\"t9\"></a><a name=\"t9\"></a>Mark-Sweep(标记清除)</h2>\n    </li>\n</ul><p><img alt=\"\" height=\"461\" src=\"https://img-blog.csdnimg.cn/2020021817055046.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"698\"></p>\n\n<p>将可回收的对象标记为非垃圾。</p>\n\n<p>缺点：位置不连续，产生内存碎片。</p>\n\n<ul><li>\n    <h2 id=\"Copying(%E6%8B%B7%E8%B4%9D%E7%AE%97%E6%B3%95%EF%BC%89\"><a name=\"t10\"></a><a name=\"t10\"></a>Copying(拷贝算法）</h2>\n    </li>\n</ul><p><img alt=\"\" height=\"409\" src=\"https://img-blog.csdnimg.cn/20200218171626281.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"697\"></p>\n\n<p>内存一分为二，将存活对象复制到未使用的内存中，原内存全部标记为可使用；新分配内存时先分配存活对象所在的那段内存，垃圾回收时，重复上述操作。</p>\n\n<p>特点：没有碎片，但是内浪费空间。最大的问题：内存浪费。</p>\n\n<ul><li>\n    <h2 id=\"Mark-Compact%EF%BC%88%E6%A0%87%E8%AE%B0%E5%8E%8B%E7%BC%A9)\"><a name=\"t11\"></a><a name=\"t11\"></a>Mark-Compact（标记压缩)</h2>\n    </li>\n</ul><h2><a name=\"t12\"></a><img alt=\"\" height=\"460\" src=\"https://img-blog.csdnimg.cn/20200218174827773.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"691\"></h2>\n\n<p>将存活对象依次复制到垃圾对象和未使用的区域中，结合了标记清除和拷贝的做法，但是效率比copy略低。</p>\n\n<p>三种方法找垃圾的效率是一致的，区别在于找到垃圾后对其进行整理的方式。拷贝算法是内存拷贝，是线性地址的拷贝，速度很快的，效率很高。但是压缩算法却不这么简单，因为任意一个内存进行移动时，如果是多线程， 都要进行线程同步；如果是单线程，那单线程的效率本来就低。 所以任何一块内存挪动都要进行线程同步，所以效率肯定是很低的。</p>\n\n<h1 id=\"4%E3%80%81JVM%E5%86%85%E5%AD%98%E5%88%86%E4%BB%A3%E6%A8%A1%E5%9E%8B(%E7%94%A8%E4%BA%8E%E5%88%86%E4%BB%A3%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95%EF%BC%89\"><a name=\"t13\"></a><a name=\"t13\"></a>4、JVM内存分代模型(用于分代垃圾回收算法）</h1>\n\n<p>目前，生产环境中普遍使用的是JDK1.7或JDK1.8，根据JDK版本不同，分代也不同。</p>\n\n<p>JVM中分代：新生代+老年代+永久代(JDK1.7)/元数据区(JDK1.8)Metaspace。</p>\n\n<ul><li>永久代和元数据区是装载Class的，将硬盘上的Class对象load到内存的时候，装载了永久代或者元数据区域，具体放在哪里区别于使用的JDK版本</li>\n    <li>永久代必须指定大小限制，而元数据可以设置，也可不设置，无上限(受限于物理内存）</li>\n    <li>字符串常量在JDK1.7中，是放在永久代区域；而JDK1.8中，是放在堆里</li>\n    <li>MethodArea是一个逻辑概念，并不是指的一个区域，在JDK1.7中对应的就是永久代，JDK1.8中对应的是元数据</li>\n</ul><h2 id=\"%E5%A0%86%E5%86%85%E5%AD%98%E9%80%BB%E8%BE%91%E5%88%86%E5%8C%BA\"><a name=\"t14\"></a><a name=\"t14\"></a>堆内存逻辑分区</h2>\n\n<p><img alt=\"\" height=\"467\" src=\"https://img-blog.csdnimg.cn/20200220122652988.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"817\"></p>\n\n<ul><li>新生代中分了两类区域，eden和survivor，而survivor有两块。默认的比例，新生代：老年代=1：3，新生代中eden: survivor：survivor = 8:1:1。</li>\n</ul><p>之所以新生代中按照这个比例分配，是因为eden区在GC的时候，90%的对象都会被回收，剩下的存活对象在survivor区是可以放下的。</p>\n\n<p>当创建一个对象时，默认会去找eden区， 如果对象特别大，eden区装不下则直接进入老年代。</p>\n\n<p><span style=\"color:#f33b45;\"><strong>新生代 = Eden + 2个survivor区(survivor0、survivor1）</strong>：</span></p>\n\n<ul><li>YGC(Young GC)回收后，大多数的对象会被回收，活着的对象进入survivor0</li>\n    <li>再次YGC，活着的对象eden+s0拷贝到s1，将eden和s0清空</li>\n    <li>再次YGC，活着的对象eden+s1拷贝到s0，将eden和s1清空</li>\n    <li>年龄足够-&gt;老年代(年龄足够：15，CMS 6)</li>\n    <li>survivor区装不下的时候，装不下的部分直接进入老年代</li>\n</ul><p><span style=\"color:#f33b45;\"><strong>老年代：</strong></span></p>\n\n<ul><li>顽固份子</li>\n    <li>老年代区域满了，就进行Full GC(简称FGC, FGC包括新生代和老年代同时GC)</li>\n</ul><p><span style=\"color:#f33b45;\"><strong>GC Tuning：</strong></span>尽量减少FGC。</p>\n\n<h1 id=\"5%E3%80%81%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8\"><a name=\"t15\"></a><a name=\"t15\"></a>5、垃圾回收器</h1>\n\n<p><img alt=\"\" height=\"414\" src=\"https://img-blog.csdnimg.cn/20200220125708117.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"863\"></p>\n\n<ul><li>Serial、ParNew、Parallel Scavenge是用于回收Young Generation</li>\n    <li>CMS、Serial Old、Parallel Old是用于回收Old Generation</li>\n    <li>G1、ZGC、Shenandoah不区分老年代和新生代。</li>\n    <li>Epsilon是一个空的GC，仅仅用于调试JDK。</li>\n    <li>图中的红色虚线表示可以配合使用。</li>\n</ul><h2 id=\"Serial\"><a name=\"t16\"></a><a name=\"t16\"></a>Serial</h2>\n\n<p><img alt=\"\" height=\"436\" src=\"https://img-blog.csdnimg.cn/20200220130215487.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"815\"></p>\n\n<p>垃圾回收的时候，程序是无法执行的。stop-the-world(STW)是停止程序运行，回收线程开始运行，回收结束后程序再接着运行。</p>\n\n<h2 id=\"Parallel%20Scavenge\"><a name=\"t17\"></a><a name=\"t17\"></a>Parallel Scavenge</h2>\n\n<p><img alt=\"\" height=\"471\" src=\"https://img-blog.csdnimg.cn/20200220130956610.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"808\"></p>\n\n<p>并行回收，多个线程同时进行垃圾回收。</p>\n\n<h2 id=\"ParNew\"><a name=\"t18\"></a><a name=\"t18\"></a>ParNew</h2>\n\n<p><img alt=\"\" height=\"474\" src=\"https://img-blog.csdnimg.cn/2020022013122529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"827\"></p>\n\n<p>配合CMS的年轻代并行回收。</p>\n\n<h2 id=\"SerialOld\"><a name=\"t19\"></a><a name=\"t19\"></a>SerialOld</h2>\n\n<p>单线程回收算法用于old区域</p>\n\n<h2 id=\"Parallel%20Old\"><a name=\"t20\"></a><a name=\"t20\"></a>Parallel Old</h2>\n\n<p>多线程回收算法用于old区域</p>\n\n<h2 id=\"CMS\"><a name=\"t21\"></a><a name=\"t21\"></a>CMS</h2>\n\n<p>ConcurrentMarkSweep，用于回收老年代，在垃圾回收的同时程序也能运行。(黄色的表示垃圾回收线程，蓝色表示程序执行线程）</p>\n\n<p><img alt=\"\" height=\"456\" src=\"https://img-blog.csdnimg.cn/20200220132715191.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"835\"></p>\n\n<p><img alt=\"\" height=\"445\" src=\"https://img-blog.csdnimg.cn/20200220133005356.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"836\"></p>\n\n<p>调优针对的是Serial、Parallel Scavenge和Serial Old、Parallel New，因为JDK1.8默认的垃圾回收：Parallel Scavenge + Parallel Old。</p>\n\n<h1 id=\"6%E3%80%81JVM%E5%8F%82%E6%95%B0\"><a name=\"t22\"></a><a name=\"t22\"></a>6、JVM参数</h1>\n\n<p>JVM的命令行参数参考：https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html</p>\n\n<p>JVM参数分类：</p>\n\n<ul><li>标准：-开头，所有的HotSpot都支持。 如：java -version</li>\n    <li>非标准：-X开头，特定版本HotSpot支持特定命令</li>\n    <li>不稳定：-XX开头，下个版本可能取消\n    <ol><li>-XX: +PrintFlagsFinal &nbsp; --- 设置值（最终生效值)</li>\n        <li>-XX:+PrintFlagsInitial &nbsp;--- 默认值</li>\n        <li>-XX:+PrintCommandLineFlags ---命令行参数</li>\n    </ol></li>\n</ul><h1 id=\"7%E3%80%81%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE\"><a name=\"t23\"></a><a name=\"t23\"></a>7、思维导图</h1>\n\n<p><img alt=\"\" src=\"https://img-blog.csdnimg.cn/20200220151948590.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\"></p>\n\n<p>参考文档：</p>\n\n<p><a href=\"https://blogs.oracle.com/jonthecollector/our-collectors\" target=\"_blank\" rel=\"nofollow noopener\">https://blogs.oracle.com/jonthecollector/our-collectors</a></p>\n\n<p><a href=\"https://blogs.oracle.com/jonthecollector/why-not-a-grand-unified-garbage-collector\" target=\"_blank\" rel=\"nofollow noopener\">https://blogs.oracle.com/jonthecollector/why-not-a-grand-unified-garbage-collector</a></p>\n","site":{"data":{}},"excerpt":"","more":"<div id=\"article_content\" class=\"article_content clearfix\">\n            <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-833878f763.css\">\n                                        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-833878f763.css\">\n                <div class=\"htmledit_views\" id=\"content_views\">\n                                            <p id=\"main-toc\"><strong>目录</strong></p>\n\n<p id=\"1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E5%9E%83%E5%9C%BE-toc\" style=\"margin-left:0px;\"><a href=\"#1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E5%9E%83%E5%9C%BE\" rel=\"nofollow\" target=\"_self\">1、什么是垃圾</a></p>\n\n<p id=\"2%E3%80%81%E5%A6%82%E4%BD%95%E5%AE%9A%E4%BD%8D%E5%9E%83%E5%9C%BE-toc\" style=\"margin-left:0px;\"><a href=\"#2%E3%80%81%E5%A6%82%E4%BD%95%E5%AE%9A%E4%BD%8D%E5%9E%83%E5%9C%BE\" rel=\"nofollow\" target=\"_self\">2、如何定位垃圾</a></p>\n\n<p id=\"reference%20count-toc\" style=\"margin-left:40px;\"><a href=\"#reference%20count\" rel=\"nofollow\" target=\"_self\">reference count</a></p>\n\n<p id=\"Root%20Searching-toc\" style=\"margin-left:40px;\"><a href=\"#Root%20Searching\" rel=\"nofollow\" target=\"_self\">Root Searching</a></p>\n\n<p id=\"3%E3%80%81%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95-toc\" style=\"margin-left:0px;\"><a href=\"#3%E3%80%81%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95\" rel=\"nofollow\" target=\"_self\">3、常见的垃圾回收算法</a></p>\n\n<p id=\"Mark-Sweep(%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4)-toc\" style=\"margin-left:40px;\"><a href=\"#Mark-Sweep(%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4)\" rel=\"nofollow\" target=\"_self\">Mark-Sweep(标记清除)</a></p>\n\n<p id=\"Copying(%E6%8B%B7%E8%B4%9D%E7%AE%97%E6%B3%95%EF%BC%89-toc\" style=\"margin-left:40px;\"><a href=\"#Copying(%E6%8B%B7%E8%B4%9D%E7%AE%97%E6%B3%95%EF%BC%89\" rel=\"nofollow\" target=\"_self\">Copying(拷贝算法）</a></p>\n\n<p id=\"Mark-Compact%EF%BC%88%E6%A0%87%E8%AE%B0%E5%8E%8B%E7%BC%A9)-toc\" style=\"margin-left:40px;\"><a href=\"#Mark-Compact%EF%BC%88%E6%A0%87%E8%AE%B0%E5%8E%8B%E7%BC%A9)\" rel=\"nofollow\" target=\"_self\">Mark-Compact（标记压缩)</a><a href=\"#%E2%80%8B\" rel=\"nofollow\" target=\"_self\">​</a></p>\n\n<p id=\"4%E3%80%81JVM%E5%86%85%E5%AD%98%E5%88%86%E4%BB%A3%E6%A8%A1%E5%9E%8B(%E7%94%A8%E4%BA%8E%E5%88%86%E4%BB%A3%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95%EF%BC%89-toc\" style=\"margin-left:0px;\"><a href=\"#4%E3%80%81JVM%E5%86%85%E5%AD%98%E5%88%86%E4%BB%A3%E6%A8%A1%E5%9E%8B(%E7%94%A8%E4%BA%8E%E5%88%86%E4%BB%A3%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95%EF%BC%89\" rel=\"nofollow\" target=\"_self\">4、JVM内存分代模型(用于分代垃圾回收算法）</a></p>\n\n<p id=\"%E5%A0%86%E5%86%85%E5%AD%98%E9%80%BB%E8%BE%91%E5%88%86%E5%8C%BA-toc\" style=\"margin-left:40px;\"><a href=\"#%E5%A0%86%E5%86%85%E5%AD%98%E9%80%BB%E8%BE%91%E5%88%86%E5%8C%BA\" rel=\"nofollow\" target=\"_self\">堆内存逻辑分区</a></p>\n\n<p id=\"5%E3%80%81%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8-toc\" style=\"margin-left:0px;\"><a href=\"#5%E3%80%81%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8\" rel=\"nofollow\" target=\"_self\">5、垃圾回收器</a></p>\n\n<p id=\"Serial-toc\" style=\"margin-left:40px;\"><a href=\"#Serial\" rel=\"nofollow\" target=\"_self\">Serial</a></p>\n\n<p id=\"Parallel%20Scavenge-toc\" style=\"margin-left:40px;\"><a href=\"#Parallel%20Scavenge\" rel=\"nofollow\" target=\"_self\">Parallel Scavenge</a></p>\n\n<p id=\"ParNew-toc\" style=\"margin-left:40px;\"><a href=\"#ParNew\" rel=\"nofollow\" target=\"_self\">ParNew</a></p>\n\n<p id=\"SerialOld-toc\" style=\"margin-left:40px;\"><a href=\"#SerialOld\" rel=\"nofollow\" target=\"_self\">SerialOld</a></p>\n\n<p id=\"Parallel%20Old-toc\" style=\"margin-left:40px;\"><a href=\"#Parallel%20Old\" rel=\"nofollow\" target=\"_self\">Parallel Old</a></p>\n\n<p id=\"CMS-toc\" style=\"margin-left:40px;\"><a href=\"#CMS\" rel=\"nofollow\" target=\"_self\">CMS</a></p>\n\n<p id=\"6%E3%80%81JVM%E5%8F%82%E6%95%B0-toc\" style=\"margin-left:0px;\"><a href=\"#6%E3%80%81JVM%E5%8F%82%E6%95%B0\" rel=\"nofollow\" target=\"_self\">6、JVM参数</a></p>\n\n<p id=\"7%E3%80%81%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE-toc\" style=\"margin-left:0px;\"><a href=\"#7%E3%80%81%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE\" rel=\"nofollow\" target=\"_self\">7、思维导图</a></p>\n\n<hr id=\"hr-toc\"><h1 id=\"1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E5%9E%83%E5%9C%BE\"><a name=\"t0\"></a><a name=\"t0\"></a>1、什么是垃圾</h1>\n\n<p>内存分配与回收方式：</p>\n\n<ul><li>\n    <p>C语言：malloc、free</p>\n    </li>\n    <li>\n    <p>C++：new、delete</p>\n    </li>\n    <li>\n    <p>Java：new&nbsp; 自动回收内存</p>\n    </li>\n</ul><p>自动回收内存系统不容易出错，手动回收内存，容易出现以下的错误：</p>\n\n<ul><li>\n    <p>忘记回收</p>\n    </li>\n    <li>\n    <p>多次回收</p>\n    </li>\n</ul><p>垃圾的定义：没有任何引用指向的一个对象或者多个对象(循环引用）。</p>\n\n<p><img alt=\"\" height=\"263\" src=\"https://img-blog.csdnimg.cn/20200218153041603.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"489\"></p>\n\n<p>当把成员变量设置为空(null)之后，不再指向任何引用对象，那么该对象就被称作垃圾：</p>\n\n<h2 id=\"%E2%80%8B\"><a name=\"t1\"></a><img alt=\"\" height=\"259\" src=\"https://img-blog.csdnimg.cn/20200218154813459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"503\"></h2>\n\n<p>还有一种情况，多个对象之间互相引用，但是没有其他的引用指向这个循环的对象。&nbsp;&nbsp;</p>\n\n<h2><a name=\"t2\"></a><img alt=\"\" height=\"320\" src=\"https://img-blog.csdnimg.cn/20200218155228678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"503\"></h2>\n\n<h1 id=\"2%E3%80%81%E5%A6%82%E4%BD%95%E5%AE%9A%E4%BD%8D%E5%9E%83%E5%9C%BE\"><a name=\"t3\"></a><a name=\"t3\"></a>2、如何定位垃圾</h1>\n\n<ul><li>\n    <h2 id=\"reference%20count\"><a name=\"t4\"></a><a name=\"t4\"></a>reference count</h2>\n    </li>\n</ul><h2><a name=\"t5\"></a><img alt=\"\" height=\"381\" src=\"https://img-blog.csdnimg.cn/20200218160722764.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"508\"></h2>\n\n<p>当引用计数变为0的时候，这个对象就成为垃圾了。但是引用计数不能解决对象循环引用</p>\n\n<p>如下：</p>\n\n<p><img alt=\"\" height=\"320\" src=\"https://img-blog.csdnimg.cn/20200218155228678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"503\"></p>\n\n<p>每个引用计数都是1，但是它们全部是垃圾，所以用引用计数的方式的话，这些垃圾就找不到了，会发生内存泄漏。</p>\n\n<ul><li>\n    <h2 id=\"Root%20Searching\"><a name=\"t6\"></a><a name=\"t6\"></a>Root Searching</h2>\n    </li>\n</ul><p>根可达或者根搜索算法。</p>\n\n<p>通过程序找到一些根对象，通过根对象找到它所连接的那些对象不是垃圾，其他的都是垃圾。</p>\n\n<p>Roots：线程栈变量、静态变量、常量池、JNI指针</p>\n\n<h2><a name=\"t7\"></a><img alt=\"\" height=\"334\" src=\"https://img-blog.csdnimg.cn/20200218163811236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"684\"></h2>\n\n<h1 id=\"3%E3%80%81%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95\"><a name=\"t8\"></a><a name=\"t8\"></a>3、常见的垃圾回收算法</h1>\n\n<ul><li>\n    <h2 id=\"Mark-Sweep(%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4)\"><a name=\"t9\"></a><a name=\"t9\"></a>Mark-Sweep(标记清除)</h2>\n    </li>\n</ul><p><img alt=\"\" height=\"461\" src=\"https://img-blog.csdnimg.cn/2020021817055046.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"698\"></p>\n\n<p>将可回收的对象标记为非垃圾。</p>\n\n<p>缺点：位置不连续，产生内存碎片。</p>\n\n<ul><li>\n    <h2 id=\"Copying(%E6%8B%B7%E8%B4%9D%E7%AE%97%E6%B3%95%EF%BC%89\"><a name=\"t10\"></a><a name=\"t10\"></a>Copying(拷贝算法）</h2>\n    </li>\n</ul><p><img alt=\"\" height=\"409\" src=\"https://img-blog.csdnimg.cn/20200218171626281.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"697\"></p>\n\n<p>内存一分为二，将存活对象复制到未使用的内存中，原内存全部标记为可使用；新分配内存时先分配存活对象所在的那段内存，垃圾回收时，重复上述操作。</p>\n\n<p>特点：没有碎片，但是内浪费空间。最大的问题：内存浪费。</p>\n\n<ul><li>\n    <h2 id=\"Mark-Compact%EF%BC%88%E6%A0%87%E8%AE%B0%E5%8E%8B%E7%BC%A9)\"><a name=\"t11\"></a><a name=\"t11\"></a>Mark-Compact（标记压缩)</h2>\n    </li>\n</ul><h2><a name=\"t12\"></a><img alt=\"\" height=\"460\" src=\"https://img-blog.csdnimg.cn/20200218174827773.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"691\"></h2>\n\n<p>将存活对象依次复制到垃圾对象和未使用的区域中，结合了标记清除和拷贝的做法，但是效率比copy略低。</p>\n\n<p>三种方法找垃圾的效率是一致的，区别在于找到垃圾后对其进行整理的方式。拷贝算法是内存拷贝，是线性地址的拷贝，速度很快的，效率很高。但是压缩算法却不这么简单，因为任意一个内存进行移动时，如果是多线程， 都要进行线程同步；如果是单线程，那单线程的效率本来就低。 所以任何一块内存挪动都要进行线程同步，所以效率肯定是很低的。</p>\n\n<h1 id=\"4%E3%80%81JVM%E5%86%85%E5%AD%98%E5%88%86%E4%BB%A3%E6%A8%A1%E5%9E%8B(%E7%94%A8%E4%BA%8E%E5%88%86%E4%BB%A3%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95%EF%BC%89\"><a name=\"t13\"></a><a name=\"t13\"></a>4、JVM内存分代模型(用于分代垃圾回收算法）</h1>\n\n<p>目前，生产环境中普遍使用的是JDK1.7或JDK1.8，根据JDK版本不同，分代也不同。</p>\n\n<p>JVM中分代：新生代+老年代+永久代(JDK1.7)/元数据区(JDK1.8)Metaspace。</p>\n\n<ul><li>永久代和元数据区是装载Class的，将硬盘上的Class对象load到内存的时候，装载了永久代或者元数据区域，具体放在哪里区别于使用的JDK版本</li>\n    <li>永久代必须指定大小限制，而元数据可以设置，也可不设置，无上限(受限于物理内存）</li>\n    <li>字符串常量在JDK1.7中，是放在永久代区域；而JDK1.8中，是放在堆里</li>\n    <li>MethodArea是一个逻辑概念，并不是指的一个区域，在JDK1.7中对应的就是永久代，JDK1.8中对应的是元数据</li>\n</ul><h2 id=\"%E5%A0%86%E5%86%85%E5%AD%98%E9%80%BB%E8%BE%91%E5%88%86%E5%8C%BA\"><a name=\"t14\"></a><a name=\"t14\"></a>堆内存逻辑分区</h2>\n\n<p><img alt=\"\" height=\"467\" src=\"https://img-blog.csdnimg.cn/20200220122652988.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"817\"></p>\n\n<ul><li>新生代中分了两类区域，eden和survivor，而survivor有两块。默认的比例，新生代：老年代=1：3，新生代中eden: survivor：survivor = 8:1:1。</li>\n</ul><p>之所以新生代中按照这个比例分配，是因为eden区在GC的时候，90%的对象都会被回收，剩下的存活对象在survivor区是可以放下的。</p>\n\n<p>当创建一个对象时，默认会去找eden区， 如果对象特别大，eden区装不下则直接进入老年代。</p>\n\n<p><span style=\"color:#f33b45;\"><strong>新生代 = Eden + 2个survivor区(survivor0、survivor1）</strong>：</span></p>\n\n<ul><li>YGC(Young GC)回收后，大多数的对象会被回收，活着的对象进入survivor0</li>\n    <li>再次YGC，活着的对象eden+s0拷贝到s1，将eden和s0清空</li>\n    <li>再次YGC，活着的对象eden+s1拷贝到s0，将eden和s1清空</li>\n    <li>年龄足够-&gt;老年代(年龄足够：15，CMS 6)</li>\n    <li>survivor区装不下的时候，装不下的部分直接进入老年代</li>\n</ul><p><span style=\"color:#f33b45;\"><strong>老年代：</strong></span></p>\n\n<ul><li>顽固份子</li>\n    <li>老年代区域满了，就进行Full GC(简称FGC, FGC包括新生代和老年代同时GC)</li>\n</ul><p><span style=\"color:#f33b45;\"><strong>GC Tuning：</strong></span>尽量减少FGC。</p>\n\n<h1 id=\"5%E3%80%81%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8\"><a name=\"t15\"></a><a name=\"t15\"></a>5、垃圾回收器</h1>\n\n<p><img alt=\"\" height=\"414\" src=\"https://img-blog.csdnimg.cn/20200220125708117.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"863\"></p>\n\n<ul><li>Serial、ParNew、Parallel Scavenge是用于回收Young Generation</li>\n    <li>CMS、Serial Old、Parallel Old是用于回收Old Generation</li>\n    <li>G1、ZGC、Shenandoah不区分老年代和新生代。</li>\n    <li>Epsilon是一个空的GC，仅仅用于调试JDK。</li>\n    <li>图中的红色虚线表示可以配合使用。</li>\n</ul><h2 id=\"Serial\"><a name=\"t16\"></a><a name=\"t16\"></a>Serial</h2>\n\n<p><img alt=\"\" height=\"436\" src=\"https://img-blog.csdnimg.cn/20200220130215487.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"815\"></p>\n\n<p>垃圾回收的时候，程序是无法执行的。stop-the-world(STW)是停止程序运行，回收线程开始运行，回收结束后程序再接着运行。</p>\n\n<h2 id=\"Parallel%20Scavenge\"><a name=\"t17\"></a><a name=\"t17\"></a>Parallel Scavenge</h2>\n\n<p><img alt=\"\" height=\"471\" src=\"https://img-blog.csdnimg.cn/20200220130956610.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"808\"></p>\n\n<p>并行回收，多个线程同时进行垃圾回收。</p>\n\n<h2 id=\"ParNew\"><a name=\"t18\"></a><a name=\"t18\"></a>ParNew</h2>\n\n<p><img alt=\"\" height=\"474\" src=\"https://img-blog.csdnimg.cn/2020022013122529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"827\"></p>\n\n<p>配合CMS的年轻代并行回收。</p>\n\n<h2 id=\"SerialOld\"><a name=\"t19\"></a><a name=\"t19\"></a>SerialOld</h2>\n\n<p>单线程回收算法用于old区域</p>\n\n<h2 id=\"Parallel%20Old\"><a name=\"t20\"></a><a name=\"t20\"></a>Parallel Old</h2>\n\n<p>多线程回收算法用于old区域</p>\n\n<h2 id=\"CMS\"><a name=\"t21\"></a><a name=\"t21\"></a>CMS</h2>\n\n<p>ConcurrentMarkSweep，用于回收老年代，在垃圾回收的同时程序也能运行。(黄色的表示垃圾回收线程，蓝色表示程序执行线程）</p>\n\n<p><img alt=\"\" height=\"456\" src=\"https://img-blog.csdnimg.cn/20200220132715191.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"835\"></p>\n\n<p><img alt=\"\" height=\"445\" src=\"https://img-blog.csdnimg.cn/20200220133005356.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\" width=\"836\"></p>\n\n<p>调优针对的是Serial、Parallel Scavenge和Serial Old、Parallel New，因为JDK1.8默认的垃圾回收：Parallel Scavenge + Parallel Old。</p>\n\n<h1 id=\"6%E3%80%81JVM%E5%8F%82%E6%95%B0\"><a name=\"t22\"></a><a name=\"t22\"></a>6、JVM参数</h1>\n\n<p>JVM的命令行参数参考：https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html</p>\n\n<p>JVM参数分类：</p>\n\n<ul><li>标准：-开头，所有的HotSpot都支持。 如：java -version</li>\n    <li>非标准：-X开头，特定版本HotSpot支持特定命令</li>\n    <li>不稳定：-XX开头，下个版本可能取消\n    <ol><li>-XX: +PrintFlagsFinal &nbsp; --- 设置值（最终生效值)</li>\n        <li>-XX:+PrintFlagsInitial &nbsp;--- 默认值</li>\n        <li>-XX:+PrintCommandLineFlags ---命令行参数</li>\n    </ol></li>\n</ul><h1 id=\"7%E3%80%81%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE\"><a name=\"t23\"></a><a name=\"t23\"></a>7、思维导图</h1>\n\n<p><img alt=\"\" src=\"https://img-blog.csdnimg.cn/20200220151948590.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzODYxNzM=,size_16,color_FFFFFF,t_70\"></p>\n\n<p>参考文档：</p>\n\n<p><a href=\"https://blogs.oracle.com/jonthecollector/our-collectors\" target=\"_blank\" rel=\"nofollow noopener\">https://blogs.oracle.com/jonthecollector/our-collectors</a></p>\n\n<p><a href=\"https://blogs.oracle.com/jonthecollector/why-not-a-grand-unified-garbage-collector\" target=\"_blank\" rel=\"nofollow noopener\">https://blogs.oracle.com/jonthecollector/why-not-a-grand-unified-garbage-collector</a></p>\n"},{"_content":"## 一，排序\n\n对数组从小到大排序\n\n```java\n    public void sortUsingLambda(List<Integer> indexs) {\n        Collections.sort(indexs, (s1, s2) -> s1.compareTo(s2));\n    }\n```\n更简洁的实现方式\n\n```java\n    public void sortUsingLambda(List<Integer> indexs) {\n        Collections.sort(indexs, Integer::compareTo);\n    }\n```\n对数组从小到大排序\n```java\n    public void sortUsingLambda(List<Integer> indexs) {\n        Collections.sort(indexs, (s1, s2) -> s2.compareTo(s1));\n    }\n```\n从小到大简洁实现\n\n```java\n    public void sortUsingLambda(List<Integer> indexs) {\n        Collections.sort(indexs, Comparator.reverseOrder());\n    }\n```\n\n## 二，list转map\n**①：取list中某2个字段作为Map的K,V**\n```java\npublic Map<Long, String> getIdNameMap(List<Account> accounts) {\n    return accounts.stream().collect(Collectors.toMap(Account::getId, Account::getUsername));\n}\n```\n**②：将id和实体Bean做为K,V**\n```java\npublic Map<Long, Account> getIdAccountMap(List<Account> accounts) {\n    return accounts.stream().collect(Collectors.toMap(Account::getId, account -> account));\n}\n```\n或者这样写\n```java\npublic Map<Long, Account> getIdAccountMap(List<Account> accounts) {\n    return accounts.stream().collect(Collectors.toMap(Account::getId, Function.identity()));\n}\n```\naccount -> account是一个返回本身的lambda表达式，后面的使用Function接口中的一个默认方法代替，使整个方法更简洁优雅。\n**③：key存在重复记录时处理**\n\n```java\npublic Map<String, Account> getNameAccountMap(List<Account> accounts) {\n    return accounts.stream().collect(Collectors.toMap(Account::getUsername, Function.identity(), (key1, key2) -> key2));\n}\n```\n**④：使用某个具体的Map类来保存，如保存时使用LinkedHashMap**\n\n```java\npublic Map<String, Account> getNameAccountMap(List<Account> accounts) {\n    return accounts.stream().collect(Collectors.toMap(Account::getUsername, Function.identity(), (key1, key2) -> key2, LinkedHashMap::new));\n}\n```\n**⑤：List<Object>转List<String,Map<String, String>>**\n\n```java\npublic Map<String,List<MCode>> getCodeListMap(){\n        if(CollectionUtils.isEmpty(codeListMap)){\n                List<MCode> codeList = this.getCodeList();\n                Set<String> keySet = codeList.stream().map(code -> code.getCodeKbn()).collect(Collectors.toSet());\n                Iterator<String> it = keySet.iterator();\n                while(it.hasNext()) {\n                        String key = it.next();\n                        codeListMap.put(key, codeList.stream().filter(code -> code.getCodeKbn().equals(key)).collect(Collectors.toList()));\n                }\n        }\n        return codeListMap;\n}\n```\n\n三，Map转List\n\n```java\nMap<String, String> map = new HashMap<>();\n// Convert all Map keys to a List\nList<String> result = new ArrayList(map.keySet());\n// Convert all Map values to a List\nList<String> result2 = new ArrayList(map.values());\n// Java 8, Convert all Map keys to a List\nList<String> result3 = map.keySet().stream()\n\t.collect(Collectors.toList());\n// Java 8, Convert all Map values  to a List\nList<String> result4 = map.values().stream()\n\t.collect(Collectors.toList());\n// Java 8, seem a bit long, but you can enjoy the Stream features like filter and etc.\nList<String> result5 = map.values().stream()\n\t.filter(x -> !\"apple\".equalsIgnoreCase(x))\n\t.collect(Collectors.toList());\n// Java 8, split a map into 2 List, it works!\n// refer example 3 below\n```\n\n","source":"_posts/Ladmbda表达式.md","raw":"## 一，排序\n\n对数组从小到大排序\n\n```java\n    public void sortUsingLambda(List<Integer> indexs) {\n        Collections.sort(indexs, (s1, s2) -> s1.compareTo(s2));\n    }\n```\n更简洁的实现方式\n\n```java\n    public void sortUsingLambda(List<Integer> indexs) {\n        Collections.sort(indexs, Integer::compareTo);\n    }\n```\n对数组从小到大排序\n```java\n    public void sortUsingLambda(List<Integer> indexs) {\n        Collections.sort(indexs, (s1, s2) -> s2.compareTo(s1));\n    }\n```\n从小到大简洁实现\n\n```java\n    public void sortUsingLambda(List<Integer> indexs) {\n        Collections.sort(indexs, Comparator.reverseOrder());\n    }\n```\n\n## 二，list转map\n**①：取list中某2个字段作为Map的K,V**\n```java\npublic Map<Long, String> getIdNameMap(List<Account> accounts) {\n    return accounts.stream().collect(Collectors.toMap(Account::getId, Account::getUsername));\n}\n```\n**②：将id和实体Bean做为K,V**\n```java\npublic Map<Long, Account> getIdAccountMap(List<Account> accounts) {\n    return accounts.stream().collect(Collectors.toMap(Account::getId, account -> account));\n}\n```\n或者这样写\n```java\npublic Map<Long, Account> getIdAccountMap(List<Account> accounts) {\n    return accounts.stream().collect(Collectors.toMap(Account::getId, Function.identity()));\n}\n```\naccount -> account是一个返回本身的lambda表达式，后面的使用Function接口中的一个默认方法代替，使整个方法更简洁优雅。\n**③：key存在重复记录时处理**\n\n```java\npublic Map<String, Account> getNameAccountMap(List<Account> accounts) {\n    return accounts.stream().collect(Collectors.toMap(Account::getUsername, Function.identity(), (key1, key2) -> key2));\n}\n```\n**④：使用某个具体的Map类来保存，如保存时使用LinkedHashMap**\n\n```java\npublic Map<String, Account> getNameAccountMap(List<Account> accounts) {\n    return accounts.stream().collect(Collectors.toMap(Account::getUsername, Function.identity(), (key1, key2) -> key2, LinkedHashMap::new));\n}\n```\n**⑤：List<Object>转List<String,Map<String, String>>**\n\n```java\npublic Map<String,List<MCode>> getCodeListMap(){\n        if(CollectionUtils.isEmpty(codeListMap)){\n                List<MCode> codeList = this.getCodeList();\n                Set<String> keySet = codeList.stream().map(code -> code.getCodeKbn()).collect(Collectors.toSet());\n                Iterator<String> it = keySet.iterator();\n                while(it.hasNext()) {\n                        String key = it.next();\n                        codeListMap.put(key, codeList.stream().filter(code -> code.getCodeKbn().equals(key)).collect(Collectors.toList()));\n                }\n        }\n        return codeListMap;\n}\n```\n\n三，Map转List\n\n```java\nMap<String, String> map = new HashMap<>();\n// Convert all Map keys to a List\nList<String> result = new ArrayList(map.keySet());\n// Convert all Map values to a List\nList<String> result2 = new ArrayList(map.values());\n// Java 8, Convert all Map keys to a List\nList<String> result3 = map.keySet().stream()\n\t.collect(Collectors.toList());\n// Java 8, Convert all Map values  to a List\nList<String> result4 = map.values().stream()\n\t.collect(Collectors.toList());\n// Java 8, seem a bit long, but you can enjoy the Stream features like filter and etc.\nList<String> result5 = map.values().stream()\n\t.filter(x -> !\"apple\".equalsIgnoreCase(x))\n\t.collect(Collectors.toList());\n// Java 8, split a map into 2 List, it works!\n// refer example 3 below\n```\n\n","slug":"Ladmbda表达式","published":1,"date":"2020-03-06T08:54:58.317Z","updated":"2020-03-06T08:54:58.317Z","title":"Ladmbda表达式","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7fy5xji00018ds6hyo3fd3t","content":"<h2 id=\"一，排序\"><a href=\"#一，排序\" class=\"headerlink\" title=\"一，排序\"></a>一，排序</h2><p>对数组从小到大排序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sortUsingLambda</span><span class=\"params\">(List&lt;Integer&gt; indexs)</span> </span>&#123;</span><br><span class=\"line\">    Collections.sort(indexs, (s1, s2) -&gt; s1.compareTo(s2));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>更简洁的实现方式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sortUsingLambda</span><span class=\"params\">(List&lt;Integer&gt; indexs)</span> </span>&#123;</span><br><span class=\"line\">    Collections.sort(indexs, Integer::compareTo);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对数组从小到大排序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sortUsingLambda</span><span class=\"params\">(List&lt;Integer&gt; indexs)</span> </span>&#123;</span><br><span class=\"line\">    Collections.sort(indexs, (s1, s2) -&gt; s2.compareTo(s1));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从小到大简洁实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sortUsingLambda</span><span class=\"params\">(List&lt;Integer&gt; indexs)</span> </span>&#123;</span><br><span class=\"line\">    Collections.sort(indexs, Comparator.reverseOrder());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二，list转map\"><a href=\"#二，list转map\" class=\"headerlink\" title=\"二，list转map\"></a>二，list转map</h2><p><strong>①：取list中某2个字段作为Map的K,V</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Map&lt;Long, String&gt; <span class=\"title\">getIdNameMap</span><span class=\"params\">(List&lt;Account&gt; accounts)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> accounts.stream().collect(Collectors.toMap(Account::getId, Account::getUsername));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>②：将id和实体Bean做为K,V</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Map&lt;Long, Account&gt; <span class=\"title\">getIdAccountMap</span><span class=\"params\">(List&lt;Account&gt; accounts)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> accounts.stream().collect(Collectors.toMap(Account::getId, account -&gt; account));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或者这样写</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Map&lt;Long, Account&gt; <span class=\"title\">getIdAccountMap</span><span class=\"params\">(List&lt;Account&gt; accounts)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> accounts.stream().collect(Collectors.toMap(Account::getId, Function.identity()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>account -&gt; account是一个返回本身的lambda表达式，后面的使用Function接口中的一个默认方法代替，使整个方法更简洁优雅。<br><strong>③：key存在重复记录时处理</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Account&gt; <span class=\"title\">getNameAccountMap</span><span class=\"params\">(List&lt;Account&gt; accounts)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> accounts.stream().collect(Collectors.toMap(Account::getUsername, Function.identity(), (key1, key2) -&gt; key2));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>④：使用某个具体的Map类来保存，如保存时使用LinkedHashMap</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Account&gt; <span class=\"title\">getNameAccountMap</span><span class=\"params\">(List&lt;Account&gt; accounts)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> accounts.stream().collect(Collectors.toMap(Account::getUsername, Function.identity(), (key1, key2) -&gt; key2, LinkedHashMap::<span class=\"keyword\">new</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>⑤：List<Object>转List&lt;String,Map&lt;String, String&gt;&gt;</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Map&lt;String,List&lt;MCode&gt;&gt; getCodeListMap()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(CollectionUtils.isEmpty(codeListMap))&#123;</span><br><span class=\"line\">                List&lt;MCode&gt; codeList = <span class=\"keyword\">this</span>.getCodeList();</span><br><span class=\"line\">                Set&lt;String&gt; keySet = codeList.stream().map(code -&gt; code.getCodeKbn()).collect(Collectors.toSet());</span><br><span class=\"line\">                Iterator&lt;String&gt; it = keySet.iterator();</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(it.hasNext()) &#123;</span><br><span class=\"line\">                        String key = it.next();</span><br><span class=\"line\">                        codeListMap.put(key, codeList.stream().filter(code -&gt; code.getCodeKbn().equals(key)).collect(Collectors.toList()));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> codeListMap;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>三，Map转List</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, String&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"><span class=\"comment\">// Convert all Map keys to a List</span></span><br><span class=\"line\">List&lt;String&gt; result = <span class=\"keyword\">new</span> ArrayList(map.keySet());</span><br><span class=\"line\"><span class=\"comment\">// Convert all Map values to a List</span></span><br><span class=\"line\">List&lt;String&gt; result2 = <span class=\"keyword\">new</span> ArrayList(map.values());</span><br><span class=\"line\"><span class=\"comment\">// Java 8, Convert all Map keys to a List</span></span><br><span class=\"line\">List&lt;String&gt; result3 = map.keySet().stream()</span><br><span class=\"line\">\t.collect(Collectors.toList());</span><br><span class=\"line\"><span class=\"comment\">// Java 8, Convert all Map values  to a List</span></span><br><span class=\"line\">List&lt;String&gt; result4 = map.values().stream()</span><br><span class=\"line\">\t.collect(Collectors.toList());</span><br><span class=\"line\"><span class=\"comment\">// Java 8, seem a bit long, but you can enjoy the Stream features like filter and etc.</span></span><br><span class=\"line\">List&lt;String&gt; result5 = map.values().stream()</span><br><span class=\"line\">\t.filter(x -&gt; !<span class=\"string\">\"apple\"</span>.equalsIgnoreCase(x))</span><br><span class=\"line\">\t.collect(Collectors.toList());</span><br><span class=\"line\"><span class=\"comment\">// Java 8, split a map into 2 List, it works!</span></span><br><span class=\"line\"><span class=\"comment\">// refer example 3 below</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一，排序\"><a href=\"#一，排序\" class=\"headerlink\" title=\"一，排序\"></a>一，排序</h2><p>对数组从小到大排序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sortUsingLambda</span><span class=\"params\">(List&lt;Integer&gt; indexs)</span> </span>&#123;</span><br><span class=\"line\">    Collections.sort(indexs, (s1, s2) -&gt; s1.compareTo(s2));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>更简洁的实现方式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sortUsingLambda</span><span class=\"params\">(List&lt;Integer&gt; indexs)</span> </span>&#123;</span><br><span class=\"line\">    Collections.sort(indexs, Integer::compareTo);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对数组从小到大排序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sortUsingLambda</span><span class=\"params\">(List&lt;Integer&gt; indexs)</span> </span>&#123;</span><br><span class=\"line\">    Collections.sort(indexs, (s1, s2) -&gt; s2.compareTo(s1));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从小到大简洁实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sortUsingLambda</span><span class=\"params\">(List&lt;Integer&gt; indexs)</span> </span>&#123;</span><br><span class=\"line\">    Collections.sort(indexs, Comparator.reverseOrder());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二，list转map\"><a href=\"#二，list转map\" class=\"headerlink\" title=\"二，list转map\"></a>二，list转map</h2><p><strong>①：取list中某2个字段作为Map的K,V</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Map&lt;Long, String&gt; <span class=\"title\">getIdNameMap</span><span class=\"params\">(List&lt;Account&gt; accounts)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> accounts.stream().collect(Collectors.toMap(Account::getId, Account::getUsername));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>②：将id和实体Bean做为K,V</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Map&lt;Long, Account&gt; <span class=\"title\">getIdAccountMap</span><span class=\"params\">(List&lt;Account&gt; accounts)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> accounts.stream().collect(Collectors.toMap(Account::getId, account -&gt; account));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或者这样写</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Map&lt;Long, Account&gt; <span class=\"title\">getIdAccountMap</span><span class=\"params\">(List&lt;Account&gt; accounts)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> accounts.stream().collect(Collectors.toMap(Account::getId, Function.identity()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>account -&gt; account是一个返回本身的lambda表达式，后面的使用Function接口中的一个默认方法代替，使整个方法更简洁优雅。<br><strong>③：key存在重复记录时处理</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Account&gt; <span class=\"title\">getNameAccountMap</span><span class=\"params\">(List&lt;Account&gt; accounts)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> accounts.stream().collect(Collectors.toMap(Account::getUsername, Function.identity(), (key1, key2) -&gt; key2));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>④：使用某个具体的Map类来保存，如保存时使用LinkedHashMap</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Account&gt; <span class=\"title\">getNameAccountMap</span><span class=\"params\">(List&lt;Account&gt; accounts)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> accounts.stream().collect(Collectors.toMap(Account::getUsername, Function.identity(), (key1, key2) -&gt; key2, LinkedHashMap::<span class=\"keyword\">new</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>⑤：List<Object>转List&lt;String,Map&lt;String, String&gt;&gt;</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Map&lt;String,List&lt;MCode&gt;&gt; getCodeListMap()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(CollectionUtils.isEmpty(codeListMap))&#123;</span><br><span class=\"line\">                List&lt;MCode&gt; codeList = <span class=\"keyword\">this</span>.getCodeList();</span><br><span class=\"line\">                Set&lt;String&gt; keySet = codeList.stream().map(code -&gt; code.getCodeKbn()).collect(Collectors.toSet());</span><br><span class=\"line\">                Iterator&lt;String&gt; it = keySet.iterator();</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(it.hasNext()) &#123;</span><br><span class=\"line\">                        String key = it.next();</span><br><span class=\"line\">                        codeListMap.put(key, codeList.stream().filter(code -&gt; code.getCodeKbn().equals(key)).collect(Collectors.toList()));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> codeListMap;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>三，Map转List</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, String&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"><span class=\"comment\">// Convert all Map keys to a List</span></span><br><span class=\"line\">List&lt;String&gt; result = <span class=\"keyword\">new</span> ArrayList(map.keySet());</span><br><span class=\"line\"><span class=\"comment\">// Convert all Map values to a List</span></span><br><span class=\"line\">List&lt;String&gt; result2 = <span class=\"keyword\">new</span> ArrayList(map.values());</span><br><span class=\"line\"><span class=\"comment\">// Java 8, Convert all Map keys to a List</span></span><br><span class=\"line\">List&lt;String&gt; result3 = map.keySet().stream()</span><br><span class=\"line\">\t.collect(Collectors.toList());</span><br><span class=\"line\"><span class=\"comment\">// Java 8, Convert all Map values  to a List</span></span><br><span class=\"line\">List&lt;String&gt; result4 = map.values().stream()</span><br><span class=\"line\">\t.collect(Collectors.toList());</span><br><span class=\"line\"><span class=\"comment\">// Java 8, seem a bit long, but you can enjoy the Stream features like filter and etc.</span></span><br><span class=\"line\">List&lt;String&gt; result5 = map.values().stream()</span><br><span class=\"line\">\t.filter(x -&gt; !<span class=\"string\">\"apple\"</span>.equalsIgnoreCase(x))</span><br><span class=\"line\">\t.collect(Collectors.toList());</span><br><span class=\"line\"><span class=\"comment\">// Java 8, split a map into 2 List, it works!</span></span><br><span class=\"line\"><span class=\"comment\">// refer example 3 below</span></span><br></pre></td></tr></table></figure>\n\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}